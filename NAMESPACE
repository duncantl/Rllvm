useDynLib(Rllvm)

#import(RAutoGenRunTime)
import(methods)
import(Rffi)

export(llvmDump)
exportMethods(llvmDump)
export(generatePTX)

exportClasses(
  AllocaInst,
  BasicBlock,
  BranchInst,
  CallInst,
  CastInst,
  CompositeType,
  Constant,
  ConstantFP,
  ConstantInt,
  ConstantAggregateZero,              
  DerivedType,
  ExecutionEngine,
  Function,
  GetElementPtrInst,
  Instruction,
  IRBuilder,
  LLVMContext,
  LoadInst,
  Module,
  ParameterList,
  PointerType,
  'RC++Reference',
  ReturnInst,
  SequentialType,
  SExtInst,
  StoreInst,
  StructType,
  TerminatorInst,
  Type,
  UnaryInstruction,
  UnionType,
  User,
  Value,
  FunctionPassManager,
  BinaryOperator,
  SelectInst,
  Use)


exportClass(Mangler)


export(functionType)

#  ConstantPointerNull,
#  FunctionPass,

exportMethods("$", "names", "names<-", "run", "setName", "getName", "$",
               createIntegerConstant, coerce)

export(
Add,
And,
AShr,
BAD_FCMP_PREDICATE,
BAD_ICMP_PREDICATE,
BinaryOps,
binOp,
Block,
createBr, createBranch, 
createCall,
createCondBr, createCondBranch,
createConstant,
createFloatingPointConstant,
createStringConstant,
createGEP,
createICmp,
createFCmp,
createIntegerConstant,
createLoad,
createLocalArrayVariable,
createLocalVariable,
createNeg,
createFNeg,
createNot,
createRet,
createReturn,
createReturnVoid,
createRetVoid,
createAlloc,
createSExt,
createZExt,       
createStore,
createUIToFP,
createSIToFP,
createFPToSI,
createFPToUI,       
DoublePtrType,
DoubleType,
StringType,       
ExecutionEngine,
FAdd,
FCMP_FALSE,
FCMP_OEQ,
FCMP_OGE,
FCMP_OGT,
FCMP_OLE,
FCMP_OLT,
FCMP_ONE,
FCMP_ORD,
FCMP_TRUE,
FCMP_UEQ,
FCMP_UGE,
FCMP_UGT,
FCMP_ULE,
FCMP_ULT,
FCMP_UNE,
FCMP_UNO,
FDiv,
FIRST_FCMP_PREDICATE,
FIRST_ICMP_PREDICATE,
FloatPtrType,
FloatType,
FMul,
FRem,
FSub,
Function,
Routine,
getGlobalContext,
createLogicalConstant,
getName,
getParameters,
getFunctionArgs,
ICMP_EQ,
ICMP_NE,
ICMP_SGE,
ICMP_SGT,
ICMP_SLE,
ICMP_SLT,
ICMP_UGE,
ICMP_UGT,
ICMP_ULE,
ICMP_ULT,
ICmpInst.Predicate,
InitializeNativeTarget,
InitializeNVPTXTarget,
InitializeCppBackendTarget,       
Int16Type,
Int1Type,
Int32PtrType,
Int32Type,
Int64Type,
Int8Type,
IRBuilder,
isBasicType,
LabelType,
LAST_FCMP_PREDICATE,
LAST_ICMP_PREDICATE,
LShr,
makeConstant,
Module,
Mul,
Or,
pointerType,
run, .llvm, .llvmCallFunction,
SDiv,
setInsertPoint,
setInsertBlock,              
getInsertBlock,
setName,
setTailCall,
Shl,
SRem,
Sub,
UDiv,
URem,
verifyModule,
VoidType,
Xor,
createExtractElement, createInsertElement
)


export(createBitCast, createIntCast)
export(createGlobalVariable, createGlobalVar)
export(Optimize)
exportMethods(Optimize)


export(setLinkage)

export(findRoutine, getPointerToFunction, getPointerToRoutine, getFunctionAddress)

export(createDoubleConstant)

export(showModule)



export(ExternalLinkage,
AvailableExternallyLinkage,
LinkOnceAnyLinkage,
LinkOnceODRLinkage,
WeakAnyLinkage,
WeakODRLinkage,
AppendingLinkage,
InternalLinkage,
PrivateLinkage,
LinkerPrivateLinkage,
DLLImportLinkage,
DLLExportLinkage,
ExternalWeakLinkage,
CommonLinkage)

export(llvmAddSymbol, llvmLoadDLL)


export(createGlobalString, createIsNull, createIsNotNull, createSelect,
       createUnreachable, createUnwind)



export(getModule)

export(getModuleFunctions)
export(getPassManager)
export(getBlocks)

export(getTerminator)
export(getGlobalVariable)
export(getCalledFunction, getReturnType, getType, getTypeID)
export(getElementType)


export(createNeg, createNot)
exportMethods(createNeg, createNot)

export(getFalse, getTrue)



export(getScalarType, getDescription)
exportMethods(getDescription)

export(isVoidType, isFloatType, isDoubleType, isX86_FP80Type, isFP128Type,
       isPPC_FP128Type, isLabelType, isMetadataType, isIntegerType, isFunctionType,
       isStructType, isArrayType, isPointerType, isOpaqueType, isVectorType)


export(parseIR)

exportMethods("names", "[", "[[", "$")
exportMethods(coerce)


export('isTerminator')
export('isBinaryOp')
export('isShift')
export('isCast')
export('isLogicalShift')
export('isArithmeticShift')
export('hasMetadata')
export('hasMetadataOtherThanDebugLoc')
export('isAssociative')
export('isCommutative')
export('mayWriteToMemory')
export('mayReadFromMemory')
export('mayThrow')
export('mayHaveSideEffects')
export('isSafeToSpeculativelyExecute')

export(getOpcode)

export(getParent)
export(getBlockInstructions)
export(eraseFromParent, removeFromParent)

exportMethods("[[<-") # module

export(getGlobalVariables, getModuleGlobals)

export(structType, getElementTypes)

export(arrayType, getNumElements)
export(vectorType)


export(parseAssembly)

export(makeRFunction)

export(clone)
exportMethods(clone)


export(readBitcode, writeBitcode)

export(getGlobalValue)

export(getIntegerBitWidth, getIntSize)
export(getIntrinsicID, getIntrinsic, getIntrinsicName, isIntrinsicOverloaded, isIntrinsic)

export(setInitializer)

export(getIntegerType)
export(setAlignment)
exportMethods(setAlignment)

#export(getFunctionType)

export(addModule)

export(getGetElementPtr)


export(string) # utility like character() but for a single string with the given number of characters

export(getContext)
exportMethods(getContext)

export(sameType)

export(getLLVMTargets)

export(isStringType)

export(simpleFunction)

export(addCases)

export(createCast)
export(setFuncAttributes, getFuncAttributes)


export(getTargetTriple, setTargetTriple)
export(createTargetMachine, targetLibraryInfo, lookupTarget)

export(getDataLayout, setDataLayout)
exportMethods(getDataLayout, setDataLayout)


export(addPass)
export(passManager, functionPassManager)

export(llvmVersion)


export(getSEXPType)


exportClasses(SEXPType, LGLSXPType, INTSXPType, REALSXPType, STRSXPType, VECSXPType, CHARSXPType)
export(SEXPType, LGLSXPType, INTSXPType, REALSXPType, STRSXPType, VECSXPType, CHARSXPType)

export(createStructGEP)


export(constantAggregateZero)


exportPattern("CodeGenOpt_.*")  # enums for optimization level

exportClass(FunctionType)

export(getFirstNonPHI)

export(llvmShutdown, llvmStartMultiThreaded, llvmStopMultiThreaded)

export(declareFunction)

export(setParamAttributes)
exportClass("Argument")



export(getNumOperands, getOperand)
exportMethods(getNumOperands, getOperand)


export(sapply, lapply)
exportMethods(sapply, lapply)


exportClasses(raw_string_ostream, formatted_raw_ostream)


export(addAnalysisPasses, addPassesToEmitFile)
export(rawFDOstream, formattedRawOstream, rawStringOstream)


exportClasses(MDNode, MDString, NamedMDNode)
export(setMetadata, getMetadata)
export(getNumOperands, getOperands)

exportClass("Metadata")

exportMethods(length)

export(LLVMAttributes)

export(insertBefore, insertAfter, moveBefore)

export(isa)

export(setCallingConv, getCallingConv)
export(InitializeAllTargets, InitializeAllTargetMCs, InitializeAllAsmPrinters, InitializeAllAsmParsers)


#Temporary
#export(llc)

export(getDefaultTargetTriple)

S3method(flush, formatted_raw_ostream)

export(createFPTrunc, createTrunc)

export(setArgByVal, hasByValAttr)

export(byVal, "byVal<-")
exportMethods(byVal, "byVal<-")

export(isInBounds, "isInBounds<-")
exportMethods(isInBounds, "isInBounds<-")


export(parseIRError)

# Document.
export(getCondition, getSuccessor, getNumSuccessors, isConditional, getSuccessors)
export(getValue)
export(getNULLPointer)


export(isVarArg)


#export(createAggressiveDCEPass, createDeadCodeEliminationPass, createDeadStoreEliminationPass)

export( createAggressiveDCEPass,
  createDeadCodeEliminationPass,
  createDeadStoreEliminationPass,
  createInstructionCombiningPass,
  createPromoteMemoryToRegisterPass,
  createDemoteRegisterToMemoryPass,
  createReassociatePass,
  createCFGSimplificationPass,
  createJumpThreadingPass,
  createTailCallEliminationPass,
  createFlattenCFGPass,
  createMemCpyOptPass,
  createCodeGenPreparePass,
  createInstructionSimplifierPass,
  createSinkingPass,
  createStructurizeCFGPass,
  createLoopSimplifyPass,
  createLICMPass,
  createSROAPass,
  createScalarReplAggregatesPass,
  createIndVarSimplifyPass,
  createLoopStrengthReducePass,
  createGlobalMergePass,
  createLoopDeletionPass,
  createCorrelatedValuePropagationPass,
  createPartiallyInlineLibCallsPass )

export(shutdown)


export(onlyReadsMemory)
exportMethods(onlyReadsMemory)

export(insertAtEnd)

export(isLandingPad, getLandingPadInst)

export(createPHI,createPhi)


export(getBlockGraph)
exportClass("TikzEdges")
exportClass("EdgeMatrix")
S3method(print, "TikzEdges")


export(getAllUses, getAllUsers)
export(replaceAllUsesWith)
export(replaceUsesOfWith)
exportMethods("length")
exportMethods("[[")



export(setIncomingBlock, addIncoming, getBasicBlockIndex, getIncomingValueForBlock, hasConstantValue)


# DataLayout
export(isLittleEndian, getPointerSize, getStackAlignment, getPointerTypeSize, getTypeAllocSize, getABITypeAlignment)



# These function names are likely to change.
export(DIBuilder, finalizeDIBuilder, newDebugCompileUnit, newDebugFunction, newDebugLocalVariable, newDebugBasicType, newDebugFunctionType, newDebugPointerType, debugSetLocation)

exportClasses(DIBuilder, DICompileUnit, DISubprogram, DIType, DISubroutineType)

export(finalizeEngine)




exportClass("RFunctionJITEventListener", "ObjectFile", "LoadObjectInfo")

export(getHostCPUFeatures, getHostCPUName)
exportClasses("raw_svector_ostream")
export(raw_svector_ostream)


export(setFastISel)

export(getAssemblyCode)


# This one looks for the nameReturnType metadata to identify the name of the R variable identifying the type.
export(getFunctionReturnType)


export(getDataLayoutString)
exportMethods(getDataLayoutString)

export(getPredecessor, getSuccessor)

export(getClassName)

export(blocks, incoming_values)

export(getUser, getAllUsers)


export(getInitializer, getAsCString)
