We don't return a variable, we return its value. For this, we use createLoad() before createReturn().

Blocks can be created in any order. The branches control how
they are traversed at run-time.

Run-Time:

When passing a pointer to a compiled routine, we pass an externalptr
object. Sometimes we store this in an S4 object. If we use the convention
that the slot used to hold this pointer is named "ref", the Rllvm
code will try to access that. This avoids having to explicitly 
pass x@ref, but instead just x.
If the S4 class extends RC++Reference, the ref slot is immediately available
and all will work.


Why i32 or i64 indexing in GEP
  See  https://stackoverflow.com/questions/30383342/the-gep-instruction-i32-vs-i64
  Says they are basically the same for 0L
  https://blog.yossarian.net/2020/09/19/LLVMs-getelementptr-by-example
   Google:  <LLVM GEP>