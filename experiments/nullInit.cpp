// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("nullInit.ll", getGlobalContext());
 mod->setDataLayout("0x7fac5b600108");
 mod->setTargetTriple("x86_64-apple-macosx10.9.0");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_1 = PointerType::get(PointerTy_0, 0);
 
 
 // Function Declarations
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_ptr_x = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/PointerTy_0,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"x");
 gvar_ptr_x->setAlignment(8);
 
 // Constant Definitions
 ConstantPointerNull* const_ptr_2 = ConstantPointerNull::get(PointerTy_0);
 
 // Global Variable Definitions
 gvar_ptr_x->setInitializer(const_ptr_2);
 
 // Function Definitions
 
 return mod;
}
