http://blog.llvm.org/2013/07/using-mcjit-with-kaleidoscope-tutorial.html
  memory manager and resolving symbols.
  Should we implement one to connect to R's symbol lookup.



Type equality - https://lowlevelbits.org/type-equality-in-llvm/


URLs for DIBuilder concepts and reference
http://llvm.org/docs/SourceLevelDebugging.html
http://llvm.org/docs/tutorial/LangImpl8.html

TBAA - Type Based Alias  Analysis

.ll  files are the text version of LLVM code in its Intermediate Representation

.bc  binary bitcode


See experiments/


To get IR code:
clang fib.c -emit-llvm -S -o -

The opt command line executable is for passing IR code through the LLVM optimizer passes.

   opt -print-after-all ~/GitWorkingArea/Rllvm/experiments/add.ll  > /tmp/FOO

 bitcode goes to /tmp/FOO; we see IR code on the  (?)



Activating Different Targets
 For example, the NVPTX


A call instruction is represented as 
  arg1, arg2, ...,  called routine
This the order of the operands.



## Data Layout String
See https://llvm.org/docs/LangRef.html#1264
datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
elements separated by -
e -  little endian
m:o - name mangling.  o is the option => Mach-O mangling.  Private symbols get L prefix. Other symbols get a _ prefix.
p270:32:32 - specifies the size of a pointer and its <abi> and <pref>erred alignments for address space n
p271:32:32
p272:64:64
i64:64 -  alignment for an integer type of a given bit <size> = 64 (the first one).
f80:128 - alignment for a floating-point type of a given bit <size>.
n8:16:32:64 - set of native integer widths for the target CPU in bit
S128 - natural alignment of the stack in bits.


## Target Triple

Of the form
```
ARCHITECTURE-VENDOR-OPERATING_SYSTEM-ENVIRONMENT
```
with elements separated by -
e.g., "x86_64-apple-darwin19.0.0"






Build command for llvm/examples/HowToUseLLJIT:

clang++  -o foo HowToUseLLJIT.cpp `llvm-config --cflags --ldflags --libs  Core OrcJIT Support nativecodegen --system-libs ` -lz



LLJIT  ORC
 https://llvm.org/docs/ORCv2.html
 
Have to be very careful with smart pointers.
 std::unique_ptr, std::move
Should we clone the Modules



llvm::Expected class for regular return value and errors.
  + get





addPassesToEmitFile
  https://groups.google.com/forum/#!topic/llvm-dev/XZC-xX-Z9zs

  https://cgit.freedesktop.org/mesa/mesa/tree/src/gallium/auxiliary/gallivm/lp_bld_debug.cpp

  http://eli.thegreenplace.net/2012/11/24/life-of-an-instruction-in-llvm/
  http://eli.thegreenplace.net/2013/02/25/a-deeper-look-into-the-llvm-code-generator-part-1

  ObjectBufferStream.


NativeAsmPrinter
  


JITEventListener
    http://stackoverflow.com/questions/18411372/print-x86-assembly-instead-of-getting-machine-code-from-executionengine
   Deal with ObjectFile and LoadedObjectInfo in the event handler.



LLDB
  A debugger can show the machine code so we can use that.

Other