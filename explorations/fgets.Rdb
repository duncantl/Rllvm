<?xml version="1.0"?>
<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	 xmlns:c="http://www.C.org"
	 xmlns:omg="http://www.omegahat.org">

<articleinfo>

<ignore>
To run this code directly from this document, evaluate the code below
<r:code>
library(XML)
xmlSource("fgets.Rdb", verbose = TRUE)
doc = xmlParse("fgets.Rdb")
tt = getNodeSet(doc, "//section[@id = 'timings']//r:test | //r:function[@id = 'rfuns'] | //r:test[@id='makeInputs']")
xmlSource(tt, verbose = TRUE, force = TRUE)
</r:code>
</ignore>

<title>On Compiling Access to <c:routine>fgets</c:routine></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title>Overview</title>

<para>
We use this in our <ulink url="sampleCSV.Rdb">sampleCSV()</ulink>.
</para>

<para>
We will use the <c/> routine <c:routine>fgets</c:routine> to read
a line from a file.
This takes a pointer an opaque data structure representing the file cursor
which we obtain via a call to the <c:func>fopen</c:func> routine.
We also have to specify the memory into which <c:func>fgets</c:func>  will place the 
contents of the line. We can allocate space or alternatively we can use a module-specific
<quote>global</quote> variable.
We create this global variable which is a char(acter) array of length 1000.
Then we will have to pass a pointer to this array in our call to <c:routine>fgets</c:routine>.
</para>
<para>
We start by creating our module and <r:class>ExecutionEngine</r:class>:
<r:code thread="manual">
library(RLLVMCompile)
mod = Module("fgets")
ee = ExecutionEngine(mod)
</r:code>
</para>
<para>
<c:func>fgets</c:func> requires a pointer to a <c:type>FILE</c:type>  object.
So we define a representation for this type. 
Since it is an opaque and we only deal with pointers to it, the precise
format is not important.
<r:code thread="manual">
#FILEType = pointerType(Int32Type) # an opaque struct type?
FILEType = pointerType(structType(list(o = Int32Type))) # an opaque struct type?
stringType = pointerType(getIntegerType(8L, getContext(mod)))
</r:code>
Note that we can now use the variable <r:var>StringType</r:var> which is now in <omg:pkg>Rllvm</omg:pkg>.
</para>

<para>
We create the global variable to store each line with
<r:code thread="manual">
.str = createGlobalVariable(".str", mod, val = string(1000))#, linkage = PrivateLinkage)
</r:code>

We need a pointer to this array to pass to <c:func>fgets</c:func>.
This is a little confusing and requires careful thought as to why we want a pointer to the array
and not just the array itself. Nevertheless, we compute the pointer with
<r:code thread="manual">
 # we'd like to be able to use .str and have R functions call getGetElementPtr for us.
p = getGetElementPtr(.str)
.ptr = createGlobalVariable("ptr", mod, stringType, p) 
</r:code>
Next, we need to tell <llvm/> about how we need to call <c:func>fgets</c:func>
by specifying  its signature. 
We can do this explicitly by creating a <r:class>Function</r:class> object
or using the <r:func>declareFunction</r:func> helper function:
<r:code thread="manual">
fgets = declareFunction(list(StringType, StringType, Int32Type, FILEType), "fgets", mod) 
</r:code>
If we are using <r:func>compileFunction</r:func> in <omg:pkg>RLLVMCompile</omg:pkg>,
we could specify this information via <r:arg>.routineInfo</r:arg> parameter of <r:func>compileFunction</r:func>.
</para>
<para>
We also need to tell <llvm/> how to locate this routine. We resolve it
in <r/> and pass its address to <llvm/>:
<r:code thread="manual">
llvmAddSymbol(fgets = getNativeSymbolInfo("fgets")$address)
</r:code>
</para>

<para>
We'll compile the code manually here rather than using <r:func>compileFunction</r:func> (which we do below).
We create the <r:func>Function</r:func> object.
We have it return the value of the call to <c:func>fgets</c:func>.
<r:code thread="manual">
fun = Function("Fgets", StringType, list(file = FILEType), module = mod)
b = Block(fun)
ir = IRBuilder(b)
</r:code>
</para>
<para>
To invoke the <c:func>fgets</c:func> routine, we need to load the 
pointer to the array and then pass the first argument of our function and that pointer:
<r:code thread="manual">
f = getParameters(fun)[[1]]
ll = ir$createLoad(.ptr)
sz = createIntegerConstant(1000L)
ir$createCall(fgets, ll, sz, f)
</r:code>
Finally, we return from our compiled routine:
<r:code thread="manual">
ir$createReturn(ir$createLoad(.ptr))
</r:code>

<r:code>
print(showModule(mod))
</r:code>
</para>



<para>
If we want to use <r:func>compileFunction</r:func> to create our generated function,
we first write an  <r/> version of our simple call to <r:func>fgets</r:func>:
<r:code>
Fgets  =
function(file)
{
  fgets(ptr, 1000L, file) #  != NULL # should raise an error if NULL.
}
</r:code>
Then we can compile the function using <r:func>compileFunction</r:func>
<r:code eval="false">
fun = compileFunction(Fgets, StringType, list(FILEType), mod, name = "Fgets")
</r:code>
The following changes the return type to a pointer to an integer.
<r:code eval="false">
fun = compileFunction(Fgets, pointerType(Int8Type), list(FILEType), mod, name = "Fgets")
</r:code>
<q>
This  claims there is a mismatch in the argument types. 
In ../simpleCall.R, we go through each of the parameters and see
which fail.  The problem appears that the type of the global variable
ptr is not the same as stringType.
Is it that we are not loading the variable?
</q>
Note that we could use <r:var>.str</r:var> rather than <r:var>ptr</r:var> in the call to 
<r:func>fgets</r:func> and our compiler should figure out to use
the pointer to <r:var>.str</r:var> via a <r:func>getGetElementPtr</r:func> call.
</para>


<para>
How do we get the pointer to the <c:type>FILE</c:type> that we pass to our compiled
routine? We can compile a call to <c:func>fopen</c:func>.
Alternatively, we can use the <r:func>CFILE</r:func> function in
the <omg:pkg>RCurl</omg:pkg> package and the address it returns in its <r:slot>ref</r:slot> slot.
</para>


<para>
Let's invoke our function.
We'll read the lines from this Rdb file.
<r:code eval="false" id="test">
library(RCurl)
f = CFILE("fgets.Rdb", "r")
.llvm(fun, f@ref)
invisible(replicate(5, .llvm(fun, f@ref, .ee = ee)))
mod[["ptr", ee = ee]]
</r:code>
</para>
</section>

<section>
<title>Calling the <c:func>fopen</c:func> Routine</title>

<para>
The signature for <c:func>fopen</c:func> is
<c:code eval="false">
FILE *fopen(const char *, const char *)
</c:code>
We can create a wrapper to this routine with
<r:code thread="fopen">
#mod = Module()
fopen = Function("fopen", FILEType, list(StringType, StringType), module = mod)
fun = Function("Fopen", FILEType, list(file = StringType, mode = StringType), module = mod)
b = Block(fun, "entry")
ir = IRBuilder(b)
params = getParameters(fun)
tmp = ir$createCall(fopen, params[[1]], params[[2]])
ir$createRet(tmp)
</r:code>
</para>

<ignore>
<r:code>
fopen = Function("fopen", VoidType, list(StringType, StringType), module = mod)
b = Block(fopen)
ir =IRBuilder(b)
#ans = ir$createLocalVariable(FILEType, "tmp")
params = getParameters(fopen)
tmp = ir$createCall(fopen, params[[1]], params[[2]])
#ir$createStore(tmp, ans)
#ans = ir$createLoad(ans)
#ir$createRet(ans)
ir$createRetVoid()
</r:code>
</ignore>


<para>
Let's test this with
<r:code>
llvmAddSymbol(fopen = getNativeSymbolInfo("fopen")$address)
ee = ExecutionEngine(mod)
ff = .llvm(fun, "tmp", "r", .ee = ee)
</r:code>
</para>

<section>
<title>Calling <c:func>fclose</c:func></title>
<para>
We need to be able to close the <c:type>FILE*</c:type> object.
We can do this using either of the  <r:pkg>rdyncall</r:pkg>
or <omg:pkg>Rffi</omg:pkg> packages.
However, we will compile a wrapper using <omg:pkg>Rllvm</omg:pkg>.
The native routine has a signature
<c:code eval="false">
void fclose(FILE *);
</c:code>
This is even simpler than our previous routines.
We can create the wrapper with
<r:code thread="fclose">
#m = Module()
m = mod
fclose = Function("fclose", VoidType, list(FILEType), module = m)
Fclose = Function("Fclose", VoidType, list(FILEType), module = m)
b = Block(Fclose, "entry")
ir = IRBuilder(b)
params = getParameters(Fclose)
tmp = ir$createCall(fclose, params[[1]])
ir$createRetVoid()
</r:code>
</para>
<para>

We can test this and close the handle we opened above with
<r:code>
llvmAddSymbol(fclose = getNativeSymbolInfo("fclose")$address)
ee = ExecutionEngine(m)
ff = .llvm(Fclose, ff, .ee = ee)
</r:code>
</para>
</section>
</section>




<section>
<title>Reading Multiple Lines to a Particular Line Number</title>
<r:function><![CDATA[
readTo =
function(n, file)
{
  ctr = 0L
  tmp = "" # character() # ""
    # perhaps use replicate(n, Fgets(file))
    # and compile that out.  But only want the last value.
  while(ctr < n) {
     tmp = Fgets(file)   
     ctr = ctr + 1L
  }
  tmp
}
]]></r:function>
<q>Can we get away without creating tmp outside of the loop.</q>

<r:code>
#debug(RLLVMCompile:::`compile.=`)
rr = compileFunction(readTo, StringType, list(Int32Type, FILEType), mod, name = "readTo")
</r:code>


<r:code eval="false">
library(RCurl)
ff = CFILE("../NAMESPACE")
.llvm(mod[["readTo"]], 5, ff@ref)
</r:code>
</section>

<section>
<title></title>

<para>
The next step is to be able to call the 
compiled readTo routine in a loop.
We have an integer vector giving the line numbers we want to read.
We'll make this easy and compute the differences in <r/>, i.e.
the number of lines to read to the next line we actually want.
We can then pass this directly to <r:func>readTo</r:func>.
So we want an <r/> function  something like
<r:function eval="false">
function(lineSkip, file)
{
   ans = character()
   for(i in lineSkip)
      ans = c(ans, readTo(i, file))
   ans
}
</r:function>
This doesn't use pre-allocation. So we want 
<r:function>
readSelectedLines = 
function(lineSkip, file)
{
   ans = character(length(lineSkip))
   for(i in seq(along = lineSkip))
      ans[i] = readTo(lineSkip[i], file)
   ans
}
</r:function>
This is  a little verbose and awkward.
We really  want to do this so that we can use the loop counter to 
index and avoid the <r:expr eval="false">seq(along = lineSkip)</r:expr>. 
We would like
<r:code eval="false">
  for(i in lineSkip)
     ans[i] = readTo(i, file)
</r:code>
However, this is ambiguous. Instead, we could introduce a DSL-specific .i
or .loopCounter variable, e.g.
<r:code eval="false">
  for(i in lineSkip)
     ans[.loopCounter] = readTo(i, file)
</r:code>
However, this means this code is no longer <r/>
code and won't work.
(We could implement a version of <r:keyword>for</r:keyword> which 
implements this.)
</para>
<para>
A much better <r/> approach however  is
<r:function eval="false">
readSelectedLines =
function(lineSkip, file)
{
  sapply(lineSkip, readTo, file)
}
</r:function>
This is clearer and more brief.
</para>
<para>
We could also use
<r:function eval="false"><![CDATA[
function(lineSkip, file)
{
   Map(readTo, lineSkip, MoreArgs = list(file))
}
]]></r:function>

</para>


<para>
We can rewrite <r:func>readSelectedLines</r:func>
to use the compiled version of <r:func>readTo</r:func>
<r:function>
readSelectedLines =
function(lineSkip, file, .ee)
{
  f = function(i, file) .llvm(rr, i, file, .ee = .ee)
  sapply(lineSkip, f, file)
}
</r:function>
</para>
<para>
We can run  this in <r/> with
<r:code>
library(RCurl)
ff = CFILE("../NAMESPACE")
ee = ExecutionEngine(mod)
readSelectedLines(c(3, 10, 10), ff, ee)
</r:code>
</para>

<para>
This  is faster than calling the version of:
<r:test id="makeInputs">
targetFile = "sample.csv"
if(!file.exists(targetFile)) {
  cat("Creating", targetFile, "\n")
  cat(1:1e8, sep = "\n", file = targetFile)
}
N = 1e3
lineNums = sort(as.integer(sample(1e8, N)))
lineSkips = as.integer(diff(c(0L, lineNums)))
</r:test>
<r:test>
ff = CFILE(targetFile)
tm = system.time(readSelectedLines(lineSkips, ff))
tm
</r:test>
</para>


<para>
Unfortunately, there is still the overhead of an <r/>
function call for each line we want to read.
The body of <r:func>readSelectLines</r:func>
is very simple and can easily be recognized
as an <r:func>sapply</r:func> loop - <r:expr eval="false">sapply(lineSkip, readTo, file)</r:expr>.
We also know that the <r:func>readTo</r:func> function returns a
single string. Therefore we know that this function returns a
<r:character/> vector and we know its length is the same as 
the vector over which we are looping - <r:var>lineSkip</r:var>.
We also know that <r:var>lineSkip</r:var> is (or should be) an <r:integer/>
since <r:func>readTo</r:func> expects and <r:var>Int32Type</r:var>.
So to compile this, we need the array of integers in <r:var>lineSkip</r:var>
and also its length. 
Alternatively, we could pass the <r/> vector <r:var>lineSkip</r:var>
and have the compiled code call <c:func>INTEGER</c:func> and
<c:routine>Rf_length</c:routine> to obtain these.
We also need to turn the strings returned by <r:func>readTo</r:func>
into CHARSXP objects in R and also put them into a <r:character/>
vector. This involves <c:func>Rf_mkChar</c:func> and <c:func>SET_STRING_ELT</c:func>.
We also need to create this character vector to store the individual strings.
Again, we can have this be passed to the compiled routine,
or we can create the vector in the compiled code.
The former is not a good idea (due to having to create a contiguous array of char* elements).
We can do the latter with <c:func>Rf_allocVector</c:func>
knowing the integer value identifying the STRSXP type.
(We can find this with <omg:pkg>RCIndex</omg:pkg>. See getRDefines.r)
(Note also that the <c:func>NEW_CHARACTER</c:func> macro/routine is not available via <r:func>getNativeSymbolInfo</r:func>.)
We also need <c:func>Rf_protect</c:func> and <c:func>Rf_unprotect</c:func>.
</para>
<para>
Our compiled code should correspond to the following C code:
<c:code><![CDATA[
SEXP
readSelectedLines(SEXP r_lineSkip, FILE *file)
{
   int n = Rf_length(r_lineSkip);
   int *els = INTEGER(r_lineSkip);
   SEXP r_ans;

   r_ans = Rf_allocVector(n, 16);
   Rf_protect(r_ans);

   for(i = 0; i < n; i++) {
       int el;
       el = els[i];
       const char *tmp = readTo(el, file);
       SEXP r_str = Rf_mkChar(tmp);
       SET_VECTOR_ELT(r_ans, i, r_str);
   }   

   Rf_unprotect(1);

   return(r_ans);
}
]]></c:code>
</para>
<note>
<para>
These native routines in R are not available on Linux
via <r:func>getNativeSymbolInfo</r:func>.
They are on OS X (at least when R is compiled from source).
We will have to find a way to have the LLVM execution
engine locate these. We may be able to do this
with some linking facilities and libR.{so,dll,dylib}. Alternatively,
we can provide wrapper routines compiled into Rllvm or a run-time
library that act as proxies to the handful of routines we want.
</para>
</note>

<ignore>
<para>
Before we generate the code, let's describe the native routines.
<r:code eval="false">
declareFunction( list(Int32Type, SEXPType ), "Rf_length", mod) 
declareFunction( list(Int32PtrType, INTSXPType), "INTEGER", mod)

declareFunction( list(SEXPType, Int32Type, Int32Type), "Rf_allocVector", mod)

declareFunction( list(VoidType, SEXPType), "Rf_protect", mod)
declareFunction( list(VoidType, Int32Type), "Rf_unprotect", mod)

declareFunction( list(SEXPType, StringType), "Rf_mkChar", mod)

#XXX should be more specific SEXP types, i.e. STRSXPType, CHARSXPType
declareFunction( list(SEXPType, SEXPType, Int32Type, SEXPType), "SET_VECTOR_ELT", mod)
</r:code>
We need to use a different type than Int32Type if we have support for long vectors
at least for Rf_length, Rf_allocVector (first parameter), SET_VECTOR_ELT (second parameter).
</para>

<para>
Let's also register the addresses of the native routines we use with LLVM: 
<r:code>
syms = lapply(c("Rf_length", "INTEGER", "Rf_allocVector", 
                "Rf_protect", "Rf_unprotect", 
                "Rf_mkChar", "SET_VECTOR_ELT"),
              function(x) 
                getNativeSymbolInfo(x)$address)
llvmAddSymbol(.syms = syms)
</r:code>
</para>
</ignore>

<para>
At this point, we have the information we need to compile our routine.
<r:code>
readSelectedLines =
function(lineSkip, file)
{
  sapply(lineSkip, readTo, file)
}
readSelectedLines.c = compileFunction(readSelectedLines, STRSXPType, list(INTSXPType, FILEType), mod)
</r:code>

</para>

<para>
Of course, we could compile the function that takes these lines and
converts them to a data frame.  In that case, we might want to compile
<r:func>readSelectedLines</r:func> in a different way. Firstly, we may
chose not to store the strings in an <r/> character vector.  Instead,
we can use a regular char** that we allocate in ourselves in our
compiled version of the function.  Additionally, we might pre-allocate
the data frame and fill in each row as we read each line.  This is
loop fusion and cuts down on memory.  This is an example of how we
would write/generate code differently for different contexts.
</para>


</section>
<section id="timings" r:eval="false">
<title>Timing the Different Approaches</title>

<para>
Note that the order in which we do these computations may affect the results
as the operating system may cache files, etc.
</para>
<para>
The numbers below are for the most part on a freshly rebooted machine
with very few other applications running (i.e. no Web browser, mail reader, etc.)
</para>


<para>
<r:test>
ff = CFILE("sample1.csv")
.llvm(mod$Fgets, ff)
.llvm(mod$readTo, 1, ff) # 2nd line
.llvm(mod$readTo, 10, ff) # 12th line

.llvm(mod$readSelectedLines, as.integer(c(5, 7, 2, 19)), ff)
</r:test>

<r:test>
tm.1e3 = replicate(10, { ff = CFILE(targetFile); system.time(.llvm(mod$readSelectedLines, lineSkips, ff))})
<r:output><![CDATA[
            [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10]
user.self  2.683 2.665 2.696 2.710 2.663 2.677 2.704 2.671 2.665 2.710
sys.self   0.333 0.333 0.339 0.338 0.330 0.331 0.338 0.334 0.330 0.338
elapsed    3.017 2.999 3.035 3.048 2.994 3.008 3.042 3.005 2.995 3.047
]]></r:output>
</r:test>
The first invocation takes quite a while and there is a large
disparity between user and elapsed time. 
Is this LLVM or the operating system caching the file?
After that, we are about 2.8 &amp; 3.2 seconds for user and elapsed.
Now compare with the C code we wrote in <r:pkg>FastCSVSample</r:pkg>.
<r:test id="llvm">
library(FastCSVSample)
tmf.1e3 = replicate(10, system.time(.Call("R_csv_sample", targetFile, lineNums)))
<r:output><![CDATA[
            [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10]
user.self  2.534 2.508 2.513 2.548 2.505 2.502 2.530 2.535 2.507 2.519
sys.self   0.333 0.331 0.330 0.334 0.330 0.329 0.332 0.334 0.330 0.330
elapsed    2.867 2.839 2.844 2.881 2.836 2.831 2.862 2.869 2.837 2.848
]]></r:output>
</r:test>
(Note that 

<r:code>
print((rowMeans(tm.1e3)/rowMeans(tmf.1e3))[1:3], digits = 3)
<r:output><![CDATA[
user.self  sys.self   elapsed 
     1.12      1.03      1.11 
]]></r:output>
</r:code>
This is on a MacBook Pro running OS 10.7.5 with 8G of RAM, 2.66Ghz Intel Core i7. 
So we see the LLVM code is running about 11% or 12% slower than the C code
(compiled with the optimization level set to -O3, using gcc 4.2.1).
In other runs, we see this down at 7%.
</para>



<para>
In R, we can use <r:func>readSelectedLines</r:func>
and all we need to do is implement <r:func>readTo</r:func> efficiently.
<r:function id="rfuns"><![CDATA[
readTo = 
function(numLines, con)
 readLines(con, numLines)[numLines]

readSelectedLines =
function(lineSkip, file)
  sapply(lineSkip, readTo, file)
]]></r:function>

<r:test>
con = file("sample.csv", "r"); tmr.1e3 = system.time(readSelectedLines(lineSkips, con))
tmr.1e3
<r:output>
  <!-- With R compiled as -O3 -->
   user  system elapsed 
 63.697   0.961  64.681 
   user  system elapsed 
 64.036   0.947  65.021 
   user  system elapsed 
 61.177   0.932  62.117 
<!-- The following are for R compiled without any optimization flags. With -O3 -->
   user  system elapsed 
 92.827   0.865  93.696 
   user  system elapsed 
 91.538   0.890  92.434 
   user  system elapsed 
 89.456   0.880  90.338 
   user  system elapsed 
 90.595   0.921  91.521 
</r:output>
</r:test>
Curiously, these are getting faster across each run. Is this caching of the file system?
</para>
<para>
Now let's compare these with our LLVM-compiled code:
<r:code>
print((tmr.1e3/rowMeans(tmf.1e3))[1:3], digits = 3)
<r:output>
  <!-- with -O3 for R -->
user.self  sys.self   elapsed 
    24.28      2.81     21.78 
    <!-- with no optimization -->
user.self  sys.self   elapsed 
    38.21      3.27     33.55 
</r:output>
</r:code>
So we see that we gained a factor of 21.
This is for N = 1000.
</para>
<para>
Let's see what happens  with N = 1e5.
<r:test>
targetFile = "sample.csv"
N = 1e5
lineNums = sort(as.integer(sample(1e8, N)))
lineSkips = as.integer(diff(c(0L, lineNums)))
</r:test>

<r:test>
readTo = 
function(numLines, con)
 readLines(con, numLines)[numLines]

con = file(targetFile, "r"); tmr.1e5 = system.time(readSelectedLines(lineSkips, con))

 # System time for one call, but repeated 10 times. (Not time for 10 calls.)
tm.1e5 = replicate(10, { ff = CFILE(targetFile); system.time(.llvm(mod$readSelectedLines, lineSkips, ff))})
library(FastCSVSample)
tmf.1e5 = replicate(10, system.time(.Call("R_csv_sample", targetFile, lineNums)))

o = rbind("readLines" = tmr.1e5[3], "LLVM" = median(tm.1e5[3,]), "FastCSVSample" = median(tmf.1e5[3,]))
max(o)/o


res = structure(list("readLines" = tmr.1e5, "LLVM" = tm.1e5, "FastCSVSample" = tmf.1e5, 
                     results = cbind(time = o, speedup = max(o)/o)),
                   N = N, session = sessionInfo(), system = Sys.info(), when = Sys.time())
id = sprintf("sampleCSV.tm_%s_%s_%s", N, Sys.info()["nodename"], Sys.info()["sysname"])
assign(id, res, globalenv())
save( list = id, file = sprintf("%s.rda", id))
<r:output><![CDATA[
OS X  
               elapsed
readLines      1.00000
LLVM          21.09119
FastCSVSample 22.97533

R code
   user  system elapsed 
 68.008   0.882  68.926 

LLVM  apply(tm.1e5, 1, median)[1:3]
 user.self   sys.self    elapsed 
    2.8465     0.4165     3.2680 

apply(tmf.1e5, 1, median)[1:3]
user.self  sys.self   elapsed 
   2.5865    0.4145    3.0000 


LLVM - now segfaulting (since compiling R with -O3). Fixed now because of re-allocating variables within loop
R code
   user  system elapsed 
108.074   1.007 109.086 


FastCSVSample
user.self  sys.self   elapsed 
    2.873     0.384     3.258 
]]></r:output>
</r:test>
The results don't change much. 
<wrong reason="with -O3">The <r/> version goes up to between 102 and  108.</wrong>
The LLVM-based computations is about 3.16.
Why do the numbers stay approximately the same?
When we sample the line numbers, they range from
the start to the end of the file. This means
that even with more samples, we are still reading approximately
the same number of lines from the file in total.
That is, the largest value of the line number doesn't
change significantly as we take more sample lines.
</para>

</section>
<section eval="false">
<title>Timing <r:func>readTo</r:func></title>


<para>
Let's test how fast the <r:func>readTo</r:func> functions are.
<r:test>
tm.readTo.1e6 = replicate(10, system.time(replicate(10, { ff = CFILE(targetFile); system.time(.llvm(mod$readTo, 1e6L, ff)); close(ff)})))
tmr.readTo.1e6 = replicate(10, system.time(replicate(10, { ff = file(targetFile, "r"); system.time(readTo(1e6L, ff)); close(ff)})))
print((rowMeans(tmr.readTo.1e6)/rowMeans(tm.readTo.1e6))[1:3], digits = 4)
<r:output><![CDATA[
user.self  sys.self   elapsed 
    3.173     1.970     3.136 
]]></r:output>
</r:test>
So the LLVM-version is 3 times faster than the R version.
Again, the R version uses C code so should be equivalent to the LLVM version.
However, it uses <r:func>readLines</r:func> which returns the entire vector of lines
and then we have to subset it. There is a large overhead of  memory  involved in this.
The R code is also more general, being able to read from arbitrary connections.
The LLVM code we generated reads only from a <c:type>FILE</c:type>.
However, we could just as easily have generated  code to read from
an arbitrary file  descriptor or any form of input. We have to generate
that code, but we can do it using the native routines.
</para>

</section>

<section>
<title></title>
<para>
Note that since we are talking about large files,
a regular integer type may not be capable of holding
some of the  line numbers we may want to sample.
We can easily compile the code to use a larger integer
with a larger range of values for <r:func>readTo</r:func>. We can use an
unsigned integer or a long or an Int64.

</para>
</section>
</article>
