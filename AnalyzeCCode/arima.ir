; ModuleID = '/Users/duncan/R-devel/build/../src/library/stats/src/arima.c'
source_filename = "/Users/duncan/R-devel/build/../src/library/stats/src/arima.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct.SEXPREC = type opaque

@.str = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"V\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"Pn\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"stats\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"invalid argument type\00", align 1
@R_NilValue = external local_unnamed_addr global %struct.SEXPREC*, align 8
@.str.9 = private unnamed_addr constant [7 x i8] c"values\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"resid\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"states\00", align 1
@R_NamesSymbol = external local_unnamed_addr global %struct.SEXPREC*, align 8
@R_NaReal = external local_unnamed_addr global double, align 8
@.str.12 = private unnamed_addr constant [4 x i8] c"mod\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"smooth\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"var\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"pred\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"phi\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"theta\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Delta\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"solve.default\00", align 1
@R_BaseEnv = external local_unnamed_addr global %struct.SEXPREC*, align 8
@.str.20 = private unnamed_addr constant [29 x i8] c"maximum supported lag is 350\00", align 1
@.str.21 = private unnamed_addr constant [38 x i8] c"can only transform 100 pars in arima0\00", align 1

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @KalmanLike(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %6 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %3) #7
  %7 = tail call %struct.SEXPREC* @Rf_duplicate(%struct.SEXPREC* %1) #7
  %8 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %7) #7
  %9 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #7
  %10 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  %11 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #7
  %12 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #7
  %13 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #7
  %14 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #7
  %15 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)) #7
  %16 = tail call i32 @TYPEOF(%struct.SEXPREC* %0) #7
  %17 = icmp eq i32 %16, 14
  br i1 %17, label %18, label %36

; <label>:18:                                     ; preds = %5
  %19 = tail call i32 @TYPEOF(%struct.SEXPREC* %9) #7
  %20 = icmp eq i32 %19, 14
  br i1 %20, label %21, label %36

; <label>:21:                                     ; preds = %18
  %22 = tail call i32 @TYPEOF(%struct.SEXPREC* %10) #7
  %23 = icmp eq i32 %22, 14
  br i1 %23, label %24, label %36

; <label>:24:                                     ; preds = %21
  %25 = tail call i32 @TYPEOF(%struct.SEXPREC* %11) #7
  %26 = icmp eq i32 %25, 14
  br i1 %26, label %27, label %36

; <label>:27:                                     ; preds = %24
  %28 = tail call i32 @TYPEOF(%struct.SEXPREC* %15) #7
  %29 = icmp eq i32 %28, 14
  br i1 %29, label %30, label %36

; <label>:30:                                     ; preds = %27
  %31 = tail call i32 @TYPEOF(%struct.SEXPREC* %12) #7
  %32 = icmp eq i32 %31, 14
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %30
  %34 = tail call i32 @TYPEOF(%struct.SEXPREC* %13) #7
  %35 = icmp eq i32 %34, 14
  br i1 %35, label %38, label %36

; <label>:36:                                     ; preds = %33, %30, %27, %24, %21, %18, %5
  %37 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %37) #8
  unreachable

; <label>:38:                                     ; preds = %33
  %39 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %40 = tail call i32 @LENGTH(%struct.SEXPREC* %10) #7
  %41 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %42 = tail call double* @REAL(%struct.SEXPREC* %9) #7
  %43 = tail call double* @REAL(%struct.SEXPREC* %12) #7
  %44 = tail call double* @REAL(%struct.SEXPREC* %13) #7
  %45 = tail call double* @REAL(%struct.SEXPREC* %11) #7
  %46 = tail call double* @REAL(%struct.SEXPREC* %10) #7
  %47 = bitcast double* %46 to i8*
  %48 = tail call double* @REAL(%struct.SEXPREC* %15) #7
  %49 = tail call double @Rf_asReal(%struct.SEXPREC* %14) #7
  %50 = sext i32 %40 to i64
  %51 = tail call i8* @R_alloc(i64 %50, i32 8) #7
  %52 = bitcast i8* %51 to double*
  %53 = tail call i8* @R_alloc(i64 %50, i32 8) #7
  %54 = bitcast i8* %53 to double*
  %55 = mul i32 %40, %40
  %56 = zext i32 %55 to i64
  %57 = tail call i8* @R_alloc(i64 %56, i32 8) #7
  %58 = bitcast i8* %57 to double*
  %59 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NilValue, align 8, !tbaa !3
  %60 = icmp ne i32 %6, 0
  br i1 %60, label %61, label %76

; <label>:61:                                     ; preds = %38
  %62 = tail call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 3) #7
  %63 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %62) #7
  %64 = sext i32 %39 to i64
  %65 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %64) #7
  %66 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %62, i64 1, %struct.SEXPREC* %65) #7
  %67 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %39, i32 %40) #7
  %68 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %62, i64 2, %struct.SEXPREC* %67) #7
  %69 = tail call %struct.SEXPREC* @Rf_allocVector(i32 16, i64 3) #7
  %70 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %69) #7
  %71 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %70, i64 0, %struct.SEXPREC* %71) #7
  %72 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %70, i64 1, %struct.SEXPREC* %72) #7
  %73 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %70, i64 2, %struct.SEXPREC* %73) #7
  %74 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NamesSymbol, align 8, !tbaa !3
  %75 = tail call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %62, %struct.SEXPREC* %74, %struct.SEXPREC* %70) #7
  tail call void @Rf_unprotect(i32 1) #7
  br label %76

; <label>:76:                                     ; preds = %61, %38
  %77 = phi %struct.SEXPREC* [ %65, %61 ], [ %59, %38 ]
  %78 = phi %struct.SEXPREC* [ %67, %61 ], [ %59, %38 ]
  %79 = phi %struct.SEXPREC* [ %62, %61 ], [ %59, %38 ]
  %80 = icmp sgt i32 %39, 0
  br i1 %80, label %81, label %235

; <label>:81:                                     ; preds = %76
  %82 = icmp sgt i32 %40, 0
  %83 = icmp eq i32 %55, 0
  %84 = sext i32 %39 to i64
  %85 = zext i32 %40 to i64
  %86 = zext i32 %40 to i64
  %87 = zext i32 %40 to i64
  %88 = zext i32 %40 to i64
  %89 = zext i32 %40 to i64
  %90 = zext i32 %40 to i64
  %91 = zext i32 %40 to i64
  %92 = zext i32 %40 to i64
  %93 = zext i32 %40 to i64
  %94 = zext i32 %40 to i64
  %95 = zext i32 %40 to i64
  %96 = zext i32 %39 to i64
  %97 = getelementptr double, double* %46, i64 %95
  %98 = bitcast double* %97 to i8*
  %99 = shl nuw nsw i64 %95, 3
  %100 = getelementptr i8, i8* %51, i64 %99
  %101 = getelementptr i8, i8* %53, i64 %99
  %102 = getelementptr double, double* %45, i64 %56
  %103 = getelementptr double, double* %48, i64 %56
  %104 = getelementptr double, double* %46, i64 %95
  %105 = bitcast double* %104 to i8*
  %106 = shl nuw nsw i64 %95, 3
  %107 = getelementptr i8, i8* %51, i64 %106
  %108 = add nsw i64 %85, -1
  %109 = and i64 %85, 4294967292
  %110 = add nsw i64 %109, -4
  %111 = lshr exact i64 %110, 2
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %56, 4294967292
  %114 = add nsw i64 %113, -4
  %115 = lshr exact i64 %114, 2
  %116 = add nuw nsw i64 %115, 1
  %117 = and i64 %85, 4294967294
  %118 = add nsw i64 %117, -2
  %119 = lshr exact i64 %118, 1
  %120 = add nuw i64 %119, 1
  %121 = and i64 %85, 1
  %122 = icmp eq i64 %108, 0
  %123 = sub nsw i64 %85, %121
  %124 = icmp eq i64 %121, 0
  %125 = xor i1 %82, true
  %126 = and i64 %85, 1
  %127 = icmp eq i64 %108, 0
  %128 = sub nsw i64 %85, %126
  %129 = icmp eq i64 %126, 0
  %130 = and i64 %85, 1
  %131 = icmp eq i64 %108, 0
  %132 = sub nsw i64 %85, %130
  %133 = icmp eq i64 %130, 0
  %134 = icmp ult i32 %40, 4
  %135 = icmp ugt i8* %107, %47
  %136 = icmp ult i8* %51, %105
  %137 = and i1 %135, %136
  %138 = and i64 %95, 4294967292
  %139 = and i64 %112, 3
  %140 = icmp ult i64 %110, 12
  %141 = sub nsw i64 %112, %139
  %142 = icmp eq i64 %139, 0
  %143 = icmp eq i64 %138, %95
  %144 = icmp ult i32 %55, 4
  %145 = icmp ult double* %45, %103
  %146 = icmp ult double* %48, %102
  %147 = and i1 %145, %146
  %148 = and i64 %56, 4294967292
  %149 = and i64 %116, 3
  %150 = icmp ult i64 %114, 12
  %151 = sub nsw i64 %116, %149
  %152 = icmp eq i64 %149, 0
  %153 = icmp eq i64 %148, %56
  %154 = and i64 %85, 3
  %155 = icmp ult i64 %108, 3
  %156 = sub nsw i64 %85, %154
  %157 = icmp eq i64 %154, 0
  %158 = and i64 %85, 1
  %159 = icmp eq i64 %108, 0
  %160 = sub nsw i64 %85, %158
  %161 = icmp eq i64 %158, 0
  %162 = icmp eq i32 %40, 1
  %163 = icmp ugt i8* %100, %47
  %164 = icmp ult i8* %51, %98
  %165 = and i1 %163, %164
  %166 = icmp ugt i8* %101, %47
  %167 = icmp ult i8* %53, %98
  %168 = and i1 %166, %167
  %169 = or i1 %165, %168
  %170 = and i64 %95, 4294967294
  %171 = and i64 %120, 1
  %172 = icmp eq i64 %118, 0
  %173 = sub i64 %120, %171
  %174 = icmp eq i64 %171, 0
  %175 = icmp eq i64 %170, %95
  %176 = and i64 %85, 1
  %177 = icmp eq i64 %176, 0
  %178 = sub nsw i64 0, %85
  %179 = and i64 %85, 3
  %180 = icmp ult i64 %108, 3
  %181 = sub nsw i64 %85, %179
  %182 = icmp eq i64 %179, 0
  br label %183

; <label>:183:                                    ; preds = %957, %81
  %184 = phi i64 [ 0, %81 ], [ %961, %957 ]
  %185 = phi i32 [ 0, %81 ], [ %958, %957 ]
  %186 = phi double [ 0.000000e+00, %81 ], [ %959, %957 ]
  %187 = phi double [ 0.000000e+00, %81 ], [ %960, %957 ]
  br i1 %82, label %188, label %247

; <label>:188:                                    ; preds = %183, %229
  %189 = phi i64 [ %233, %229 ], [ 0, %183 ]
  br i1 %122, label %214, label %190

; <label>:190:                                    ; preds = %188, %190
  %191 = phi i64 [ %211, %190 ], [ 0, %188 ]
  %192 = phi double [ %210, %190 ], [ 0.000000e+00, %188 ]
  %193 = phi i64 [ %212, %190 ], [ %123, %188 ]
  %194 = mul nsw i64 %191, %50
  %195 = add nsw i64 %194, %189
  %196 = getelementptr inbounds double, double* %43, i64 %195
  %197 = load double, double* %196, align 8, !tbaa !7
  %198 = getelementptr inbounds double, double* %46, i64 %191
  %199 = load double, double* %198, align 8, !tbaa !7
  %200 = fmul double %197, %199
  %201 = fadd double %192, %200
  %202 = or i64 %191, 1
  %203 = mul nsw i64 %202, %50
  %204 = add nsw i64 %203, %189
  %205 = getelementptr inbounds double, double* %43, i64 %204
  %206 = load double, double* %205, align 8, !tbaa !7
  %207 = getelementptr inbounds double, double* %46, i64 %202
  %208 = load double, double* %207, align 8, !tbaa !7
  %209 = fmul double %206, %208
  %210 = fadd double %201, %209
  %211 = add nuw nsw i64 %191, 2
  %212 = add i64 %193, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %190

; <label>:214:                                    ; preds = %190, %188
  %215 = phi double [ undef, %188 ], [ %210, %190 ]
  %216 = phi i64 [ undef, %188 ], [ %211, %190 ]
  %217 = phi i64 [ 0, %188 ], [ %211, %190 ]
  %218 = phi double [ 0.000000e+00, %188 ], [ %210, %190 ]
  br i1 %124, label %229, label %219

; <label>:219:                                    ; preds = %214
  %220 = add nuw nsw i64 %217, 1
  %221 = mul nsw i64 %217, %50
  %222 = add nsw i64 %221, %189
  %223 = getelementptr inbounds double, double* %43, i64 %222
  %224 = load double, double* %223, align 8, !tbaa !7
  %225 = getelementptr inbounds double, double* %46, i64 %217
  %226 = load double, double* %225, align 8, !tbaa !7
  %227 = fmul double %224, %226
  %228 = fadd double %218, %227
  br label %229

; <label>:229:                                    ; preds = %214, %219
  %230 = phi double [ %215, %214 ], [ %228, %219 ]
  %231 = phi i64 [ %216, %214 ], [ %220, %219 ]
  %232 = getelementptr inbounds double, double* %52, i64 %189
  store double %230, double* %232, align 8, !tbaa !7
  %233 = add nuw nsw i64 %189, 1
  %234 = icmp eq i64 %233, %231
  br i1 %234, label %247, label %188

; <label>:235:                                    ; preds = %957, %76
  %236 = phi double [ 0.000000e+00, %76 ], [ %960, %957 ]
  %237 = phi double [ 0.000000e+00, %76 ], [ %959, %957 ]
  %238 = phi i32 [ 0, %76 ], [ %958, %957 ]
  %239 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 2) #7
  %240 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %239) #7
  %241 = sitofp i32 %238 to double
  %242 = fdiv double %237, %241
  %243 = tail call double* @REAL(%struct.SEXPREC* %240) #7
  store double %242, double* %243, align 8, !tbaa !7
  %244 = fdiv double %236, %241
  %245 = tail call double* @REAL(%struct.SEXPREC* %240) #7
  %246 = getelementptr inbounds double, double* %245, i64 1
  store double %244, double* %246, align 8, !tbaa !7
  br i1 %60, label %963, label %971

; <label>:247:                                    ; preds = %229, %183
  %248 = tail call i32 @Rf_asInteger(%struct.SEXPREC* %2) #7
  %249 = sext i32 %248 to i64
  %250 = icmp sle i64 %184, %249
  %251 = or i1 %250, %125
  br i1 %251, label %363, label %252

; <label>:252:                                    ; preds = %247, %254
  %253 = phi i64 [ %255, %254 ], [ 0, %247 ]
  br label %257

; <label>:254:                                    ; preds = %274
  %255 = add nuw nsw i64 %253, 1
  %256 = icmp eq i64 %255, %87
  br i1 %256, label %306, label %252

; <label>:257:                                    ; preds = %274, %252
  %258 = phi i64 [ 0, %252 ], [ %278, %274 ]
  %259 = mul nsw i64 %258, %50
  br i1 %127, label %260, label %280

; <label>:260:                                    ; preds = %280, %257
  %261 = phi double [ undef, %257 ], [ %302, %280 ]
  %262 = phi i64 [ 0, %257 ], [ %303, %280 ]
  %263 = phi double [ 0.000000e+00, %257 ], [ %302, %280 ]
  br i1 %129, label %274, label %264

; <label>:264:                                    ; preds = %260
  %265 = mul nsw i64 %262, %50
  %266 = add nsw i64 %265, %253
  %267 = getelementptr inbounds double, double* %43, i64 %266
  %268 = load double, double* %267, align 8, !tbaa !7
  %269 = add nsw i64 %262, %259
  %270 = getelementptr inbounds double, double* %45, i64 %269
  %271 = load double, double* %270, align 8, !tbaa !7
  %272 = fmul double %268, %271
  %273 = fadd double %263, %272
  br label %274

; <label>:274:                                    ; preds = %260, %264
  %275 = phi double [ %261, %260 ], [ %273, %264 ]
  %276 = add nsw i64 %259, %253
  %277 = getelementptr inbounds double, double* %58, i64 %276
  store double %275, double* %277, align 8, !tbaa !7
  %278 = add nuw nsw i64 %258, 1
  %279 = icmp eq i64 %278, %86
  br i1 %279, label %254, label %257

; <label>:280:                                    ; preds = %257, %280
  %281 = phi i64 [ %303, %280 ], [ 0, %257 ]
  %282 = phi double [ %302, %280 ], [ 0.000000e+00, %257 ]
  %283 = phi i64 [ %304, %280 ], [ %128, %257 ]
  %284 = mul nsw i64 %281, %50
  %285 = add nsw i64 %284, %253
  %286 = getelementptr inbounds double, double* %43, i64 %285
  %287 = load double, double* %286, align 8, !tbaa !7
  %288 = add nsw i64 %281, %259
  %289 = getelementptr inbounds double, double* %45, i64 %288
  %290 = load double, double* %289, align 8, !tbaa !7
  %291 = fmul double %287, %290
  %292 = fadd double %282, %291
  %293 = or i64 %281, 1
  %294 = mul nsw i64 %293, %50
  %295 = add nsw i64 %294, %253
  %296 = getelementptr inbounds double, double* %43, i64 %295
  %297 = load double, double* %296, align 8, !tbaa !7
  %298 = add nsw i64 %293, %259
  %299 = getelementptr inbounds double, double* %45, i64 %298
  %300 = load double, double* %299, align 8, !tbaa !7
  %301 = fmul double %297, %300
  %302 = fadd double %292, %301
  %303 = add nuw nsw i64 %281, 2
  %304 = add i64 %283, -2
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %260, label %280

; <label>:306:                                    ; preds = %254
  br i1 %82, label %307, label %363

; <label>:307:                                    ; preds = %306, %309
  %308 = phi i64 [ %310, %309 ], [ 0, %306 ]
  br label %312

; <label>:309:                                    ; preds = %332
  %310 = add nuw nsw i64 %308, 1
  %311 = icmp eq i64 %310, %89
  br i1 %311, label %363, label %307

; <label>:312:                                    ; preds = %332, %307
  %313 = phi i64 [ 0, %307 ], [ %335, %332 ]
  %314 = mul nsw i64 %313, %50
  %315 = add nsw i64 %314, %308
  %316 = getelementptr inbounds double, double* %44, i64 %315
  %317 = load double, double* %316, align 8, !tbaa !7
  br i1 %131, label %318, label %337

; <label>:318:                                    ; preds = %337, %312
  %319 = phi double [ undef, %312 ], [ %359, %337 ]
  %320 = phi i64 [ 0, %312 ], [ %360, %337 ]
  %321 = phi double [ %317, %312 ], [ %359, %337 ]
  br i1 %133, label %332, label %322

; <label>:322:                                    ; preds = %318
  %323 = mul nsw i64 %320, %50
  %324 = add nsw i64 %323, %308
  %325 = getelementptr inbounds double, double* %58, i64 %324
  %326 = load double, double* %325, align 8, !tbaa !7
  %327 = add nsw i64 %323, %313
  %328 = getelementptr inbounds double, double* %43, i64 %327
  %329 = load double, double* %328, align 8, !tbaa !7
  %330 = fmul double %326, %329
  %331 = fadd double %321, %330
  br label %332

; <label>:332:                                    ; preds = %318, %322
  %333 = phi double [ %319, %318 ], [ %331, %322 ]
  %334 = getelementptr inbounds double, double* %48, i64 %315
  store double %333, double* %334, align 8, !tbaa !7
  %335 = add nuw nsw i64 %313, 1
  %336 = icmp eq i64 %335, %88
  br i1 %336, label %309, label %312

; <label>:337:                                    ; preds = %312, %337
  %338 = phi i64 [ %360, %337 ], [ 0, %312 ]
  %339 = phi double [ %359, %337 ], [ %317, %312 ]
  %340 = phi i64 [ %361, %337 ], [ %132, %312 ]
  %341 = mul nsw i64 %338, %50
  %342 = add nsw i64 %341, %308
  %343 = getelementptr inbounds double, double* %58, i64 %342
  %344 = load double, double* %343, align 8, !tbaa !7
  %345 = add nsw i64 %341, %313
  %346 = getelementptr inbounds double, double* %43, i64 %345
  %347 = load double, double* %346, align 8, !tbaa !7
  %348 = fmul double %344, %347
  %349 = fadd double %339, %348
  %350 = or i64 %338, 1
  %351 = mul nsw i64 %350, %50
  %352 = add nsw i64 %351, %308
  %353 = getelementptr inbounds double, double* %58, i64 %352
  %354 = load double, double* %353, align 8, !tbaa !7
  %355 = add nsw i64 %351, %313
  %356 = getelementptr inbounds double, double* %43, i64 %355
  %357 = load double, double* %356, align 8, !tbaa !7
  %358 = fmul double %354, %357
  %359 = fadd double %349, %358
  %360 = add nuw nsw i64 %338, 2
  %361 = add i64 %340, -2
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %318, label %337

; <label>:363:                                    ; preds = %309, %247, %306
  %364 = getelementptr inbounds double, double* %41, i64 %184
  %365 = load double, double* %364, align 8, !tbaa !7
  %366 = fcmp ord double %365, 0.000000e+00
  br i1 %366, label %367, label %601

; <label>:367:                                    ; preds = %363
  %368 = add nsw i32 %185, 1
  br i1 %60, label %369, label %372

; <label>:369:                                    ; preds = %367
  %370 = tail call double* @REAL(%struct.SEXPREC* %77) #7
  %371 = load double, double* %364, align 8, !tbaa !7
  br label %372

; <label>:372:                                    ; preds = %369, %367
  %373 = phi double [ %371, %369 ], [ %365, %367 ]
  %374 = phi double* [ %370, %369 ], [ null, %367 ]
  br i1 %82, label %375, label %478

; <label>:375:                                    ; preds = %372
  br i1 %155, label %376, label %444

; <label>:376:                                    ; preds = %444, %375
  %377 = phi double [ undef, %375 ], [ %474, %444 ]
  %378 = phi i64 [ 0, %375 ], [ %475, %444 ]
  %379 = phi double [ %373, %375 ], [ %474, %444 ]
  br i1 %157, label %393, label %380

; <label>:380:                                    ; preds = %376, %380
  %381 = phi i64 [ %390, %380 ], [ %378, %376 ]
  %382 = phi double [ %389, %380 ], [ %379, %376 ]
  %383 = phi i64 [ %391, %380 ], [ %154, %376 ]
  %384 = getelementptr inbounds double, double* %42, i64 %381
  %385 = load double, double* %384, align 8, !tbaa !7
  %386 = getelementptr inbounds double, double* %52, i64 %381
  %387 = load double, double* %386, align 8, !tbaa !7
  %388 = fmul double %385, %387
  %389 = fsub double %382, %388
  %390 = add nuw nsw i64 %381, 1
  %391 = add i64 %383, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %380, !llvm.loop !9

; <label>:393:                                    ; preds = %380, %376
  %394 = phi double [ %377, %376 ], [ %389, %380 ]
  br i1 %82, label %395, label %478

; <label>:395:                                    ; preds = %393, %435
  %396 = phi i64 [ %442, %435 ], [ 0, %393 ]
  %397 = phi double [ %441, %435 ], [ %49, %393 ]
  br i1 %159, label %422, label %398

; <label>:398:                                    ; preds = %395, %398
  %399 = phi i64 [ %419, %398 ], [ 0, %395 ]
  %400 = phi double [ %418, %398 ], [ 0.000000e+00, %395 ]
  %401 = phi i64 [ %420, %398 ], [ %160, %395 ]
  %402 = mul nsw i64 %399, %50
  %403 = add nsw i64 %402, %396
  %404 = getelementptr inbounds double, double* %48, i64 %403
  %405 = load double, double* %404, align 8, !tbaa !7
  %406 = getelementptr inbounds double, double* %42, i64 %399
  %407 = load double, double* %406, align 8, !tbaa !7
  %408 = fmul double %405, %407
  %409 = fadd double %400, %408
  %410 = or i64 %399, 1
  %411 = mul nsw i64 %410, %50
  %412 = add nsw i64 %411, %396
  %413 = getelementptr inbounds double, double* %48, i64 %412
  %414 = load double, double* %413, align 8, !tbaa !7
  %415 = getelementptr inbounds double, double* %42, i64 %410
  %416 = load double, double* %415, align 8, !tbaa !7
  %417 = fmul double %414, %416
  %418 = fadd double %409, %417
  %419 = add nuw nsw i64 %399, 2
  %420 = add i64 %401, -2
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %398

; <label>:422:                                    ; preds = %398, %395
  %423 = phi double [ undef, %395 ], [ %418, %398 ]
  %424 = phi i64 [ 0, %395 ], [ %419, %398 ]
  %425 = phi double [ 0.000000e+00, %395 ], [ %418, %398 ]
  br i1 %161, label %435, label %426

; <label>:426:                                    ; preds = %422
  %427 = mul nsw i64 %424, %50
  %428 = add nsw i64 %427, %396
  %429 = getelementptr inbounds double, double* %48, i64 %428
  %430 = load double, double* %429, align 8, !tbaa !7
  %431 = getelementptr inbounds double, double* %42, i64 %424
  %432 = load double, double* %431, align 8, !tbaa !7
  %433 = fmul double %430, %432
  %434 = fadd double %425, %433
  br label %435

; <label>:435:                                    ; preds = %422, %426
  %436 = phi double [ %423, %422 ], [ %434, %426 ]
  %437 = getelementptr inbounds double, double* %54, i64 %396
  store double %436, double* %437, align 8, !tbaa !7
  %438 = getelementptr inbounds double, double* %42, i64 %396
  %439 = load double, double* %438, align 8, !tbaa !7
  %440 = fmul double %436, %439
  %441 = fadd double %397, %440
  %442 = add nuw nsw i64 %396, 1
  %443 = icmp eq i64 %442, %91
  br i1 %443, label %478, label %395

; <label>:444:                                    ; preds = %375, %444
  %445 = phi i64 [ %475, %444 ], [ 0, %375 ]
  %446 = phi double [ %474, %444 ], [ %373, %375 ]
  %447 = phi i64 [ %476, %444 ], [ %156, %375 ]
  %448 = getelementptr inbounds double, double* %42, i64 %445
  %449 = load double, double* %448, align 8, !tbaa !7
  %450 = getelementptr inbounds double, double* %52, i64 %445
  %451 = load double, double* %450, align 8, !tbaa !7
  %452 = fmul double %449, %451
  %453 = fsub double %446, %452
  %454 = or i64 %445, 1
  %455 = getelementptr inbounds double, double* %42, i64 %454
  %456 = load double, double* %455, align 8, !tbaa !7
  %457 = getelementptr inbounds double, double* %52, i64 %454
  %458 = load double, double* %457, align 8, !tbaa !7
  %459 = fmul double %456, %458
  %460 = fsub double %453, %459
  %461 = or i64 %445, 2
  %462 = getelementptr inbounds double, double* %42, i64 %461
  %463 = load double, double* %462, align 8, !tbaa !7
  %464 = getelementptr inbounds double, double* %52, i64 %461
  %465 = load double, double* %464, align 8, !tbaa !7
  %466 = fmul double %463, %465
  %467 = fsub double %460, %466
  %468 = or i64 %445, 3
  %469 = getelementptr inbounds double, double* %42, i64 %468
  %470 = load double, double* %469, align 8, !tbaa !7
  %471 = getelementptr inbounds double, double* %52, i64 %468
  %472 = load double, double* %471, align 8, !tbaa !7
  %473 = fmul double %470, %472
  %474 = fsub double %467, %473
  %475 = add nuw nsw i64 %445, 4
  %476 = add i64 %447, -4
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %376, label %444

; <label>:478:                                    ; preds = %435, %372, %393
  %479 = phi double [ %394, %393 ], [ %373, %372 ], [ %394, %435 ]
  %480 = phi double [ %49, %393 ], [ %49, %372 ], [ %441, %435 ]
  %481 = fmul double %479, %479
  %482 = fdiv double %481, %480
  %483 = fadd double %186, %482
  br i1 %60, label %484, label %488

; <label>:484:                                    ; preds = %478
  %485 = tail call double @llvm.sqrt.f64(double %480)
  %486 = fdiv double %479, %485
  %487 = getelementptr inbounds double, double* %374, i64 %184
  store double %486, double* %487, align 8, !tbaa !7
  br label %488

; <label>:488:                                    ; preds = %484, %478
  %489 = tail call double @llvm.log.f64(double %480)
  %490 = fadd double %187, %489
  br i1 %82, label %491, label %898

; <label>:491:                                    ; preds = %488
  %492 = or i1 %162, %169
  br i1 %492, label %493, label %509

; <label>:493:                                    ; preds = %491, %557
  %494 = phi i64 [ 0, %491 ], [ %170, %557 ]
  %495 = xor i64 %494, -1
  br i1 %177, label %506, label %496

; <label>:496:                                    ; preds = %493
  %497 = getelementptr inbounds double, double* %52, i64 %494
  %498 = load double, double* %497, align 8, !tbaa !7
  %499 = getelementptr inbounds double, double* %54, i64 %494
  %500 = load double, double* %499, align 8, !tbaa !7
  %501 = fmul double %479, %500
  %502 = fdiv double %501, %480
  %503 = fadd double %498, %502
  %504 = getelementptr inbounds double, double* %46, i64 %494
  store double %503, double* %504, align 8, !tbaa !7
  %505 = or i64 %494, 1
  br label %506

; <label>:506:                                    ; preds = %496, %493
  %507 = phi i64 [ %505, %496 ], [ %494, %493 ]
  %508 = icmp eq i64 %495, %178
  br i1 %508, label %558, label %580

; <label>:509:                                    ; preds = %491
  %510 = insertelement <2 x double> undef, double %479, i32 0
  %511 = shufflevector <2 x double> %510, <2 x double> undef, <2 x i32> zeroinitializer
  %512 = insertelement <2 x double> undef, double %480, i32 0
  %513 = shufflevector <2 x double> %512, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %172, label %543, label %514

; <label>:514:                                    ; preds = %509, %514
  %515 = phi i64 [ %540, %514 ], [ 0, %509 ]
  %516 = phi i64 [ %541, %514 ], [ %173, %509 ]
  %517 = getelementptr inbounds double, double* %52, i64 %515
  %518 = bitcast double* %517 to <2 x double>*
  %519 = load <2 x double>, <2 x double>* %518, align 8, !tbaa !7, !alias.scope !11
  %520 = getelementptr inbounds double, double* %54, i64 %515
  %521 = bitcast double* %520 to <2 x double>*
  %522 = load <2 x double>, <2 x double>* %521, align 8, !tbaa !7, !alias.scope !14
  %523 = fmul <2 x double> %511, %522
  %524 = fdiv <2 x double> %523, %513
  %525 = fadd <2 x double> %519, %524
  %526 = getelementptr inbounds double, double* %46, i64 %515
  %527 = bitcast double* %526 to <2 x double>*
  store <2 x double> %525, <2 x double>* %527, align 8, !tbaa !7, !alias.scope !16, !noalias !18
  %528 = or i64 %515, 2
  %529 = getelementptr inbounds double, double* %52, i64 %528
  %530 = bitcast double* %529 to <2 x double>*
  %531 = load <2 x double>, <2 x double>* %530, align 8, !tbaa !7, !alias.scope !11
  %532 = getelementptr inbounds double, double* %54, i64 %528
  %533 = bitcast double* %532 to <2 x double>*
  %534 = load <2 x double>, <2 x double>* %533, align 8, !tbaa !7, !alias.scope !14
  %535 = fmul <2 x double> %511, %534
  %536 = fdiv <2 x double> %535, %513
  %537 = fadd <2 x double> %531, %536
  %538 = getelementptr inbounds double, double* %46, i64 %528
  %539 = bitcast double* %538 to <2 x double>*
  store <2 x double> %537, <2 x double>* %539, align 8, !tbaa !7, !alias.scope !16, !noalias !18
  %540 = add i64 %515, 4
  %541 = add i64 %516, -2
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %543, label %514, !llvm.loop !19

; <label>:543:                                    ; preds = %514, %509
  %544 = phi i64 [ 0, %509 ], [ %540, %514 ]
  br i1 %174, label %557, label %545

; <label>:545:                                    ; preds = %543
  %546 = getelementptr inbounds double, double* %52, i64 %544
  %547 = bitcast double* %546 to <2 x double>*
  %548 = load <2 x double>, <2 x double>* %547, align 8, !tbaa !7, !alias.scope !11
  %549 = getelementptr inbounds double, double* %54, i64 %544
  %550 = bitcast double* %549 to <2 x double>*
  %551 = load <2 x double>, <2 x double>* %550, align 8, !tbaa !7, !alias.scope !14
  %552 = fmul <2 x double> %511, %551
  %553 = fdiv <2 x double> %552, %513
  %554 = fadd <2 x double> %548, %553
  %555 = getelementptr inbounds double, double* %46, i64 %544
  %556 = bitcast double* %555 to <2 x double>*
  store <2 x double> %554, <2 x double>* %556, align 8, !tbaa !7, !alias.scope !16, !noalias !18
  br label %557

; <label>:557:                                    ; preds = %543, %545
  br i1 %175, label %558, label %493

; <label>:558:                                    ; preds = %506, %580, %557
  br i1 %82, label %559, label %898

; <label>:559:                                    ; preds = %558, %577
  %560 = phi i64 [ %578, %577 ], [ 0, %558 ]
  %561 = getelementptr inbounds double, double* %54, i64 %560
  br label %562

; <label>:562:                                    ; preds = %562, %559
  %563 = phi i64 [ 0, %559 ], [ %575, %562 ]
  %564 = mul nsw i64 %563, %50
  %565 = add nsw i64 %564, %560
  %566 = getelementptr inbounds double, double* %48, i64 %565
  %567 = load double, double* %566, align 8, !tbaa !7
  %568 = load double, double* %561, align 8, !tbaa !7
  %569 = getelementptr inbounds double, double* %54, i64 %563
  %570 = load double, double* %569, align 8, !tbaa !7
  %571 = fmul double %568, %570
  %572 = fdiv double %571, %480
  %573 = fsub double %567, %572
  %574 = getelementptr inbounds double, double* %45, i64 %565
  store double %573, double* %574, align 8, !tbaa !7
  %575 = add nuw nsw i64 %563, 1
  %576 = icmp eq i64 %575, %93
  br i1 %576, label %577, label %562

; <label>:577:                                    ; preds = %562
  %578 = add nuw nsw i64 %560, 1
  %579 = icmp eq i64 %578, %94
  br i1 %579, label %898, label %559

; <label>:580:                                    ; preds = %506, %580
  %581 = phi i64 [ %599, %580 ], [ %507, %506 ]
  %582 = getelementptr inbounds double, double* %52, i64 %581
  %583 = load double, double* %582, align 8, !tbaa !7
  %584 = getelementptr inbounds double, double* %54, i64 %581
  %585 = load double, double* %584, align 8, !tbaa !7
  %586 = fmul double %479, %585
  %587 = fdiv double %586, %480
  %588 = fadd double %583, %587
  %589 = getelementptr inbounds double, double* %46, i64 %581
  store double %588, double* %589, align 8, !tbaa !7
  %590 = add nuw nsw i64 %581, 1
  %591 = getelementptr inbounds double, double* %52, i64 %590
  %592 = load double, double* %591, align 8, !tbaa !7
  %593 = getelementptr inbounds double, double* %54, i64 %590
  %594 = load double, double* %593, align 8, !tbaa !7
  %595 = fmul double %479, %594
  %596 = fdiv double %595, %480
  %597 = fadd double %592, %596
  %598 = getelementptr inbounds double, double* %46, i64 %590
  store double %597, double* %598, align 8, !tbaa !7
  %599 = add nsw i64 %581, 2
  %600 = icmp eq i64 %599, %92
  br i1 %600, label %558, label %580, !llvm.loop !21

; <label>:601:                                    ; preds = %363
  br i1 %60, label %602, label %604

; <label>:602:                                    ; preds = %601
  %603 = tail call double* @REAL(%struct.SEXPREC* %77) #7
  br label %604

; <label>:604:                                    ; preds = %602, %601
  %605 = phi double* [ %603, %602 ], [ null, %601 ]
  br i1 %82, label %606, label %698

; <label>:606:                                    ; preds = %604
  %607 = or i1 %134, %137
  br i1 %607, label %608, label %629

; <label>:608:                                    ; preds = %606, %697
  %609 = phi i64 [ 0, %606 ], [ %138, %697 ]
  %610 = sub nsw i64 %85, %609
  %611 = xor i64 %609, -1
  %612 = add nsw i64 %611, %85
  %613 = and i64 %610, 7
  %614 = icmp eq i64 %613, 0
  br i1 %614, label %626, label %615

; <label>:615:                                    ; preds = %608, %615
  %616 = phi i64 [ %623, %615 ], [ %609, %608 ]
  %617 = phi i64 [ %624, %615 ], [ %613, %608 ]
  %618 = getelementptr inbounds double, double* %52, i64 %616
  %619 = bitcast double* %618 to i64*
  %620 = load i64, i64* %619, align 8, !tbaa !7
  %621 = getelementptr inbounds double, double* %46, i64 %616
  %622 = bitcast double* %621 to i64*
  store i64 %620, i64* %622, align 8, !tbaa !7
  %623 = add nuw nsw i64 %616, 1
  %624 = add i64 %617, -1
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %626, label %615, !llvm.loop !22

; <label>:626:                                    ; preds = %615, %608
  %627 = phi i64 [ %609, %608 ], [ %623, %615 ]
  %628 = icmp ult i64 %612, 7
  br i1 %628, label %698, label %791

; <label>:629:                                    ; preds = %606
  br i1 %140, label %679, label %630

; <label>:630:                                    ; preds = %629, %630
  %631 = phi i64 [ %676, %630 ], [ 0, %629 ]
  %632 = phi i64 [ %677, %630 ], [ %141, %629 ]
  %633 = getelementptr inbounds double, double* %52, i64 %631
  %634 = bitcast double* %633 to <2 x i64>*
  %635 = load <2 x i64>, <2 x i64>* %634, align 8, !tbaa !7, !alias.scope !23
  %636 = getelementptr inbounds double, double* %633, i64 2
  %637 = bitcast double* %636 to <2 x i64>*
  %638 = load <2 x i64>, <2 x i64>* %637, align 8, !tbaa !7, !alias.scope !23
  %639 = getelementptr inbounds double, double* %46, i64 %631
  %640 = bitcast double* %639 to <2 x i64>*
  store <2 x i64> %635, <2 x i64>* %640, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %641 = getelementptr inbounds double, double* %639, i64 2
  %642 = bitcast double* %641 to <2 x i64>*
  store <2 x i64> %638, <2 x i64>* %642, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %643 = or i64 %631, 4
  %644 = getelementptr inbounds double, double* %52, i64 %643
  %645 = bitcast double* %644 to <2 x i64>*
  %646 = load <2 x i64>, <2 x i64>* %645, align 8, !tbaa !7, !alias.scope !23
  %647 = getelementptr inbounds double, double* %644, i64 2
  %648 = bitcast double* %647 to <2 x i64>*
  %649 = load <2 x i64>, <2 x i64>* %648, align 8, !tbaa !7, !alias.scope !23
  %650 = getelementptr inbounds double, double* %46, i64 %643
  %651 = bitcast double* %650 to <2 x i64>*
  store <2 x i64> %646, <2 x i64>* %651, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %652 = getelementptr inbounds double, double* %650, i64 2
  %653 = bitcast double* %652 to <2 x i64>*
  store <2 x i64> %649, <2 x i64>* %653, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %654 = or i64 %631, 8
  %655 = getelementptr inbounds double, double* %52, i64 %654
  %656 = bitcast double* %655 to <2 x i64>*
  %657 = load <2 x i64>, <2 x i64>* %656, align 8, !tbaa !7, !alias.scope !23
  %658 = getelementptr inbounds double, double* %655, i64 2
  %659 = bitcast double* %658 to <2 x i64>*
  %660 = load <2 x i64>, <2 x i64>* %659, align 8, !tbaa !7, !alias.scope !23
  %661 = getelementptr inbounds double, double* %46, i64 %654
  %662 = bitcast double* %661 to <2 x i64>*
  store <2 x i64> %657, <2 x i64>* %662, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %663 = getelementptr inbounds double, double* %661, i64 2
  %664 = bitcast double* %663 to <2 x i64>*
  store <2 x i64> %660, <2 x i64>* %664, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %665 = or i64 %631, 12
  %666 = getelementptr inbounds double, double* %52, i64 %665
  %667 = bitcast double* %666 to <2 x i64>*
  %668 = load <2 x i64>, <2 x i64>* %667, align 8, !tbaa !7, !alias.scope !23
  %669 = getelementptr inbounds double, double* %666, i64 2
  %670 = bitcast double* %669 to <2 x i64>*
  %671 = load <2 x i64>, <2 x i64>* %670, align 8, !tbaa !7, !alias.scope !23
  %672 = getelementptr inbounds double, double* %46, i64 %665
  %673 = bitcast double* %672 to <2 x i64>*
  store <2 x i64> %668, <2 x i64>* %673, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %674 = getelementptr inbounds double, double* %672, i64 2
  %675 = bitcast double* %674 to <2 x i64>*
  store <2 x i64> %671, <2 x i64>* %675, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %676 = add i64 %631, 16
  %677 = add i64 %632, -4
  %678 = icmp eq i64 %677, 0
  br i1 %678, label %679, label %630, !llvm.loop !28

; <label>:679:                                    ; preds = %630, %629
  %680 = phi i64 [ 0, %629 ], [ %676, %630 ]
  br i1 %142, label %697, label %681

; <label>:681:                                    ; preds = %679, %681
  %682 = phi i64 [ %694, %681 ], [ %680, %679 ]
  %683 = phi i64 [ %695, %681 ], [ %139, %679 ]
  %684 = getelementptr inbounds double, double* %52, i64 %682
  %685 = bitcast double* %684 to <2 x i64>*
  %686 = load <2 x i64>, <2 x i64>* %685, align 8, !tbaa !7, !alias.scope !23
  %687 = getelementptr inbounds double, double* %684, i64 2
  %688 = bitcast double* %687 to <2 x i64>*
  %689 = load <2 x i64>, <2 x i64>* %688, align 8, !tbaa !7, !alias.scope !23
  %690 = getelementptr inbounds double, double* %46, i64 %682
  %691 = bitcast double* %690 to <2 x i64>*
  store <2 x i64> %686, <2 x i64>* %691, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %692 = getelementptr inbounds double, double* %690, i64 2
  %693 = bitcast double* %692 to <2 x i64>*
  store <2 x i64> %689, <2 x i64>* %693, align 8, !tbaa !7, !alias.scope !26, !noalias !23
  %694 = add i64 %682, 4
  %695 = add i64 %683, -1
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %697, label %681, !llvm.loop !29

; <label>:697:                                    ; preds = %681, %679
  br i1 %143, label %698, label %608

; <label>:698:                                    ; preds = %626, %791, %697, %604
  br i1 %83, label %842, label %699

; <label>:699:                                    ; preds = %698
  %700 = or i1 %144, %147
  br i1 %700, label %701, label %722

; <label>:701:                                    ; preds = %699, %790
  %702 = phi i64 [ 0, %699 ], [ %148, %790 ]
  %703 = sub nsw i64 %56, %702
  %704 = xor i64 %702, -1
  %705 = add nsw i64 %704, %56
  %706 = and i64 %703, 7
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %719, label %708

; <label>:708:                                    ; preds = %701, %708
  %709 = phi i64 [ %716, %708 ], [ %702, %701 ]
  %710 = phi i64 [ %717, %708 ], [ %706, %701 ]
  %711 = getelementptr inbounds double, double* %48, i64 %709
  %712 = bitcast double* %711 to i64*
  %713 = load i64, i64* %712, align 8, !tbaa !7
  %714 = getelementptr inbounds double, double* %45, i64 %709
  %715 = bitcast double* %714 to i64*
  store i64 %713, i64* %715, align 8, !tbaa !7
  %716 = add nuw nsw i64 %709, 1
  %717 = add i64 %710, -1
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %719, label %708, !llvm.loop !30

; <label>:719:                                    ; preds = %708, %701
  %720 = phi i64 [ %702, %701 ], [ %716, %708 ]
  %721 = icmp ult i64 %705, 7
  br i1 %721, label %842, label %843

; <label>:722:                                    ; preds = %699
  br i1 %150, label %772, label %723

; <label>:723:                                    ; preds = %722, %723
  %724 = phi i64 [ %769, %723 ], [ 0, %722 ]
  %725 = phi i64 [ %770, %723 ], [ %151, %722 ]
  %726 = getelementptr inbounds double, double* %48, i64 %724
  %727 = bitcast double* %726 to <2 x i64>*
  %728 = load <2 x i64>, <2 x i64>* %727, align 8, !tbaa !7, !alias.scope !31
  %729 = getelementptr inbounds double, double* %726, i64 2
  %730 = bitcast double* %729 to <2 x i64>*
  %731 = load <2 x i64>, <2 x i64>* %730, align 8, !tbaa !7, !alias.scope !31
  %732 = getelementptr inbounds double, double* %45, i64 %724
  %733 = bitcast double* %732 to <2 x i64>*
  store <2 x i64> %728, <2 x i64>* %733, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %734 = getelementptr inbounds double, double* %732, i64 2
  %735 = bitcast double* %734 to <2 x i64>*
  store <2 x i64> %731, <2 x i64>* %735, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %736 = or i64 %724, 4
  %737 = getelementptr inbounds double, double* %48, i64 %736
  %738 = bitcast double* %737 to <2 x i64>*
  %739 = load <2 x i64>, <2 x i64>* %738, align 8, !tbaa !7, !alias.scope !31
  %740 = getelementptr inbounds double, double* %737, i64 2
  %741 = bitcast double* %740 to <2 x i64>*
  %742 = load <2 x i64>, <2 x i64>* %741, align 8, !tbaa !7, !alias.scope !31
  %743 = getelementptr inbounds double, double* %45, i64 %736
  %744 = bitcast double* %743 to <2 x i64>*
  store <2 x i64> %739, <2 x i64>* %744, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %745 = getelementptr inbounds double, double* %743, i64 2
  %746 = bitcast double* %745 to <2 x i64>*
  store <2 x i64> %742, <2 x i64>* %746, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %747 = or i64 %724, 8
  %748 = getelementptr inbounds double, double* %48, i64 %747
  %749 = bitcast double* %748 to <2 x i64>*
  %750 = load <2 x i64>, <2 x i64>* %749, align 8, !tbaa !7, !alias.scope !31
  %751 = getelementptr inbounds double, double* %748, i64 2
  %752 = bitcast double* %751 to <2 x i64>*
  %753 = load <2 x i64>, <2 x i64>* %752, align 8, !tbaa !7, !alias.scope !31
  %754 = getelementptr inbounds double, double* %45, i64 %747
  %755 = bitcast double* %754 to <2 x i64>*
  store <2 x i64> %750, <2 x i64>* %755, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %756 = getelementptr inbounds double, double* %754, i64 2
  %757 = bitcast double* %756 to <2 x i64>*
  store <2 x i64> %753, <2 x i64>* %757, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %758 = or i64 %724, 12
  %759 = getelementptr inbounds double, double* %48, i64 %758
  %760 = bitcast double* %759 to <2 x i64>*
  %761 = load <2 x i64>, <2 x i64>* %760, align 8, !tbaa !7, !alias.scope !31
  %762 = getelementptr inbounds double, double* %759, i64 2
  %763 = bitcast double* %762 to <2 x i64>*
  %764 = load <2 x i64>, <2 x i64>* %763, align 8, !tbaa !7, !alias.scope !31
  %765 = getelementptr inbounds double, double* %45, i64 %758
  %766 = bitcast double* %765 to <2 x i64>*
  store <2 x i64> %761, <2 x i64>* %766, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %767 = getelementptr inbounds double, double* %765, i64 2
  %768 = bitcast double* %767 to <2 x i64>*
  store <2 x i64> %764, <2 x i64>* %768, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %769 = add i64 %724, 16
  %770 = add i64 %725, -4
  %771 = icmp eq i64 %770, 0
  br i1 %771, label %772, label %723, !llvm.loop !36

; <label>:772:                                    ; preds = %723, %722
  %773 = phi i64 [ 0, %722 ], [ %769, %723 ]
  br i1 %152, label %790, label %774

; <label>:774:                                    ; preds = %772, %774
  %775 = phi i64 [ %787, %774 ], [ %773, %772 ]
  %776 = phi i64 [ %788, %774 ], [ %149, %772 ]
  %777 = getelementptr inbounds double, double* %48, i64 %775
  %778 = bitcast double* %777 to <2 x i64>*
  %779 = load <2 x i64>, <2 x i64>* %778, align 8, !tbaa !7, !alias.scope !31
  %780 = getelementptr inbounds double, double* %777, i64 2
  %781 = bitcast double* %780 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 8, !tbaa !7, !alias.scope !31
  %783 = getelementptr inbounds double, double* %45, i64 %775
  %784 = bitcast double* %783 to <2 x i64>*
  store <2 x i64> %779, <2 x i64>* %784, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %785 = getelementptr inbounds double, double* %783, i64 2
  %786 = bitcast double* %785 to <2 x i64>*
  store <2 x i64> %782, <2 x i64>* %786, align 8, !tbaa !7, !alias.scope !34, !noalias !31
  %787 = add i64 %775, 4
  %788 = add i64 %776, -1
  %789 = icmp eq i64 %788, 0
  br i1 %789, label %790, label %774, !llvm.loop !37

; <label>:790:                                    ; preds = %774, %772
  br i1 %153, label %842, label %701

; <label>:791:                                    ; preds = %626, %791
  %792 = phi i64 [ %840, %791 ], [ %627, %626 ]
  %793 = getelementptr inbounds double, double* %52, i64 %792
  %794 = bitcast double* %793 to i64*
  %795 = load i64, i64* %794, align 8, !tbaa !7
  %796 = getelementptr inbounds double, double* %46, i64 %792
  %797 = bitcast double* %796 to i64*
  store i64 %795, i64* %797, align 8, !tbaa !7
  %798 = add nuw nsw i64 %792, 1
  %799 = getelementptr inbounds double, double* %52, i64 %798
  %800 = bitcast double* %799 to i64*
  %801 = load i64, i64* %800, align 8, !tbaa !7
  %802 = getelementptr inbounds double, double* %46, i64 %798
  %803 = bitcast double* %802 to i64*
  store i64 %801, i64* %803, align 8, !tbaa !7
  %804 = add nsw i64 %792, 2
  %805 = getelementptr inbounds double, double* %52, i64 %804
  %806 = bitcast double* %805 to i64*
  %807 = load i64, i64* %806, align 8, !tbaa !7
  %808 = getelementptr inbounds double, double* %46, i64 %804
  %809 = bitcast double* %808 to i64*
  store i64 %807, i64* %809, align 8, !tbaa !7
  %810 = add nsw i64 %792, 3
  %811 = getelementptr inbounds double, double* %52, i64 %810
  %812 = bitcast double* %811 to i64*
  %813 = load i64, i64* %812, align 8, !tbaa !7
  %814 = getelementptr inbounds double, double* %46, i64 %810
  %815 = bitcast double* %814 to i64*
  store i64 %813, i64* %815, align 8, !tbaa !7
  %816 = add nsw i64 %792, 4
  %817 = getelementptr inbounds double, double* %52, i64 %816
  %818 = bitcast double* %817 to i64*
  %819 = load i64, i64* %818, align 8, !tbaa !7
  %820 = getelementptr inbounds double, double* %46, i64 %816
  %821 = bitcast double* %820 to i64*
  store i64 %819, i64* %821, align 8, !tbaa !7
  %822 = add nsw i64 %792, 5
  %823 = getelementptr inbounds double, double* %52, i64 %822
  %824 = bitcast double* %823 to i64*
  %825 = load i64, i64* %824, align 8, !tbaa !7
  %826 = getelementptr inbounds double, double* %46, i64 %822
  %827 = bitcast double* %826 to i64*
  store i64 %825, i64* %827, align 8, !tbaa !7
  %828 = add nsw i64 %792, 6
  %829 = getelementptr inbounds double, double* %52, i64 %828
  %830 = bitcast double* %829 to i64*
  %831 = load i64, i64* %830, align 8, !tbaa !7
  %832 = getelementptr inbounds double, double* %46, i64 %828
  %833 = bitcast double* %832 to i64*
  store i64 %831, i64* %833, align 8, !tbaa !7
  %834 = add nsw i64 %792, 7
  %835 = getelementptr inbounds double, double* %52, i64 %834
  %836 = bitcast double* %835 to i64*
  %837 = load i64, i64* %836, align 8, !tbaa !7
  %838 = getelementptr inbounds double, double* %46, i64 %834
  %839 = bitcast double* %838 to i64*
  store i64 %837, i64* %839, align 8, !tbaa !7
  %840 = add nsw i64 %792, 8
  %841 = icmp eq i64 %840, %90
  br i1 %841, label %698, label %791, !llvm.loop !38

; <label>:842:                                    ; preds = %719, %843, %790, %698
  br i1 %60, label %894, label %957

; <label>:843:                                    ; preds = %719, %843
  %844 = phi i64 [ %892, %843 ], [ %720, %719 ]
  %845 = getelementptr inbounds double, double* %48, i64 %844
  %846 = bitcast double* %845 to i64*
  %847 = load i64, i64* %846, align 8, !tbaa !7
  %848 = getelementptr inbounds double, double* %45, i64 %844
  %849 = bitcast double* %848 to i64*
  store i64 %847, i64* %849, align 8, !tbaa !7
  %850 = add nuw nsw i64 %844, 1
  %851 = getelementptr inbounds double, double* %48, i64 %850
  %852 = bitcast double* %851 to i64*
  %853 = load i64, i64* %852, align 8, !tbaa !7
  %854 = getelementptr inbounds double, double* %45, i64 %850
  %855 = bitcast double* %854 to i64*
  store i64 %853, i64* %855, align 8, !tbaa !7
  %856 = add nsw i64 %844, 2
  %857 = getelementptr inbounds double, double* %48, i64 %856
  %858 = bitcast double* %857 to i64*
  %859 = load i64, i64* %858, align 8, !tbaa !7
  %860 = getelementptr inbounds double, double* %45, i64 %856
  %861 = bitcast double* %860 to i64*
  store i64 %859, i64* %861, align 8, !tbaa !7
  %862 = add nsw i64 %844, 3
  %863 = getelementptr inbounds double, double* %48, i64 %862
  %864 = bitcast double* %863 to i64*
  %865 = load i64, i64* %864, align 8, !tbaa !7
  %866 = getelementptr inbounds double, double* %45, i64 %862
  %867 = bitcast double* %866 to i64*
  store i64 %865, i64* %867, align 8, !tbaa !7
  %868 = add nsw i64 %844, 4
  %869 = getelementptr inbounds double, double* %48, i64 %868
  %870 = bitcast double* %869 to i64*
  %871 = load i64, i64* %870, align 8, !tbaa !7
  %872 = getelementptr inbounds double, double* %45, i64 %868
  %873 = bitcast double* %872 to i64*
  store i64 %871, i64* %873, align 8, !tbaa !7
  %874 = add nsw i64 %844, 5
  %875 = getelementptr inbounds double, double* %48, i64 %874
  %876 = bitcast double* %875 to i64*
  %877 = load i64, i64* %876, align 8, !tbaa !7
  %878 = getelementptr inbounds double, double* %45, i64 %874
  %879 = bitcast double* %878 to i64*
  store i64 %877, i64* %879, align 8, !tbaa !7
  %880 = add nsw i64 %844, 6
  %881 = getelementptr inbounds double, double* %48, i64 %880
  %882 = bitcast double* %881 to i64*
  %883 = load i64, i64* %882, align 8, !tbaa !7
  %884 = getelementptr inbounds double, double* %45, i64 %880
  %885 = bitcast double* %884 to i64*
  store i64 %883, i64* %885, align 8, !tbaa !7
  %886 = add nsw i64 %844, 7
  %887 = getelementptr inbounds double, double* %48, i64 %886
  %888 = bitcast double* %887 to i64*
  %889 = load i64, i64* %888, align 8, !tbaa !7
  %890 = getelementptr inbounds double, double* %45, i64 %886
  %891 = bitcast double* %890 to i64*
  store i64 %889, i64* %891, align 8, !tbaa !7
  %892 = add nsw i64 %844, 8
  %893 = icmp eq i64 %892, %56
  br i1 %893, label %842, label %843, !llvm.loop !39

; <label>:894:                                    ; preds = %842
  %895 = load i64, i64* bitcast (double* @R_NaReal to i64*), align 8, !tbaa !7
  %896 = getelementptr inbounds double, double* %605, i64 %184
  %897 = bitcast double* %896 to i64*
  store i64 %895, i64* %897, align 8, !tbaa !7
  br label %899

; <label>:898:                                    ; preds = %577, %488, %558
  br i1 %60, label %899, label %957

; <label>:899:                                    ; preds = %894, %898
  %900 = phi i32 [ %185, %894 ], [ %368, %898 ]
  %901 = phi double [ %186, %894 ], [ %483, %898 ]
  %902 = phi double [ %187, %894 ], [ %490, %898 ]
  %903 = tail call double* @REAL(%struct.SEXPREC* %78) #7
  br i1 %82, label %904, label %957

; <label>:904:                                    ; preds = %899
  br i1 %180, label %942, label %905

; <label>:905:                                    ; preds = %904, %905
  %906 = phi i64 [ %939, %905 ], [ 0, %904 ]
  %907 = phi i64 [ %940, %905 ], [ %181, %904 ]
  %908 = getelementptr inbounds double, double* %46, i64 %906
  %909 = bitcast double* %908 to i64*
  %910 = load i64, i64* %909, align 8, !tbaa !7
  %911 = mul nsw i64 %906, %84
  %912 = add nsw i64 %911, %184
  %913 = getelementptr inbounds double, double* %903, i64 %912
  %914 = bitcast double* %913 to i64*
  store i64 %910, i64* %914, align 8, !tbaa !7
  %915 = or i64 %906, 1
  %916 = getelementptr inbounds double, double* %46, i64 %915
  %917 = bitcast double* %916 to i64*
  %918 = load i64, i64* %917, align 8, !tbaa !7
  %919 = mul nsw i64 %915, %84
  %920 = add nsw i64 %919, %184
  %921 = getelementptr inbounds double, double* %903, i64 %920
  %922 = bitcast double* %921 to i64*
  store i64 %918, i64* %922, align 8, !tbaa !7
  %923 = or i64 %906, 2
  %924 = getelementptr inbounds double, double* %46, i64 %923
  %925 = bitcast double* %924 to i64*
  %926 = load i64, i64* %925, align 8, !tbaa !7
  %927 = mul nsw i64 %923, %84
  %928 = add nsw i64 %927, %184
  %929 = getelementptr inbounds double, double* %903, i64 %928
  %930 = bitcast double* %929 to i64*
  store i64 %926, i64* %930, align 8, !tbaa !7
  %931 = or i64 %906, 3
  %932 = getelementptr inbounds double, double* %46, i64 %931
  %933 = bitcast double* %932 to i64*
  %934 = load i64, i64* %933, align 8, !tbaa !7
  %935 = mul nsw i64 %931, %84
  %936 = add nsw i64 %935, %184
  %937 = getelementptr inbounds double, double* %903, i64 %936
  %938 = bitcast double* %937 to i64*
  store i64 %934, i64* %938, align 8, !tbaa !7
  %939 = add nuw nsw i64 %906, 4
  %940 = add i64 %907, -4
  %941 = icmp eq i64 %940, 0
  br i1 %941, label %942, label %905

; <label>:942:                                    ; preds = %905, %904
  %943 = phi i64 [ 0, %904 ], [ %939, %905 ]
  br i1 %182, label %957, label %944

; <label>:944:                                    ; preds = %942, %944
  %945 = phi i64 [ %954, %944 ], [ %943, %942 ]
  %946 = phi i64 [ %955, %944 ], [ %179, %942 ]
  %947 = getelementptr inbounds double, double* %46, i64 %945
  %948 = bitcast double* %947 to i64*
  %949 = load i64, i64* %948, align 8, !tbaa !7
  %950 = mul nsw i64 %945, %84
  %951 = add nsw i64 %950, %184
  %952 = getelementptr inbounds double, double* %903, i64 %951
  %953 = bitcast double* %952 to i64*
  store i64 %949, i64* %953, align 8, !tbaa !7
  %954 = add nuw nsw i64 %945, 1
  %955 = add i64 %946, -1
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %957, label %944, !llvm.loop !40

; <label>:957:                                    ; preds = %942, %944, %899, %842, %898
  %958 = phi i32 [ %368, %898 ], [ %185, %842 ], [ %900, %899 ], [ %900, %944 ], [ %900, %942 ]
  %959 = phi double [ %483, %898 ], [ %186, %842 ], [ %901, %899 ], [ %901, %944 ], [ %901, %942 ]
  %960 = phi double [ %490, %898 ], [ %187, %842 ], [ %902, %899 ], [ %902, %944 ], [ %902, %942 ]
  %961 = add nuw nsw i64 %184, 1
  %962 = icmp eq i64 %961, %96
  br i1 %962, label %235, label %183

; <label>:963:                                    ; preds = %235
  %964 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %79, i64 0, %struct.SEXPREC* %240) #7
  %965 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %4) #7
  %966 = icmp eq i32 %965, 0
  br i1 %966, label %970, label %967

; <label>:967:                                    ; preds = %963
  %968 = tail call %struct.SEXPREC* @Rf_install(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0)) #7
  %969 = tail call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %79, %struct.SEXPREC* %968, %struct.SEXPREC* %8) #7
  br label %970

; <label>:970:                                    ; preds = %963, %967
  tail call void @Rf_unprotect(i32 3) #7
  br label %978

; <label>:971:                                    ; preds = %235
  %972 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %4) #7
  %973 = icmp eq i32 %972, 0
  br i1 %973, label %977, label %974

; <label>:974:                                    ; preds = %971
  %975 = tail call %struct.SEXPREC* @Rf_install(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0)) #7
  %976 = tail call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %240, %struct.SEXPREC* %975, %struct.SEXPREC* %8) #7
  br label %977

; <label>:977:                                    ; preds = %971, %974
  tail call void @Rf_unprotect(i32 2) #7
  br label %978

; <label>:978:                                    ; preds = %977, %970
  %979 = phi %struct.SEXPREC* [ %79, %970 ], [ %240, %977 ]
  ret %struct.SEXPREC* %979
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @Rf_asLogical(%struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_protect(%struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_duplicate(%struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @getListElement(%struct.SEXPREC*, i8*) local_unnamed_addr #2

declare i32 @TYPEOF(%struct.SEXPREC*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @Rf_error(i8*, ...) local_unnamed_addr #3

declare i8* @libintl_dgettext(i8*, i8*) local_unnamed_addr #2

declare i32 @LENGTH(%struct.SEXPREC*) local_unnamed_addr #2

declare double* @REAL(%struct.SEXPREC*) local_unnamed_addr #2

declare double @Rf_asReal(%struct.SEXPREC*) local_unnamed_addr #2

declare i8* @R_alloc(i64, i32) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_allocVector(i32, i64) local_unnamed_addr #2

declare %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC*, i64, %struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_allocMatrix(i32, i32, i32) local_unnamed_addr #2

declare void @SET_STRING_ELT(%struct.SEXPREC*, i64, %struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_mkChar(i8*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #2

declare void @Rf_unprotect(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

declare i32 @Rf_asInteger(%struct.SEXPREC*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.log.f64(double) #4

declare %struct.SEXPREC* @Rf_install(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @KalmanSmooth(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %4 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #7
  %5 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  %6 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #7
  %7 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #7
  %8 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #7
  %9 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #7
  %10 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)) #7
  %11 = tail call i32 @TYPEOF(%struct.SEXPREC* %0) #7
  %12 = icmp eq i32 %11, 14
  br i1 %12, label %13, label %28

; <label>:13:                                     ; preds = %3
  %14 = tail call i32 @TYPEOF(%struct.SEXPREC* %4) #7
  %15 = icmp eq i32 %14, 14
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %13
  %17 = tail call i32 @TYPEOF(%struct.SEXPREC* %5) #7
  %18 = icmp eq i32 %17, 14
  br i1 %18, label %19, label %28

; <label>:19:                                     ; preds = %16
  %20 = tail call i32 @TYPEOF(%struct.SEXPREC* %6) #7
  %21 = icmp eq i32 %20, 14
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %19
  %23 = tail call i32 @TYPEOF(%struct.SEXPREC* %7) #7
  %24 = icmp eq i32 %23, 14
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %22
  %26 = tail call i32 @TYPEOF(%struct.SEXPREC* %8) #7
  %27 = icmp eq i32 %26, 14
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25, %22, %19, %16, %13, %3
  %29 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %29) #8
  unreachable

; <label>:30:                                     ; preds = %25
  %31 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %32 = tail call i32 @LENGTH(%struct.SEXPREC* %5) #7
  %33 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %34 = tail call double* @REAL(%struct.SEXPREC* %4) #7
  %35 = tail call double* @REAL(%struct.SEXPREC* %7) #7
  %36 = tail call double* @REAL(%struct.SEXPREC* %8) #7
  %37 = tail call double @Rf_asReal(%struct.SEXPREC* %9) #7
  %38 = tail call %struct.SEXPREC* @Rf_duplicate(%struct.SEXPREC* %5) #7
  %39 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %38) #7
  %40 = tail call double* @REAL(%struct.SEXPREC* %38) #7
  %41 = bitcast double* %40 to i8*
  %42 = tail call %struct.SEXPREC* @Rf_duplicate(%struct.SEXPREC* %6) #7
  %43 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %42) #7
  %44 = tail call double* @REAL(%struct.SEXPREC* %42) #7
  %45 = tail call %struct.SEXPREC* @Rf_duplicate(%struct.SEXPREC* %10) #7
  %46 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %45) #7
  %47 = tail call double* @REAL(%struct.SEXPREC* %45) #7
  %48 = tail call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 2) #7
  %49 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %48) #7
  %50 = tail call %struct.SEXPREC* @Rf_allocVector(i32 16, i64 2) #7
  %51 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %50) #7
  %52 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %51, i64 0, %struct.SEXPREC* %52) #7
  %53 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %51, i64 1, %struct.SEXPREC* %53) #7
  %54 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NamesSymbol, align 8, !tbaa !3
  %55 = tail call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %48, %struct.SEXPREC* %54, %struct.SEXPREC* %51) #7
  tail call void @Rf_unprotect(i32 1) #7
  %56 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %31, i32 %32) #7
  %57 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %48, i64 0, %struct.SEXPREC* %56) #7
  %58 = tail call double* @REAL(%struct.SEXPREC* %56) #7
  %59 = mul nsw i32 %32, %31
  %60 = mul nsw i32 %59, %32
  %61 = sext i32 %60 to i64
  %62 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %61) #7
  %63 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %48, i64 1, %struct.SEXPREC* %62) #7
  %64 = tail call double* @REAL(%struct.SEXPREC* %62) #7
  %65 = sext i32 %32 to i64
  %66 = tail call i8* @R_alloc(i64 %65, i32 8) #7
  %67 = bitcast i8* %66 to double*
  %68 = tail call i8* @R_alloc(i64 %65, i32 8) #7
  %69 = bitcast i8* %68 to double*
  %70 = mul i32 %32, %32
  %71 = zext i32 %70 to i64
  %72 = tail call i8* @R_alloc(i64 %71, i32 8) #7
  %73 = bitcast i8* %72 to double*
  %74 = tail call i8* @R_alloc(i64 %61, i32 8) #7
  %75 = bitcast i8* %74 to double*
  %76 = sext i32 %31 to i64
  %77 = tail call i8* @R_alloc(i64 %76, i32 8) #7
  %78 = bitcast i8* %77 to double*
  %79 = tail call i8* @R_alloc(i64 %76, i32 8) #7
  %80 = bitcast i8* %79 to double*
  %81 = sext i32 %59 to i64
  %82 = tail call i8* @R_alloc(i64 %81, i32 8) #7
  %83 = bitcast i8* %82 to double*
  %84 = tail call i8* @R_alloc(i64 %71, i32 8) #7
  %85 = bitcast i8* %84 to double*
  %86 = icmp sgt i32 %31, 0
  br i1 %86, label %89, label %87

; <label>:87:                                     ; preds = %30
  %88 = tail call i8* @R_alloc(i64 %81, i32 8) #7
  br label %1571

; <label>:89:                                     ; preds = %30
  %90 = icmp sgt i32 %32, 0
  %91 = icmp eq i32 %70, 0
  %92 = zext i32 %32 to i64
  %93 = zext i32 %32 to i64
  %94 = zext i32 %32 to i64
  %95 = zext i32 %32 to i64
  %96 = zext i32 %32 to i64
  %97 = zext i32 %32 to i64
  %98 = zext i32 %32 to i64
  %99 = zext i32 %32 to i64
  %100 = zext i32 %32 to i64
  %101 = zext i32 %31 to i64
  %102 = getelementptr double, double* %40, i64 %99
  %103 = bitcast double* %102 to i8*
  %104 = shl nuw nsw i64 %99, 3
  %105 = getelementptr i8, i8* %66, i64 %104
  %106 = getelementptr i8, i8* %68, i64 %104
  %107 = getelementptr double, double* %44, i64 %71
  %108 = getelementptr double, double* %47, i64 %71
  %109 = add nsw i64 %92, -1
  %110 = add nsw i64 %71, -1
  %111 = and i64 %71, 4294967292
  %112 = add nsw i64 %111, -4
  %113 = lshr exact i64 %112, 2
  %114 = add nuw nsw i64 %113, 1
  %115 = and i64 %92, 4294967294
  %116 = add nsw i64 %115, -2
  %117 = lshr exact i64 %116, 1
  %118 = add nuw i64 %117, 1
  %119 = and i64 %92, 1
  %120 = icmp eq i64 %109, 0
  %121 = sub nsw i64 %92, %119
  %122 = icmp eq i64 %119, 0
  %123 = and i64 %92, 1
  %124 = icmp eq i64 %109, 0
  %125 = sub nsw i64 %92, %123
  %126 = icmp eq i64 %123, 0
  %127 = and i64 %92, 1
  %128 = icmp eq i64 %109, 0
  %129 = sub nsw i64 %92, %127
  %130 = icmp eq i64 %127, 0
  %131 = and i64 %92, 3
  %132 = icmp ult i64 %109, 3
  %133 = sub nsw i64 %92, %131
  %134 = icmp eq i64 %131, 0
  %135 = and i64 %71, 3
  %136 = icmp ult i64 %110, 3
  %137 = sub nsw i64 %71, %135
  %138 = icmp eq i64 %135, 0
  %139 = and i64 %92, 1
  %140 = icmp eq i64 %109, 0
  %141 = sub nsw i64 %92, %139
  %142 = icmp eq i64 %139, 0
  %143 = icmp ult i32 %70, 4
  %144 = icmp ult double* %44, %108
  %145 = icmp ult double* %47, %107
  %146 = and i1 %144, %145
  %147 = and i64 %71, 4294967292
  %148 = and i64 %114, 3
  %149 = icmp ult i64 %112, 12
  %150 = sub nsw i64 %114, %148
  %151 = icmp eq i64 %148, 0
  %152 = icmp eq i64 %147, %71
  %153 = and i64 %92, 3
  %154 = icmp ult i64 %109, 3
  %155 = sub nsw i64 %92, %153
  %156 = icmp eq i64 %153, 0
  %157 = and i64 %92, 1
  %158 = icmp eq i64 %109, 0
  %159 = sub nsw i64 %92, %157
  %160 = icmp eq i64 %157, 0
  %161 = icmp eq i32 %32, 1
  %162 = icmp ugt i8* %105, %41
  %163 = icmp ult i8* %66, %103
  %164 = and i1 %162, %163
  %165 = icmp ugt i8* %106, %41
  %166 = icmp ult i8* %68, %103
  %167 = and i1 %165, %166
  %168 = or i1 %164, %167
  %169 = and i64 %99, 4294967294
  %170 = and i64 %118, 1
  %171 = icmp eq i64 %116, 0
  %172 = sub i64 %118, %170
  %173 = icmp eq i64 %170, 0
  %174 = icmp eq i64 %169, %99
  %175 = and i64 %92, 1
  %176 = icmp eq i64 %175, 0
  %177 = sub nsw i64 0, %92
  br label %178

; <label>:178:                                    ; preds = %926, %89
  %179 = phi i64 [ 0, %89 ], [ %927, %926 ]
  br i1 %90, label %180, label %282

; <label>:180:                                    ; preds = %178, %221
  %181 = phi i64 [ %225, %221 ], [ 0, %178 ]
  br i1 %120, label %206, label %182

; <label>:182:                                    ; preds = %180, %182
  %183 = phi i64 [ %203, %182 ], [ 0, %180 ]
  %184 = phi double [ %202, %182 ], [ 0.000000e+00, %180 ]
  %185 = phi i64 [ %204, %182 ], [ %121, %180 ]
  %186 = mul nsw i64 %183, %65
  %187 = add nsw i64 %186, %181
  %188 = getelementptr inbounds double, double* %35, i64 %187
  %189 = load double, double* %188, align 8, !tbaa !7
  %190 = getelementptr inbounds double, double* %40, i64 %183
  %191 = load double, double* %190, align 8, !tbaa !7
  %192 = fmul double %189, %191
  %193 = fadd double %184, %192
  %194 = or i64 %183, 1
  %195 = mul nsw i64 %194, %65
  %196 = add nsw i64 %195, %181
  %197 = getelementptr inbounds double, double* %35, i64 %196
  %198 = load double, double* %197, align 8, !tbaa !7
  %199 = getelementptr inbounds double, double* %40, i64 %194
  %200 = load double, double* %199, align 8, !tbaa !7
  %201 = fmul double %198, %200
  %202 = fadd double %193, %201
  %203 = add nuw nsw i64 %183, 2
  %204 = add i64 %185, -2
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %182

; <label>:206:                                    ; preds = %182, %180
  %207 = phi double [ undef, %180 ], [ %202, %182 ]
  %208 = phi i64 [ undef, %180 ], [ %203, %182 ]
  %209 = phi i64 [ 0, %180 ], [ %203, %182 ]
  %210 = phi double [ 0.000000e+00, %180 ], [ %202, %182 ]
  br i1 %122, label %221, label %211

; <label>:211:                                    ; preds = %206
  %212 = add nuw nsw i64 %209, 1
  %213 = mul nsw i64 %209, %65
  %214 = add nsw i64 %213, %181
  %215 = getelementptr inbounds double, double* %35, i64 %214
  %216 = load double, double* %215, align 8, !tbaa !7
  %217 = getelementptr inbounds double, double* %40, i64 %209
  %218 = load double, double* %217, align 8, !tbaa !7
  %219 = fmul double %216, %218
  %220 = fadd double %210, %219
  br label %221

; <label>:221:                                    ; preds = %206, %211
  %222 = phi double [ %207, %206 ], [ %220, %211 ]
  %223 = phi i64 [ %208, %206 ], [ %212, %211 ]
  %224 = getelementptr inbounds double, double* %67, i64 %181
  store double %222, double* %224, align 8, !tbaa !7
  %225 = add nuw nsw i64 %181, 1
  %226 = icmp eq i64 %225, %223
  br i1 %226, label %282, label %180

; <label>:227:                                    ; preds = %926
  %228 = tail call i8* @R_alloc(i64 %81, i32 8) #7
  %229 = bitcast i8* %228 to double*
  br i1 %86, label %230, label %1571

; <label>:230:                                    ; preds = %227
  %231 = add nsw i32 %31, -1
  %232 = icmp sgt i32 %32, 0
  %233 = sext i32 %231 to i64
  %234 = zext i32 %32 to i64
  %235 = zext i32 %32 to i64
  %236 = zext i32 %32 to i64
  %237 = zext i32 %32 to i64
  %238 = zext i32 %32 to i64
  %239 = zext i32 %32 to i64
  %240 = zext i32 %32 to i64
  %241 = zext i32 %32 to i64
  %242 = zext i32 %32 to i64
  %243 = zext i32 %32 to i64
  %244 = zext i32 %32 to i64
  %245 = add nsw i64 %234, -1
  %246 = and i64 %234, 3
  %247 = icmp ult i64 %245, 3
  %248 = sub nsw i64 %234, %246
  %249 = icmp eq i64 %246, 0
  %250 = and i64 %234, 1
  %251 = icmp eq i64 %245, 0
  %252 = sub nsw i64 %234, %250
  %253 = icmp eq i64 %250, 0
  %254 = and i64 %234, 1
  %255 = icmp eq i64 %245, 0
  %256 = sub nsw i64 %234, %254
  %257 = icmp eq i64 %254, 0
  %258 = and i64 %234, 1
  %259 = icmp eq i64 %245, 0
  %260 = sub nsw i64 %234, %258
  %261 = icmp eq i64 %258, 0
  %262 = and i64 %234, 1
  %263 = icmp eq i64 %245, 0
  %264 = sub nsw i64 %234, %262
  %265 = icmp eq i64 %262, 0
  %266 = and i64 %234, 1
  %267 = icmp eq i64 %245, 0
  %268 = sub nsw i64 %234, %266
  %269 = icmp eq i64 %266, 0
  %270 = and i64 %234, 1
  %271 = icmp eq i64 %245, 0
  %272 = sub nsw i64 %234, %270
  %273 = icmp eq i64 %270, 0
  %274 = and i64 %234, 1
  %275 = icmp eq i64 %245, 0
  %276 = sub nsw i64 %234, %274
  %277 = icmp eq i64 %274, 0
  %278 = and i64 %234, 1
  %279 = icmp eq i64 %245, 0
  %280 = sub nsw i64 %234, %278
  %281 = icmp eq i64 %278, 0
  br label %947

; <label>:282:                                    ; preds = %221, %178
  %283 = tail call i32 @Rf_asInteger(%struct.SEXPREC* %2) #7
  %284 = sext i32 %283 to i64
  %285 = icmp sgt i64 %179, %284
  br i1 %285, label %286, label %398

; <label>:286:                                    ; preds = %282
  br i1 %90, label %287, label %415

; <label>:287:                                    ; preds = %286, %289
  %288 = phi i64 [ %290, %289 ], [ 0, %286 ]
  br label %292

; <label>:289:                                    ; preds = %309
  %290 = add nuw nsw i64 %288, 1
  %291 = icmp eq i64 %290, %94
  br i1 %291, label %341, label %287

; <label>:292:                                    ; preds = %309, %287
  %293 = phi i64 [ 0, %287 ], [ %313, %309 ]
  %294 = mul nsw i64 %293, %65
  br i1 %124, label %295, label %315

; <label>:295:                                    ; preds = %315, %292
  %296 = phi double [ undef, %292 ], [ %337, %315 ]
  %297 = phi i64 [ 0, %292 ], [ %338, %315 ]
  %298 = phi double [ 0.000000e+00, %292 ], [ %337, %315 ]
  br i1 %126, label %309, label %299

; <label>:299:                                    ; preds = %295
  %300 = mul nsw i64 %297, %65
  %301 = add nsw i64 %300, %288
  %302 = getelementptr inbounds double, double* %35, i64 %301
  %303 = load double, double* %302, align 8, !tbaa !7
  %304 = add nsw i64 %297, %294
  %305 = getelementptr inbounds double, double* %44, i64 %304
  %306 = load double, double* %305, align 8, !tbaa !7
  %307 = fmul double %303, %306
  %308 = fadd double %298, %307
  br label %309

; <label>:309:                                    ; preds = %295, %299
  %310 = phi double [ %296, %295 ], [ %308, %299 ]
  %311 = add nsw i64 %294, %288
  %312 = getelementptr inbounds double, double* %73, i64 %311
  store double %310, double* %312, align 8, !tbaa !7
  %313 = add nuw nsw i64 %293, 1
  %314 = icmp eq i64 %313, %93
  br i1 %314, label %289, label %292

; <label>:315:                                    ; preds = %292, %315
  %316 = phi i64 [ %338, %315 ], [ 0, %292 ]
  %317 = phi double [ %337, %315 ], [ 0.000000e+00, %292 ]
  %318 = phi i64 [ %339, %315 ], [ %125, %292 ]
  %319 = mul nsw i64 %316, %65
  %320 = add nsw i64 %319, %288
  %321 = getelementptr inbounds double, double* %35, i64 %320
  %322 = load double, double* %321, align 8, !tbaa !7
  %323 = add nsw i64 %316, %294
  %324 = getelementptr inbounds double, double* %44, i64 %323
  %325 = load double, double* %324, align 8, !tbaa !7
  %326 = fmul double %322, %325
  %327 = fadd double %317, %326
  %328 = or i64 %316, 1
  %329 = mul nsw i64 %328, %65
  %330 = add nsw i64 %329, %288
  %331 = getelementptr inbounds double, double* %35, i64 %330
  %332 = load double, double* %331, align 8, !tbaa !7
  %333 = add nsw i64 %328, %294
  %334 = getelementptr inbounds double, double* %44, i64 %333
  %335 = load double, double* %334, align 8, !tbaa !7
  %336 = fmul double %332, %335
  %337 = fadd double %327, %336
  %338 = add nuw nsw i64 %316, 2
  %339 = add i64 %318, -2
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %295, label %315

; <label>:341:                                    ; preds = %289
  br i1 %90, label %342, label %415

; <label>:342:                                    ; preds = %341, %344
  %343 = phi i64 [ %345, %344 ], [ 0, %341 ]
  br label %347

; <label>:344:                                    ; preds = %367
  %345 = add nuw nsw i64 %343, 1
  %346 = icmp eq i64 %345, %96
  br i1 %346, label %398, label %342

; <label>:347:                                    ; preds = %367, %342
  %348 = phi i64 [ 0, %342 ], [ %370, %367 ]
  %349 = mul nsw i64 %348, %65
  %350 = add nsw i64 %349, %343
  %351 = getelementptr inbounds double, double* %36, i64 %350
  %352 = load double, double* %351, align 8, !tbaa !7
  br i1 %128, label %353, label %372

; <label>:353:                                    ; preds = %372, %347
  %354 = phi double [ undef, %347 ], [ %394, %372 ]
  %355 = phi i64 [ 0, %347 ], [ %395, %372 ]
  %356 = phi double [ %352, %347 ], [ %394, %372 ]
  br i1 %130, label %367, label %357

; <label>:357:                                    ; preds = %353
  %358 = mul nsw i64 %355, %65
  %359 = add nsw i64 %358, %343
  %360 = getelementptr inbounds double, double* %73, i64 %359
  %361 = load double, double* %360, align 8, !tbaa !7
  %362 = add nsw i64 %358, %348
  %363 = getelementptr inbounds double, double* %35, i64 %362
  %364 = load double, double* %363, align 8, !tbaa !7
  %365 = fmul double %361, %364
  %366 = fadd double %356, %365
  br label %367

; <label>:367:                                    ; preds = %353, %357
  %368 = phi double [ %354, %353 ], [ %366, %357 ]
  %369 = getelementptr inbounds double, double* %47, i64 %350
  store double %368, double* %369, align 8, !tbaa !7
  %370 = add nuw nsw i64 %348, 1
  %371 = icmp eq i64 %370, %95
  br i1 %371, label %344, label %347

; <label>:372:                                    ; preds = %347, %372
  %373 = phi i64 [ %395, %372 ], [ 0, %347 ]
  %374 = phi double [ %394, %372 ], [ %352, %347 ]
  %375 = phi i64 [ %396, %372 ], [ %129, %347 ]
  %376 = mul nsw i64 %373, %65
  %377 = add nsw i64 %376, %343
  %378 = getelementptr inbounds double, double* %73, i64 %377
  %379 = load double, double* %378, align 8, !tbaa !7
  %380 = add nsw i64 %376, %348
  %381 = getelementptr inbounds double, double* %35, i64 %380
  %382 = load double, double* %381, align 8, !tbaa !7
  %383 = fmul double %379, %382
  %384 = fadd double %374, %383
  %385 = or i64 %373, 1
  %386 = mul nsw i64 %385, %65
  %387 = add nsw i64 %386, %343
  %388 = getelementptr inbounds double, double* %73, i64 %387
  %389 = load double, double* %388, align 8, !tbaa !7
  %390 = add nsw i64 %386, %348
  %391 = getelementptr inbounds double, double* %35, i64 %390
  %392 = load double, double* %391, align 8, !tbaa !7
  %393 = fmul double %389, %392
  %394 = fadd double %384, %393
  %395 = add nuw nsw i64 %373, 2
  %396 = add i64 %375, -2
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %353, label %372

; <label>:398:                                    ; preds = %344, %282
  br i1 %90, label %399, label %415

; <label>:399:                                    ; preds = %398
  br i1 %132, label %400, label %417

; <label>:400:                                    ; preds = %417, %399
  %401 = phi i64 [ 0, %399 ], [ %451, %417 ]
  br i1 %134, label %415, label %402

; <label>:402:                                    ; preds = %400, %402
  %403 = phi i64 [ %412, %402 ], [ %401, %400 ]
  %404 = phi i64 [ %413, %402 ], [ %131, %400 ]
  %405 = getelementptr inbounds double, double* %67, i64 %403
  %406 = bitcast double* %405 to i64*
  %407 = load i64, i64* %406, align 8, !tbaa !7
  %408 = mul nsw i64 %403, %76
  %409 = add nsw i64 %408, %179
  %410 = getelementptr inbounds double, double* %58, i64 %409
  %411 = bitcast double* %410 to i64*
  store i64 %407, i64* %411, align 8, !tbaa !7
  %412 = add nuw nsw i64 %403, 1
  %413 = add i64 %404, -1
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %415, label %402, !llvm.loop !41

; <label>:415:                                    ; preds = %400, %402, %286, %341, %398
  br i1 %91, label %469, label %416

; <label>:416:                                    ; preds = %415
  br i1 %136, label %454, label %477

; <label>:417:                                    ; preds = %399, %417
  %418 = phi i64 [ %451, %417 ], [ 0, %399 ]
  %419 = phi i64 [ %452, %417 ], [ %133, %399 ]
  %420 = getelementptr inbounds double, double* %67, i64 %418
  %421 = bitcast double* %420 to i64*
  %422 = load i64, i64* %421, align 8, !tbaa !7
  %423 = mul nsw i64 %418, %76
  %424 = add nsw i64 %423, %179
  %425 = getelementptr inbounds double, double* %58, i64 %424
  %426 = bitcast double* %425 to i64*
  store i64 %422, i64* %426, align 8, !tbaa !7
  %427 = or i64 %418, 1
  %428 = getelementptr inbounds double, double* %67, i64 %427
  %429 = bitcast double* %428 to i64*
  %430 = load i64, i64* %429, align 8, !tbaa !7
  %431 = mul nsw i64 %427, %76
  %432 = add nsw i64 %431, %179
  %433 = getelementptr inbounds double, double* %58, i64 %432
  %434 = bitcast double* %433 to i64*
  store i64 %430, i64* %434, align 8, !tbaa !7
  %435 = or i64 %418, 2
  %436 = getelementptr inbounds double, double* %67, i64 %435
  %437 = bitcast double* %436 to i64*
  %438 = load i64, i64* %437, align 8, !tbaa !7
  %439 = mul nsw i64 %435, %76
  %440 = add nsw i64 %439, %179
  %441 = getelementptr inbounds double, double* %58, i64 %440
  %442 = bitcast double* %441 to i64*
  store i64 %438, i64* %442, align 8, !tbaa !7
  %443 = or i64 %418, 3
  %444 = getelementptr inbounds double, double* %67, i64 %443
  %445 = bitcast double* %444 to i64*
  %446 = load i64, i64* %445, align 8, !tbaa !7
  %447 = mul nsw i64 %443, %76
  %448 = add nsw i64 %447, %179
  %449 = getelementptr inbounds double, double* %58, i64 %448
  %450 = bitcast double* %449 to i64*
  store i64 %446, i64* %450, align 8, !tbaa !7
  %451 = add nuw nsw i64 %418, 4
  %452 = add i64 %419, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %400, label %417

; <label>:454:                                    ; preds = %477, %416
  %455 = phi i64 [ 0, %416 ], [ %511, %477 ]
  br i1 %138, label %469, label %456

; <label>:456:                                    ; preds = %454, %456
  %457 = phi i64 [ %466, %456 ], [ %455, %454 ]
  %458 = phi i64 [ %467, %456 ], [ %135, %454 ]
  %459 = getelementptr inbounds double, double* %47, i64 %457
  %460 = bitcast double* %459 to i64*
  %461 = load i64, i64* %460, align 8, !tbaa !7
  %462 = mul nsw i64 %457, %76
  %463 = add nsw i64 %462, %179
  %464 = getelementptr inbounds double, double* %75, i64 %463
  %465 = bitcast double* %464 to i64*
  store i64 %461, i64* %465, align 8, !tbaa !7
  %466 = add nuw nsw i64 %457, 1
  %467 = add i64 %458, -1
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %469, label %456, !llvm.loop !42

; <label>:469:                                    ; preds = %454, %456, %415
  %470 = getelementptr inbounds double, double* %33, i64 %179
  %471 = load double, double* %470, align 8, !tbaa !7
  %472 = fcmp ord double %471, 0.000000e+00
  br i1 %472, label %475, label %473

; <label>:473:                                    ; preds = %469
  br i1 %90, label %474, label %752

; <label>:474:                                    ; preds = %473
  br i1 %140, label %741, label %845

; <label>:475:                                    ; preds = %469
  br i1 %90, label %476, label %624

; <label>:476:                                    ; preds = %475
  br i1 %154, label %514, label %590

; <label>:477:                                    ; preds = %416, %477
  %478 = phi i64 [ %511, %477 ], [ 0, %416 ]
  %479 = phi i64 [ %512, %477 ], [ %137, %416 ]
  %480 = getelementptr inbounds double, double* %47, i64 %478
  %481 = bitcast double* %480 to i64*
  %482 = load i64, i64* %481, align 8, !tbaa !7
  %483 = mul nsw i64 %478, %76
  %484 = add nsw i64 %483, %179
  %485 = getelementptr inbounds double, double* %75, i64 %484
  %486 = bitcast double* %485 to i64*
  store i64 %482, i64* %486, align 8, !tbaa !7
  %487 = or i64 %478, 1
  %488 = getelementptr inbounds double, double* %47, i64 %487
  %489 = bitcast double* %488 to i64*
  %490 = load i64, i64* %489, align 8, !tbaa !7
  %491 = mul nsw i64 %487, %76
  %492 = add nsw i64 %491, %179
  %493 = getelementptr inbounds double, double* %75, i64 %492
  %494 = bitcast double* %493 to i64*
  store i64 %490, i64* %494, align 8, !tbaa !7
  %495 = or i64 %478, 2
  %496 = getelementptr inbounds double, double* %47, i64 %495
  %497 = bitcast double* %496 to i64*
  %498 = load i64, i64* %497, align 8, !tbaa !7
  %499 = mul nsw i64 %495, %76
  %500 = add nsw i64 %499, %179
  %501 = getelementptr inbounds double, double* %75, i64 %500
  %502 = bitcast double* %501 to i64*
  store i64 %498, i64* %502, align 8, !tbaa !7
  %503 = or i64 %478, 3
  %504 = getelementptr inbounds double, double* %47, i64 %503
  %505 = bitcast double* %504 to i64*
  %506 = load i64, i64* %505, align 8, !tbaa !7
  %507 = mul nsw i64 %503, %76
  %508 = add nsw i64 %507, %179
  %509 = getelementptr inbounds double, double* %75, i64 %508
  %510 = bitcast double* %509 to i64*
  store i64 %506, i64* %510, align 8, !tbaa !7
  %511 = add nuw nsw i64 %478, 4
  %512 = add i64 %479, -4
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %454, label %477

; <label>:514:                                    ; preds = %590, %476
  %515 = phi double [ undef, %476 ], [ %620, %590 ]
  %516 = phi i64 [ 0, %476 ], [ %621, %590 ]
  %517 = phi double [ %471, %476 ], [ %620, %590 ]
  br i1 %156, label %531, label %518

; <label>:518:                                    ; preds = %514, %518
  %519 = phi i64 [ %528, %518 ], [ %516, %514 ]
  %520 = phi double [ %527, %518 ], [ %517, %514 ]
  %521 = phi i64 [ %529, %518 ], [ %153, %514 ]
  %522 = getelementptr inbounds double, double* %34, i64 %519
  %523 = load double, double* %522, align 8, !tbaa !7
  %524 = getelementptr inbounds double, double* %67, i64 %519
  %525 = load double, double* %524, align 8, !tbaa !7
  %526 = fmul double %523, %525
  %527 = fsub double %520, %526
  %528 = add nuw nsw i64 %519, 1
  %529 = add i64 %521, -1
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %531, label %518, !llvm.loop !43

; <label>:531:                                    ; preds = %518, %514
  %532 = phi double [ %515, %514 ], [ %527, %518 ]
  br i1 %90, label %533, label %624

; <label>:533:                                    ; preds = %531
  %534 = trunc i64 %179 to i32
  br label %535

; <label>:535:                                    ; preds = %575, %533
  %536 = phi i64 [ 0, %533 ], [ %588, %575 ]
  %537 = phi double [ %37, %533 ], [ %587, %575 ]
  br i1 %158, label %562, label %538

; <label>:538:                                    ; preds = %535, %538
  %539 = phi i64 [ %559, %538 ], [ 0, %535 ]
  %540 = phi double [ %558, %538 ], [ 0.000000e+00, %535 ]
  %541 = phi i64 [ %560, %538 ], [ %159, %535 ]
  %542 = mul nsw i64 %539, %65
  %543 = add nsw i64 %542, %536
  %544 = getelementptr inbounds double, double* %47, i64 %543
  %545 = load double, double* %544, align 8, !tbaa !7
  %546 = getelementptr inbounds double, double* %34, i64 %539
  %547 = load double, double* %546, align 8, !tbaa !7
  %548 = fmul double %545, %547
  %549 = fadd double %540, %548
  %550 = or i64 %539, 1
  %551 = mul nsw i64 %550, %65
  %552 = add nsw i64 %551, %536
  %553 = getelementptr inbounds double, double* %47, i64 %552
  %554 = load double, double* %553, align 8, !tbaa !7
  %555 = getelementptr inbounds double, double* %34, i64 %550
  %556 = load double, double* %555, align 8, !tbaa !7
  %557 = fmul double %554, %556
  %558 = fadd double %549, %557
  %559 = add nuw nsw i64 %539, 2
  %560 = add i64 %541, -2
  %561 = icmp eq i64 %560, 0
  br i1 %561, label %562, label %538

; <label>:562:                                    ; preds = %538, %535
  %563 = phi double [ undef, %535 ], [ %558, %538 ]
  %564 = phi i64 [ 0, %535 ], [ %559, %538 ]
  %565 = phi double [ 0.000000e+00, %535 ], [ %558, %538 ]
  br i1 %160, label %575, label %566

; <label>:566:                                    ; preds = %562
  %567 = mul nsw i64 %564, %65
  %568 = add nsw i64 %567, %536
  %569 = getelementptr inbounds double, double* %47, i64 %568
  %570 = load double, double* %569, align 8, !tbaa !7
  %571 = getelementptr inbounds double, double* %34, i64 %564
  %572 = load double, double* %571, align 8, !tbaa !7
  %573 = fmul double %570, %572
  %574 = fadd double %565, %573
  br label %575

; <label>:575:                                    ; preds = %562, %566
  %576 = phi double [ %563, %562 ], [ %574, %566 ]
  %577 = getelementptr inbounds double, double* %69, i64 %536
  store double %576, double* %577, align 8, !tbaa !7
  %578 = trunc i64 %536 to i32
  %579 = mul nsw i32 %31, %578
  %580 = add nsw i32 %579, %534
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds double, double* %83, i64 %581
  store double %576, double* %582, align 8, !tbaa !7
  %583 = getelementptr inbounds double, double* %34, i64 %536
  %584 = load double, double* %583, align 8, !tbaa !7
  %585 = load double, double* %577, align 8, !tbaa !7
  %586 = fmul double %584, %585
  %587 = fadd double %537, %586
  %588 = add nuw nsw i64 %536, 1
  %589 = icmp eq i64 %588, %97
  br i1 %589, label %628, label %535

; <label>:590:                                    ; preds = %476, %590
  %591 = phi i64 [ %621, %590 ], [ 0, %476 ]
  %592 = phi double [ %620, %590 ], [ %471, %476 ]
  %593 = phi i64 [ %622, %590 ], [ %155, %476 ]
  %594 = getelementptr inbounds double, double* %34, i64 %591
  %595 = load double, double* %594, align 8, !tbaa !7
  %596 = getelementptr inbounds double, double* %67, i64 %591
  %597 = load double, double* %596, align 8, !tbaa !7
  %598 = fmul double %595, %597
  %599 = fsub double %592, %598
  %600 = or i64 %591, 1
  %601 = getelementptr inbounds double, double* %34, i64 %600
  %602 = load double, double* %601, align 8, !tbaa !7
  %603 = getelementptr inbounds double, double* %67, i64 %600
  %604 = load double, double* %603, align 8, !tbaa !7
  %605 = fmul double %602, %604
  %606 = fsub double %599, %605
  %607 = or i64 %591, 2
  %608 = getelementptr inbounds double, double* %34, i64 %607
  %609 = load double, double* %608, align 8, !tbaa !7
  %610 = getelementptr inbounds double, double* %67, i64 %607
  %611 = load double, double* %610, align 8, !tbaa !7
  %612 = fmul double %609, %611
  %613 = fsub double %606, %612
  %614 = or i64 %591, 3
  %615 = getelementptr inbounds double, double* %34, i64 %614
  %616 = load double, double* %615, align 8, !tbaa !7
  %617 = getelementptr inbounds double, double* %67, i64 %614
  %618 = load double, double* %617, align 8, !tbaa !7
  %619 = fmul double %616, %618
  %620 = fsub double %613, %619
  %621 = add nuw nsw i64 %591, 4
  %622 = add i64 %593, -4
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %514, label %590

; <label>:624:                                    ; preds = %531, %475
  %625 = phi double [ %532, %531 ], [ %471, %475 ]
  %626 = getelementptr inbounds double, double* %78, i64 %179
  store double %37, double* %626, align 8, !tbaa !7
  %627 = getelementptr inbounds double, double* %80, i64 %179
  store double %625, double* %627, align 8, !tbaa !7
  br label %926

; <label>:628:                                    ; preds = %575
  %629 = getelementptr inbounds double, double* %78, i64 %179
  store double %587, double* %629, align 8, !tbaa !7
  %630 = getelementptr inbounds double, double* %80, i64 %179
  store double %532, double* %630, align 8, !tbaa !7
  br i1 %90, label %631, label %926

; <label>:631:                                    ; preds = %628
  %632 = or i1 %161, %168
  br i1 %632, label %633, label %649

; <label>:633:                                    ; preds = %631, %697
  %634 = phi i64 [ 0, %631 ], [ %169, %697 ]
  %635 = xor i64 %634, -1
  br i1 %176, label %646, label %636

; <label>:636:                                    ; preds = %633
  %637 = getelementptr inbounds double, double* %67, i64 %634
  %638 = load double, double* %637, align 8, !tbaa !7
  %639 = getelementptr inbounds double, double* %69, i64 %634
  %640 = load double, double* %639, align 8, !tbaa !7
  %641 = fmul double %532, %640
  %642 = fdiv double %641, %587
  %643 = fadd double %638, %642
  %644 = getelementptr inbounds double, double* %40, i64 %634
  store double %643, double* %644, align 8, !tbaa !7
  %645 = or i64 %634, 1
  br label %646

; <label>:646:                                    ; preds = %636, %633
  %647 = phi i64 [ %645, %636 ], [ %634, %633 ]
  %648 = icmp eq i64 %635, %177
  br i1 %648, label %698, label %720

; <label>:649:                                    ; preds = %631
  %650 = insertelement <2 x double> undef, double %532, i32 0
  %651 = shufflevector <2 x double> %650, <2 x double> undef, <2 x i32> zeroinitializer
  %652 = insertelement <2 x double> undef, double %587, i32 0
  %653 = shufflevector <2 x double> %652, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %171, label %683, label %654

; <label>:654:                                    ; preds = %649, %654
  %655 = phi i64 [ %680, %654 ], [ 0, %649 ]
  %656 = phi i64 [ %681, %654 ], [ %172, %649 ]
  %657 = getelementptr inbounds double, double* %67, i64 %655
  %658 = bitcast double* %657 to <2 x double>*
  %659 = load <2 x double>, <2 x double>* %658, align 8, !tbaa !7, !alias.scope !44
  %660 = getelementptr inbounds double, double* %69, i64 %655
  %661 = bitcast double* %660 to <2 x double>*
  %662 = load <2 x double>, <2 x double>* %661, align 8, !tbaa !7, !alias.scope !47
  %663 = fmul <2 x double> %651, %662
  %664 = fdiv <2 x double> %663, %653
  %665 = fadd <2 x double> %659, %664
  %666 = getelementptr inbounds double, double* %40, i64 %655
  %667 = bitcast double* %666 to <2 x double>*
  store <2 x double> %665, <2 x double>* %667, align 8, !tbaa !7, !alias.scope !49, !noalias !51
  %668 = or i64 %655, 2
  %669 = getelementptr inbounds double, double* %67, i64 %668
  %670 = bitcast double* %669 to <2 x double>*
  %671 = load <2 x double>, <2 x double>* %670, align 8, !tbaa !7, !alias.scope !44
  %672 = getelementptr inbounds double, double* %69, i64 %668
  %673 = bitcast double* %672 to <2 x double>*
  %674 = load <2 x double>, <2 x double>* %673, align 8, !tbaa !7, !alias.scope !47
  %675 = fmul <2 x double> %651, %674
  %676 = fdiv <2 x double> %675, %653
  %677 = fadd <2 x double> %671, %676
  %678 = getelementptr inbounds double, double* %40, i64 %668
  %679 = bitcast double* %678 to <2 x double>*
  store <2 x double> %677, <2 x double>* %679, align 8, !tbaa !7, !alias.scope !49, !noalias !51
  %680 = add i64 %655, 4
  %681 = add i64 %656, -2
  %682 = icmp eq i64 %681, 0
  br i1 %682, label %683, label %654, !llvm.loop !52

; <label>:683:                                    ; preds = %654, %649
  %684 = phi i64 [ 0, %649 ], [ %680, %654 ]
  br i1 %173, label %697, label %685

; <label>:685:                                    ; preds = %683
  %686 = getelementptr inbounds double, double* %67, i64 %684
  %687 = bitcast double* %686 to <2 x double>*
  %688 = load <2 x double>, <2 x double>* %687, align 8, !tbaa !7, !alias.scope !44
  %689 = getelementptr inbounds double, double* %69, i64 %684
  %690 = bitcast double* %689 to <2 x double>*
  %691 = load <2 x double>, <2 x double>* %690, align 8, !tbaa !7, !alias.scope !47
  %692 = fmul <2 x double> %651, %691
  %693 = fdiv <2 x double> %692, %653
  %694 = fadd <2 x double> %688, %693
  %695 = getelementptr inbounds double, double* %40, i64 %684
  %696 = bitcast double* %695 to <2 x double>*
  store <2 x double> %694, <2 x double>* %696, align 8, !tbaa !7, !alias.scope !49, !noalias !51
  br label %697

; <label>:697:                                    ; preds = %683, %685
  br i1 %174, label %698, label %633

; <label>:698:                                    ; preds = %646, %720, %697
  br i1 %90, label %699, label %926

; <label>:699:                                    ; preds = %698, %717
  %700 = phi i64 [ %718, %717 ], [ 0, %698 ]
  %701 = getelementptr inbounds double, double* %69, i64 %700
  br label %702

; <label>:702:                                    ; preds = %702, %699
  %703 = phi i64 [ 0, %699 ], [ %715, %702 ]
  %704 = mul nsw i64 %703, %65
  %705 = add nsw i64 %704, %700
  %706 = getelementptr inbounds double, double* %47, i64 %705
  %707 = load double, double* %706, align 8, !tbaa !7
  %708 = load double, double* %701, align 8, !tbaa !7
  %709 = getelementptr inbounds double, double* %69, i64 %703
  %710 = load double, double* %709, align 8, !tbaa !7
  %711 = fmul double %708, %710
  %712 = fdiv double %711, %587
  %713 = fsub double %707, %712
  %714 = getelementptr inbounds double, double* %44, i64 %705
  store double %713, double* %714, align 8, !tbaa !7
  %715 = add nuw nsw i64 %703, 1
  %716 = icmp eq i64 %715, %99
  br i1 %716, label %717, label %702

; <label>:717:                                    ; preds = %702
  %718 = add nuw nsw i64 %700, 1
  %719 = icmp eq i64 %718, %100
  br i1 %719, label %926, label %699

; <label>:720:                                    ; preds = %646, %720
  %721 = phi i64 [ %739, %720 ], [ %647, %646 ]
  %722 = getelementptr inbounds double, double* %67, i64 %721
  %723 = load double, double* %722, align 8, !tbaa !7
  %724 = getelementptr inbounds double, double* %69, i64 %721
  %725 = load double, double* %724, align 8, !tbaa !7
  %726 = fmul double %532, %725
  %727 = fdiv double %726, %587
  %728 = fadd double %723, %727
  %729 = getelementptr inbounds double, double* %40, i64 %721
  store double %728, double* %729, align 8, !tbaa !7
  %730 = add nuw nsw i64 %721, 1
  %731 = getelementptr inbounds double, double* %67, i64 %730
  %732 = load double, double* %731, align 8, !tbaa !7
  %733 = getelementptr inbounds double, double* %69, i64 %730
  %734 = load double, double* %733, align 8, !tbaa !7
  %735 = fmul double %532, %734
  %736 = fdiv double %735, %587
  %737 = fadd double %732, %736
  %738 = getelementptr inbounds double, double* %40, i64 %730
  store double %737, double* %738, align 8, !tbaa !7
  %739 = add nsw i64 %721, 2
  %740 = icmp eq i64 %739, %98
  br i1 %740, label %698, label %720, !llvm.loop !53

; <label>:741:                                    ; preds = %845, %474
  %742 = phi i64 [ 0, %474 ], [ %865, %845 ]
  br i1 %142, label %752, label %743

; <label>:743:                                    ; preds = %741
  %744 = getelementptr inbounds double, double* %67, i64 %742
  %745 = bitcast double* %744 to i64*
  %746 = load i64, i64* %745, align 8, !tbaa !7
  %747 = getelementptr inbounds double, double* %40, i64 %742
  %748 = bitcast double* %747 to i64*
  store i64 %746, i64* %748, align 8, !tbaa !7
  %749 = mul nsw i64 %742, %76
  %750 = add nsw i64 %749, %179
  %751 = getelementptr inbounds double, double* %83, i64 %750
  store double 0.000000e+00, double* %751, align 8, !tbaa !7
  br label %752

; <label>:752:                                    ; preds = %743, %741, %473
  br i1 %91, label %868, label %753

; <label>:753:                                    ; preds = %752
  %754 = or i1 %143, %146
  br i1 %754, label %755, label %776

; <label>:755:                                    ; preds = %753, %844
  %756 = phi i64 [ 0, %753 ], [ %147, %844 ]
  %757 = sub nsw i64 %71, %756
  %758 = xor i64 %756, -1
  %759 = add nsw i64 %758, %71
  %760 = and i64 %757, 7
  %761 = icmp eq i64 %760, 0
  br i1 %761, label %773, label %762

; <label>:762:                                    ; preds = %755, %762
  %763 = phi i64 [ %770, %762 ], [ %756, %755 ]
  %764 = phi i64 [ %771, %762 ], [ %760, %755 ]
  %765 = getelementptr inbounds double, double* %47, i64 %763
  %766 = bitcast double* %765 to i64*
  %767 = load i64, i64* %766, align 8, !tbaa !7
  %768 = getelementptr inbounds double, double* %44, i64 %763
  %769 = bitcast double* %768 to i64*
  store i64 %767, i64* %769, align 8, !tbaa !7
  %770 = add nuw nsw i64 %763, 1
  %771 = add i64 %764, -1
  %772 = icmp eq i64 %771, 0
  br i1 %772, label %773, label %762, !llvm.loop !54

; <label>:773:                                    ; preds = %762, %755
  %774 = phi i64 [ %756, %755 ], [ %770, %762 ]
  %775 = icmp ult i64 %759, 7
  br i1 %775, label %868, label %875

; <label>:776:                                    ; preds = %753
  br i1 %149, label %826, label %777

; <label>:777:                                    ; preds = %776, %777
  %778 = phi i64 [ %823, %777 ], [ 0, %776 ]
  %779 = phi i64 [ %824, %777 ], [ %150, %776 ]
  %780 = getelementptr inbounds double, double* %47, i64 %778
  %781 = bitcast double* %780 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 8, !tbaa !7, !alias.scope !55
  %783 = getelementptr inbounds double, double* %780, i64 2
  %784 = bitcast double* %783 to <2 x i64>*
  %785 = load <2 x i64>, <2 x i64>* %784, align 8, !tbaa !7, !alias.scope !55
  %786 = getelementptr inbounds double, double* %44, i64 %778
  %787 = bitcast double* %786 to <2 x i64>*
  store <2 x i64> %782, <2 x i64>* %787, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %788 = getelementptr inbounds double, double* %786, i64 2
  %789 = bitcast double* %788 to <2 x i64>*
  store <2 x i64> %785, <2 x i64>* %789, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %790 = or i64 %778, 4
  %791 = getelementptr inbounds double, double* %47, i64 %790
  %792 = bitcast double* %791 to <2 x i64>*
  %793 = load <2 x i64>, <2 x i64>* %792, align 8, !tbaa !7, !alias.scope !55
  %794 = getelementptr inbounds double, double* %791, i64 2
  %795 = bitcast double* %794 to <2 x i64>*
  %796 = load <2 x i64>, <2 x i64>* %795, align 8, !tbaa !7, !alias.scope !55
  %797 = getelementptr inbounds double, double* %44, i64 %790
  %798 = bitcast double* %797 to <2 x i64>*
  store <2 x i64> %793, <2 x i64>* %798, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %799 = getelementptr inbounds double, double* %797, i64 2
  %800 = bitcast double* %799 to <2 x i64>*
  store <2 x i64> %796, <2 x i64>* %800, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %801 = or i64 %778, 8
  %802 = getelementptr inbounds double, double* %47, i64 %801
  %803 = bitcast double* %802 to <2 x i64>*
  %804 = load <2 x i64>, <2 x i64>* %803, align 8, !tbaa !7, !alias.scope !55
  %805 = getelementptr inbounds double, double* %802, i64 2
  %806 = bitcast double* %805 to <2 x i64>*
  %807 = load <2 x i64>, <2 x i64>* %806, align 8, !tbaa !7, !alias.scope !55
  %808 = getelementptr inbounds double, double* %44, i64 %801
  %809 = bitcast double* %808 to <2 x i64>*
  store <2 x i64> %804, <2 x i64>* %809, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %810 = getelementptr inbounds double, double* %808, i64 2
  %811 = bitcast double* %810 to <2 x i64>*
  store <2 x i64> %807, <2 x i64>* %811, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %812 = or i64 %778, 12
  %813 = getelementptr inbounds double, double* %47, i64 %812
  %814 = bitcast double* %813 to <2 x i64>*
  %815 = load <2 x i64>, <2 x i64>* %814, align 8, !tbaa !7, !alias.scope !55
  %816 = getelementptr inbounds double, double* %813, i64 2
  %817 = bitcast double* %816 to <2 x i64>*
  %818 = load <2 x i64>, <2 x i64>* %817, align 8, !tbaa !7, !alias.scope !55
  %819 = getelementptr inbounds double, double* %44, i64 %812
  %820 = bitcast double* %819 to <2 x i64>*
  store <2 x i64> %815, <2 x i64>* %820, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %821 = getelementptr inbounds double, double* %819, i64 2
  %822 = bitcast double* %821 to <2 x i64>*
  store <2 x i64> %818, <2 x i64>* %822, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %823 = add i64 %778, 16
  %824 = add i64 %779, -4
  %825 = icmp eq i64 %824, 0
  br i1 %825, label %826, label %777, !llvm.loop !60

; <label>:826:                                    ; preds = %777, %776
  %827 = phi i64 [ 0, %776 ], [ %823, %777 ]
  br i1 %151, label %844, label %828

; <label>:828:                                    ; preds = %826, %828
  %829 = phi i64 [ %841, %828 ], [ %827, %826 ]
  %830 = phi i64 [ %842, %828 ], [ %148, %826 ]
  %831 = getelementptr inbounds double, double* %47, i64 %829
  %832 = bitcast double* %831 to <2 x i64>*
  %833 = load <2 x i64>, <2 x i64>* %832, align 8, !tbaa !7, !alias.scope !55
  %834 = getelementptr inbounds double, double* %831, i64 2
  %835 = bitcast double* %834 to <2 x i64>*
  %836 = load <2 x i64>, <2 x i64>* %835, align 8, !tbaa !7, !alias.scope !55
  %837 = getelementptr inbounds double, double* %44, i64 %829
  %838 = bitcast double* %837 to <2 x i64>*
  store <2 x i64> %833, <2 x i64>* %838, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %839 = getelementptr inbounds double, double* %837, i64 2
  %840 = bitcast double* %839 to <2 x i64>*
  store <2 x i64> %836, <2 x i64>* %840, align 8, !tbaa !7, !alias.scope !58, !noalias !55
  %841 = add i64 %829, 4
  %842 = add i64 %830, -1
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %844, label %828, !llvm.loop !61

; <label>:844:                                    ; preds = %828, %826
  br i1 %152, label %868, label %755

; <label>:845:                                    ; preds = %474, %845
  %846 = phi i64 [ %865, %845 ], [ 0, %474 ]
  %847 = phi i64 [ %866, %845 ], [ %141, %474 ]
  %848 = getelementptr inbounds double, double* %67, i64 %846
  %849 = bitcast double* %848 to i64*
  %850 = load i64, i64* %849, align 8, !tbaa !7
  %851 = getelementptr inbounds double, double* %40, i64 %846
  %852 = bitcast double* %851 to i64*
  store i64 %850, i64* %852, align 8, !tbaa !7
  %853 = mul nsw i64 %846, %76
  %854 = add nsw i64 %853, %179
  %855 = getelementptr inbounds double, double* %83, i64 %854
  store double 0.000000e+00, double* %855, align 8, !tbaa !7
  %856 = or i64 %846, 1
  %857 = getelementptr inbounds double, double* %67, i64 %856
  %858 = bitcast double* %857 to i64*
  %859 = load i64, i64* %858, align 8, !tbaa !7
  %860 = getelementptr inbounds double, double* %40, i64 %856
  %861 = bitcast double* %860 to i64*
  store i64 %859, i64* %861, align 8, !tbaa !7
  %862 = mul nsw i64 %856, %76
  %863 = add nsw i64 %862, %179
  %864 = getelementptr inbounds double, double* %83, i64 %863
  store double 0.000000e+00, double* %864, align 8, !tbaa !7
  %865 = add nuw nsw i64 %846, 2
  %866 = add i64 %847, -2
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %741, label %845

; <label>:868:                                    ; preds = %773, %875, %844, %752
  %869 = load i64, i64* bitcast (double* @R_NaReal to i64*), align 8, !tbaa !7
  %870 = getelementptr inbounds double, double* %78, i64 %179
  %871 = bitcast double* %870 to i64*
  store i64 %869, i64* %871, align 8, !tbaa !7
  %872 = load i64, i64* bitcast (double* @R_NaReal to i64*), align 8, !tbaa !7
  %873 = getelementptr inbounds double, double* %80, i64 %179
  %874 = bitcast double* %873 to i64*
  store i64 %872, i64* %874, align 8, !tbaa !7
  br label %926

; <label>:875:                                    ; preds = %773, %875
  %876 = phi i64 [ %924, %875 ], [ %774, %773 ]
  %877 = getelementptr inbounds double, double* %47, i64 %876
  %878 = bitcast double* %877 to i64*
  %879 = load i64, i64* %878, align 8, !tbaa !7
  %880 = getelementptr inbounds double, double* %44, i64 %876
  %881 = bitcast double* %880 to i64*
  store i64 %879, i64* %881, align 8, !tbaa !7
  %882 = add nuw nsw i64 %876, 1
  %883 = getelementptr inbounds double, double* %47, i64 %882
  %884 = bitcast double* %883 to i64*
  %885 = load i64, i64* %884, align 8, !tbaa !7
  %886 = getelementptr inbounds double, double* %44, i64 %882
  %887 = bitcast double* %886 to i64*
  store i64 %885, i64* %887, align 8, !tbaa !7
  %888 = add nsw i64 %876, 2
  %889 = getelementptr inbounds double, double* %47, i64 %888
  %890 = bitcast double* %889 to i64*
  %891 = load i64, i64* %890, align 8, !tbaa !7
  %892 = getelementptr inbounds double, double* %44, i64 %888
  %893 = bitcast double* %892 to i64*
  store i64 %891, i64* %893, align 8, !tbaa !7
  %894 = add nsw i64 %876, 3
  %895 = getelementptr inbounds double, double* %47, i64 %894
  %896 = bitcast double* %895 to i64*
  %897 = load i64, i64* %896, align 8, !tbaa !7
  %898 = getelementptr inbounds double, double* %44, i64 %894
  %899 = bitcast double* %898 to i64*
  store i64 %897, i64* %899, align 8, !tbaa !7
  %900 = add nsw i64 %876, 4
  %901 = getelementptr inbounds double, double* %47, i64 %900
  %902 = bitcast double* %901 to i64*
  %903 = load i64, i64* %902, align 8, !tbaa !7
  %904 = getelementptr inbounds double, double* %44, i64 %900
  %905 = bitcast double* %904 to i64*
  store i64 %903, i64* %905, align 8, !tbaa !7
  %906 = add nsw i64 %876, 5
  %907 = getelementptr inbounds double, double* %47, i64 %906
  %908 = bitcast double* %907 to i64*
  %909 = load i64, i64* %908, align 8, !tbaa !7
  %910 = getelementptr inbounds double, double* %44, i64 %906
  %911 = bitcast double* %910 to i64*
  store i64 %909, i64* %911, align 8, !tbaa !7
  %912 = add nsw i64 %876, 6
  %913 = getelementptr inbounds double, double* %47, i64 %912
  %914 = bitcast double* %913 to i64*
  %915 = load i64, i64* %914, align 8, !tbaa !7
  %916 = getelementptr inbounds double, double* %44, i64 %912
  %917 = bitcast double* %916 to i64*
  store i64 %915, i64* %917, align 8, !tbaa !7
  %918 = add nsw i64 %876, 7
  %919 = getelementptr inbounds double, double* %47, i64 %918
  %920 = bitcast double* %919 to i64*
  %921 = load i64, i64* %920, align 8, !tbaa !7
  %922 = getelementptr inbounds double, double* %44, i64 %918
  %923 = bitcast double* %922 to i64*
  store i64 %921, i64* %923, align 8, !tbaa !7
  %924 = add nsw i64 %876, 8
  %925 = icmp eq i64 %924, %71
  br i1 %925, label %868, label %875, !llvm.loop !62

; <label>:926:                                    ; preds = %717, %628, %624, %698, %868
  %927 = add nuw nsw i64 %179, 1
  %928 = icmp eq i64 %927, %101
  br i1 %928, label %227, label %178

; <label>:929:                                    ; preds = %1421
  br i1 %86, label %930, label %1571

; <label>:930:                                    ; preds = %929
  %931 = icmp sgt i32 %32, 0
  %932 = zext i32 %32 to i64
  %933 = zext i32 %32 to i64
  %934 = zext i32 %32 to i64
  %935 = zext i32 %32 to i64
  %936 = zext i32 %32 to i64
  %937 = zext i32 %31 to i64
  %938 = add nsw i64 %932, -1
  %939 = and i64 %932, 1
  %940 = icmp eq i64 %938, 0
  %941 = sub nsw i64 %932, %939
  %942 = icmp eq i64 %939, 0
  %943 = and i64 %932, 1
  %944 = icmp eq i64 %938, 0
  %945 = sub nsw i64 %932, %943
  %946 = icmp eq i64 %943, 0
  br label %1423

; <label>:947:                                    ; preds = %230, %1421
  %948 = phi i64 [ %76, %230 ], [ %949, %1421 ]
  %949 = add i64 %948, -1
  %950 = getelementptr inbounds double, double* %78, i64 %949
  %951 = load double, double* %950, align 8, !tbaa !7
  %952 = fcmp ord double %951, 0.000000e+00
  br i1 %952, label %955, label %953

; <label>:953:                                    ; preds = %947
  br i1 %232, label %954, label %1076

; <label>:954:                                    ; preds = %953
  br i1 %247, label %1014, label %982

; <label>:955:                                    ; preds = %947
  %956 = fdiv double 1.000000e+00, %951
  br i1 %232, label %957, label %1076

; <label>:957:                                    ; preds = %955
  %958 = getelementptr inbounds double, double* %80, i64 %949
  br i1 %251, label %1003, label %959

; <label>:959:                                    ; preds = %957, %959
  %960 = phi i64 [ %979, %959 ], [ 0, %957 ]
  %961 = phi i64 [ %980, %959 ], [ %252, %957 ]
  %962 = getelementptr inbounds double, double* %34, i64 %960
  %963 = load double, double* %962, align 8, !tbaa !7
  %964 = load double, double* %958, align 8, !tbaa !7
  %965 = fmul double %963, %964
  %966 = fmul double %956, %965
  %967 = mul nsw i64 %960, %76
  %968 = add nsw i64 %967, %949
  %969 = getelementptr inbounds double, double* %229, i64 %968
  store double %966, double* %969, align 8, !tbaa !7
  %970 = or i64 %960, 1
  %971 = getelementptr inbounds double, double* %34, i64 %970
  %972 = load double, double* %971, align 8, !tbaa !7
  %973 = load double, double* %958, align 8, !tbaa !7
  %974 = fmul double %972, %973
  %975 = fmul double %956, %974
  %976 = mul nsw i64 %970, %76
  %977 = add nsw i64 %976, %949
  %978 = getelementptr inbounds double, double* %229, i64 %977
  store double %975, double* %978, align 8, !tbaa !7
  %979 = add nuw nsw i64 %960, 2
  %980 = add i64 %961, -2
  %981 = icmp eq i64 %980, 0
  br i1 %981, label %1003, label %959

; <label>:982:                                    ; preds = %954, %982
  %983 = phi i64 [ %1000, %982 ], [ 0, %954 ]
  %984 = phi i64 [ %1001, %982 ], [ %248, %954 ]
  %985 = mul nsw i64 %983, %76
  %986 = add nsw i64 %985, %949
  %987 = getelementptr inbounds double, double* %229, i64 %986
  store double 0.000000e+00, double* %987, align 8, !tbaa !7
  %988 = or i64 %983, 1
  %989 = mul nsw i64 %988, %76
  %990 = add nsw i64 %989, %949
  %991 = getelementptr inbounds double, double* %229, i64 %990
  store double 0.000000e+00, double* %991, align 8, !tbaa !7
  %992 = or i64 %983, 2
  %993 = mul nsw i64 %992, %76
  %994 = add nsw i64 %993, %949
  %995 = getelementptr inbounds double, double* %229, i64 %994
  store double 0.000000e+00, double* %995, align 8, !tbaa !7
  %996 = or i64 %983, 3
  %997 = mul nsw i64 %996, %76
  %998 = add nsw i64 %997, %949
  %999 = getelementptr inbounds double, double* %229, i64 %998
  store double 0.000000e+00, double* %999, align 8, !tbaa !7
  %1000 = add nuw nsw i64 %983, 4
  %1001 = add i64 %984, -4
  %1002 = icmp eq i64 %1001, 0
  br i1 %1002, label %1014, label %982

; <label>:1003:                                   ; preds = %959, %957
  %1004 = phi i64 [ 0, %957 ], [ %979, %959 ]
  br i1 %253, label %1025, label %1005

; <label>:1005:                                   ; preds = %1003
  %1006 = getelementptr inbounds double, double* %34, i64 %1004
  %1007 = load double, double* %1006, align 8, !tbaa !7
  %1008 = load double, double* %958, align 8, !tbaa !7
  %1009 = fmul double %1007, %1008
  %1010 = fmul double %956, %1009
  %1011 = mul nsw i64 %1004, %76
  %1012 = add nsw i64 %1011, %949
  %1013 = getelementptr inbounds double, double* %229, i64 %1012
  store double %1010, double* %1013, align 8, !tbaa !7
  br label %1025

; <label>:1014:                                   ; preds = %982, %954
  %1015 = phi i64 [ 0, %954 ], [ %1000, %982 ]
  br i1 %249, label %1025, label %1016

; <label>:1016:                                   ; preds = %1014, %1016
  %1017 = phi i64 [ %1022, %1016 ], [ %1015, %1014 ]
  %1018 = phi i64 [ %1023, %1016 ], [ %246, %1014 ]
  %1019 = mul nsw i64 %1017, %76
  %1020 = add nsw i64 %1019, %949
  %1021 = getelementptr inbounds double, double* %229, i64 %1020
  store double 0.000000e+00, double* %1021, align 8, !tbaa !7
  %1022 = add nuw nsw i64 %1017, 1
  %1023 = add i64 %1018, -1
  %1024 = icmp eq i64 %1023, 0
  br i1 %1024, label %1025, label %1016, !llvm.loop !63

; <label>:1025:                                   ; preds = %1014, %1016, %1005, %1003
  %1026 = phi double [ %956, %1003 ], [ %956, %1005 ], [ 0.000000e+00, %1016 ], [ 0.000000e+00, %1014 ]
  br i1 %232, label %1027, label %1076

; <label>:1027:                                   ; preds = %1025, %1073
  %1028 = phi i64 [ %1074, %1073 ], [ 0, %1025 ]
  %1029 = getelementptr inbounds double, double* %34, i64 %1028
  %1030 = mul nsw i64 %1028, %76
  %1031 = add nsw i64 %1030, %949
  %1032 = trunc i64 %1031 to i32
  br i1 %255, label %1060, label %1033

; <label>:1033:                                   ; preds = %1027, %1033
  %1034 = phi i64 [ %1057, %1033 ], [ 0, %1027 ]
  %1035 = phi i64 [ %1058, %1033 ], [ %256, %1027 ]
  %1036 = load double, double* %1029, align 8, !tbaa !7
  %1037 = getelementptr inbounds double, double* %34, i64 %1034
  %1038 = load double, double* %1037, align 8, !tbaa !7
  %1039 = fmul double %1036, %1038
  %1040 = fmul double %1026, %1039
  %1041 = trunc i64 %1034 to i32
  %1042 = mul nsw i32 %59, %1041
  %1043 = add nsw i32 %1042, %1032
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds double, double* %64, i64 %1044
  store double %1040, double* %1045, align 8, !tbaa !7
  %1046 = or i64 %1034, 1
  %1047 = load double, double* %1029, align 8, !tbaa !7
  %1048 = getelementptr inbounds double, double* %34, i64 %1046
  %1049 = load double, double* %1048, align 8, !tbaa !7
  %1050 = fmul double %1047, %1049
  %1051 = fmul double %1026, %1050
  %1052 = trunc i64 %1046 to i32
  %1053 = mul nsw i32 %59, %1052
  %1054 = add nsw i32 %1053, %1032
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds double, double* %64, i64 %1055
  store double %1051, double* %1056, align 8, !tbaa !7
  %1057 = add nuw nsw i64 %1034, 2
  %1058 = add i64 %1035, -2
  %1059 = icmp eq i64 %1058, 0
  br i1 %1059, label %1060, label %1033

; <label>:1060:                                   ; preds = %1033, %1027
  %1061 = phi i64 [ 0, %1027 ], [ %1057, %1033 ]
  br i1 %257, label %1073, label %1062

; <label>:1062:                                   ; preds = %1060
  %1063 = load double, double* %1029, align 8, !tbaa !7
  %1064 = getelementptr inbounds double, double* %34, i64 %1061
  %1065 = load double, double* %1064, align 8, !tbaa !7
  %1066 = fmul double %1063, %1065
  %1067 = fmul double %1026, %1066
  %1068 = trunc i64 %1061 to i32
  %1069 = mul nsw i32 %59, %1068
  %1070 = add nsw i32 %1069, %1032
  %1071 = sext i32 %1070 to i64
  %1072 = getelementptr inbounds double, double* %64, i64 %1071
  store double %1067, double* %1072, align 8, !tbaa !7
  br label %1073

; <label>:1073:                                   ; preds = %1060, %1062
  %1074 = add nuw nsw i64 %1028, 1
  %1075 = icmp eq i64 %1074, %235
  br i1 %1075, label %1076, label %1027

; <label>:1076:                                   ; preds = %1073, %955, %953, %1025
  %1077 = phi double [ %1026, %1025 ], [ 0.000000e+00, %953 ], [ %956, %955 ], [ %1026, %1073 ]
  %1078 = icmp slt i64 %949, %233
  br i1 %1078, label %1079, label %1366

; <label>:1079:                                   ; preds = %1076
  br i1 %232, label %1080, label %1421

; <label>:1080:                                   ; preds = %1079, %1128
  %1081 = phi i64 [ %1129, %1128 ], [ 0, %1079 ]
  %1082 = mul nsw i64 %1081, %76
  %1083 = add nsw i64 %1082, %949
  %1084 = getelementptr inbounds double, double* %83, i64 %1083
  br i1 %259, label %1114, label %1085

; <label>:1085:                                   ; preds = %1080, %1085
  %1086 = phi i64 [ %1111, %1085 ], [ 0, %1080 ]
  %1087 = phi i64 [ %1112, %1085 ], [ %260, %1080 ]
  %1088 = icmp eq i64 %1081, %1086
  %1089 = uitofp i1 %1088 to double
  %1090 = load double, double* %1084, align 8, !tbaa !7
  %1091 = getelementptr inbounds double, double* %34, i64 %1086
  %1092 = load double, double* %1091, align 8, !tbaa !7
  %1093 = fmul double %1090, %1092
  %1094 = fmul double %1077, %1093
  %1095 = fsub double %1089, %1094
  %1096 = mul nsw i64 %1086, %65
  %1097 = add nsw i64 %1096, %1081
  %1098 = getelementptr inbounds double, double* %73, i64 %1097
  store double %1095, double* %1098, align 8, !tbaa !7
  %1099 = or i64 %1086, 1
  %1100 = icmp eq i64 %1081, %1099
  %1101 = uitofp i1 %1100 to double
  %1102 = load double, double* %1084, align 8, !tbaa !7
  %1103 = getelementptr inbounds double, double* %34, i64 %1099
  %1104 = load double, double* %1103, align 8, !tbaa !7
  %1105 = fmul double %1102, %1104
  %1106 = fmul double %1077, %1105
  %1107 = fsub double %1101, %1106
  %1108 = mul nsw i64 %1099, %65
  %1109 = add nsw i64 %1108, %1081
  %1110 = getelementptr inbounds double, double* %73, i64 %1109
  store double %1107, double* %1110, align 8, !tbaa !7
  %1111 = add nuw nsw i64 %1086, 2
  %1112 = add i64 %1087, -2
  %1113 = icmp eq i64 %1112, 0
  br i1 %1113, label %1114, label %1085

; <label>:1114:                                   ; preds = %1085, %1080
  %1115 = phi i64 [ 0, %1080 ], [ %1111, %1085 ]
  br i1 %261, label %1128, label %1116

; <label>:1116:                                   ; preds = %1114
  %1117 = icmp eq i64 %1081, %1115
  %1118 = uitofp i1 %1117 to double
  %1119 = load double, double* %1084, align 8, !tbaa !7
  %1120 = getelementptr inbounds double, double* %34, i64 %1115
  %1121 = load double, double* %1120, align 8, !tbaa !7
  %1122 = fmul double %1119, %1121
  %1123 = fmul double %1077, %1122
  %1124 = fsub double %1118, %1123
  %1125 = mul nsw i64 %1115, %65
  %1126 = add nsw i64 %1125, %1081
  %1127 = getelementptr inbounds double, double* %73, i64 %1126
  store double %1124, double* %1127, align 8, !tbaa !7
  br label %1128

; <label>:1128:                                   ; preds = %1114, %1116
  %1129 = add nuw nsw i64 %1081, 1
  %1130 = icmp eq i64 %1129, %236
  br i1 %1130, label %1131, label %1080

; <label>:1131:                                   ; preds = %1128
  br i1 %232, label %1132, label %1421

; <label>:1132:                                   ; preds = %1131, %1134
  %1133 = phi i64 [ %1135, %1134 ], [ 0, %1131 ]
  br label %1137

; <label>:1134:                                   ; preds = %1154
  %1135 = add nuw nsw i64 %1133, 1
  %1136 = icmp eq i64 %1135, %238
  br i1 %1136, label %1186, label %1132

; <label>:1137:                                   ; preds = %1154, %1132
  %1138 = phi i64 [ 0, %1132 ], [ %1158, %1154 ]
  %1139 = mul nsw i64 %1138, %65
  br i1 %263, label %1140, label %1160

; <label>:1140:                                   ; preds = %1160, %1137
  %1141 = phi double [ undef, %1137 ], [ %1182, %1160 ]
  %1142 = phi i64 [ 0, %1137 ], [ %1183, %1160 ]
  %1143 = phi double [ 0.000000e+00, %1137 ], [ %1182, %1160 ]
  br i1 %265, label %1154, label %1144

; <label>:1144:                                   ; preds = %1140
  %1145 = mul nsw i64 %1142, %65
  %1146 = add nsw i64 %1145, %1133
  %1147 = getelementptr inbounds double, double* %35, i64 %1146
  %1148 = load double, double* %1147, align 8, !tbaa !7
  %1149 = add nsw i64 %1142, %1139
  %1150 = getelementptr inbounds double, double* %73, i64 %1149
  %1151 = load double, double* %1150, align 8, !tbaa !7
  %1152 = fmul double %1148, %1151
  %1153 = fadd double %1143, %1152
  br label %1154

; <label>:1154:                                   ; preds = %1140, %1144
  %1155 = phi double [ %1141, %1140 ], [ %1153, %1144 ]
  %1156 = add nsw i64 %1139, %1133
  %1157 = getelementptr inbounds double, double* %85, i64 %1156
  store double %1155, double* %1157, align 8, !tbaa !7
  %1158 = add nuw nsw i64 %1138, 1
  %1159 = icmp eq i64 %1158, %237
  br i1 %1159, label %1134, label %1137

; <label>:1160:                                   ; preds = %1137, %1160
  %1161 = phi i64 [ %1183, %1160 ], [ 0, %1137 ]
  %1162 = phi double [ %1182, %1160 ], [ 0.000000e+00, %1137 ]
  %1163 = phi i64 [ %1184, %1160 ], [ %264, %1137 ]
  %1164 = mul nsw i64 %1161, %65
  %1165 = add nsw i64 %1164, %1133
  %1166 = getelementptr inbounds double, double* %35, i64 %1165
  %1167 = load double, double* %1166, align 8, !tbaa !7
  %1168 = add nsw i64 %1161, %1139
  %1169 = getelementptr inbounds double, double* %73, i64 %1168
  %1170 = load double, double* %1169, align 8, !tbaa !7
  %1171 = fmul double %1167, %1170
  %1172 = fadd double %1162, %1171
  %1173 = or i64 %1161, 1
  %1174 = mul nsw i64 %1173, %65
  %1175 = add nsw i64 %1174, %1133
  %1176 = getelementptr inbounds double, double* %35, i64 %1175
  %1177 = load double, double* %1176, align 8, !tbaa !7
  %1178 = add nsw i64 %1173, %1139
  %1179 = getelementptr inbounds double, double* %73, i64 %1178
  %1180 = load double, double* %1179, align 8, !tbaa !7
  %1181 = fmul double %1177, %1180
  %1182 = fadd double %1172, %1181
  %1183 = add nuw nsw i64 %1161, 2
  %1184 = add i64 %1163, -2
  %1185 = icmp eq i64 %1184, 0
  br i1 %1185, label %1140, label %1160

; <label>:1186:                                   ; preds = %1134
  br i1 %232, label %1187, label %1421

; <label>:1187:                                   ; preds = %1186, %1230
  %1188 = phi i64 [ %1237, %1230 ], [ 0, %1186 ]
  %1189 = mul nsw i64 %1188, %65
  br i1 %267, label %1216, label %1190

; <label>:1190:                                   ; preds = %1187, %1190
  %1191 = phi i64 [ %1213, %1190 ], [ 0, %1187 ]
  %1192 = phi double [ %1212, %1190 ], [ 0.000000e+00, %1187 ]
  %1193 = phi i64 [ %1214, %1190 ], [ %268, %1187 ]
  %1194 = add nsw i64 %1191, %1189
  %1195 = getelementptr inbounds double, double* %85, i64 %1194
  %1196 = load double, double* %1195, align 8, !tbaa !7
  %1197 = mul nsw i64 %1191, %76
  %1198 = add nsw i64 %948, %1197
  %1199 = getelementptr inbounds double, double* %229, i64 %1198
  %1200 = load double, double* %1199, align 8, !tbaa !7
  %1201 = fmul double %1196, %1200
  %1202 = fadd double %1192, %1201
  %1203 = or i64 %1191, 1
  %1204 = add nsw i64 %1203, %1189
  %1205 = getelementptr inbounds double, double* %85, i64 %1204
  %1206 = load double, double* %1205, align 8, !tbaa !7
  %1207 = mul nsw i64 %1203, %76
  %1208 = add nsw i64 %948, %1207
  %1209 = getelementptr inbounds double, double* %229, i64 %1208
  %1210 = load double, double* %1209, align 8, !tbaa !7
  %1211 = fmul double %1206, %1210
  %1212 = fadd double %1202, %1211
  %1213 = add nuw nsw i64 %1191, 2
  %1214 = add i64 %1193, -2
  %1215 = icmp eq i64 %1214, 0
  br i1 %1215, label %1216, label %1190

; <label>:1216:                                   ; preds = %1190, %1187
  %1217 = phi double [ undef, %1187 ], [ %1212, %1190 ]
  %1218 = phi i64 [ 0, %1187 ], [ %1213, %1190 ]
  %1219 = phi double [ 0.000000e+00, %1187 ], [ %1212, %1190 ]
  br i1 %269, label %1230, label %1220

; <label>:1220:                                   ; preds = %1216
  %1221 = add nsw i64 %1218, %1189
  %1222 = getelementptr inbounds double, double* %85, i64 %1221
  %1223 = load double, double* %1222, align 8, !tbaa !7
  %1224 = mul nsw i64 %1218, %76
  %1225 = add nsw i64 %948, %1224
  %1226 = getelementptr inbounds double, double* %229, i64 %1225
  %1227 = load double, double* %1226, align 8, !tbaa !7
  %1228 = fmul double %1223, %1227
  %1229 = fadd double %1219, %1228
  br label %1230

; <label>:1230:                                   ; preds = %1216, %1220
  %1231 = phi double [ %1217, %1216 ], [ %1229, %1220 ]
  %1232 = mul nsw i64 %1188, %76
  %1233 = add nsw i64 %1232, %949
  %1234 = getelementptr inbounds double, double* %229, i64 %1233
  %1235 = load double, double* %1234, align 8, !tbaa !7
  %1236 = fadd double %1231, %1235
  store double %1236, double* %1234, align 8, !tbaa !7
  %1237 = add nuw nsw i64 %1188, 1
  %1238 = icmp eq i64 %1237, %239
  br i1 %1238, label %1239, label %1187

; <label>:1239:                                   ; preds = %1230
  br i1 %232, label %1240, label %1421

; <label>:1240:                                   ; preds = %1239
  %1241 = trunc i64 %948 to i32
  br label %1243

; <label>:1242:                                   ; preds = %1304
  br i1 %232, label %1307, label %1421

; <label>:1243:                                   ; preds = %1240, %1304
  %1244 = phi i64 [ 0, %1240 ], [ %1305, %1304 ]
  %1245 = mul nsw i64 %1244, %65
  br label %1246

; <label>:1246:                                   ; preds = %1297, %1243
  %1247 = phi i64 [ %1302, %1297 ], [ 0, %1243 ]
  %1248 = trunc i64 %1247 to i32
  %1249 = mul i32 %59, %1248
  %1250 = add i32 %1249, %1241
  br i1 %271, label %1281, label %1251

; <label>:1251:                                   ; preds = %1246, %1251
  %1252 = phi i64 [ %1278, %1251 ], [ 0, %1246 ]
  %1253 = phi double [ %1277, %1251 ], [ 0.000000e+00, %1246 ]
  %1254 = phi i64 [ %1279, %1251 ], [ %272, %1246 ]
  %1255 = add nsw i64 %1252, %1245
  %1256 = getelementptr inbounds double, double* %85, i64 %1255
  %1257 = load double, double* %1256, align 8, !tbaa !7
  %1258 = trunc i64 %1252 to i32
  %1259 = mul i32 %31, %1258
  %1260 = add i32 %1250, %1259
  %1261 = sext i32 %1260 to i64
  %1262 = getelementptr inbounds double, double* %64, i64 %1261
  %1263 = load double, double* %1262, align 8, !tbaa !7
  %1264 = fmul double %1257, %1263
  %1265 = fadd double %1253, %1264
  %1266 = or i64 %1252, 1
  %1267 = add nsw i64 %1266, %1245
  %1268 = getelementptr inbounds double, double* %85, i64 %1267
  %1269 = load double, double* %1268, align 8, !tbaa !7
  %1270 = trunc i64 %1266 to i32
  %1271 = mul i32 %31, %1270
  %1272 = add i32 %1250, %1271
  %1273 = sext i32 %1272 to i64
  %1274 = getelementptr inbounds double, double* %64, i64 %1273
  %1275 = load double, double* %1274, align 8, !tbaa !7
  %1276 = fmul double %1269, %1275
  %1277 = fadd double %1265, %1276
  %1278 = add nuw nsw i64 %1252, 2
  %1279 = add i64 %1254, -2
  %1280 = icmp eq i64 %1279, 0
  br i1 %1280, label %1281, label %1251

; <label>:1281:                                   ; preds = %1251, %1246
  %1282 = phi double [ undef, %1246 ], [ %1277, %1251 ]
  %1283 = phi i64 [ 0, %1246 ], [ %1278, %1251 ]
  %1284 = phi double [ 0.000000e+00, %1246 ], [ %1277, %1251 ]
  br i1 %273, label %1297, label %1285

; <label>:1285:                                   ; preds = %1281
  %1286 = add nsw i64 %1283, %1245
  %1287 = getelementptr inbounds double, double* %85, i64 %1286
  %1288 = load double, double* %1287, align 8, !tbaa !7
  %1289 = trunc i64 %1283 to i32
  %1290 = mul i32 %31, %1289
  %1291 = add i32 %1250, %1290
  %1292 = sext i32 %1291 to i64
  %1293 = getelementptr inbounds double, double* %64, i64 %1292
  %1294 = load double, double* %1293, align 8, !tbaa !7
  %1295 = fmul double %1288, %1294
  %1296 = fadd double %1284, %1295
  br label %1297

; <label>:1297:                                   ; preds = %1281, %1285
  %1298 = phi double [ %1282, %1281 ], [ %1296, %1285 ]
  %1299 = mul nsw i64 %1247, %65
  %1300 = add nsw i64 %1299, %1244
  %1301 = getelementptr inbounds double, double* %73, i64 %1300
  store double %1298, double* %1301, align 8, !tbaa !7
  %1302 = add nuw nsw i64 %1247, 1
  %1303 = icmp eq i64 %1302, %240
  br i1 %1303, label %1304, label %1246

; <label>:1304:                                   ; preds = %1297
  %1305 = add nuw nsw i64 %1244, 1
  %1306 = icmp eq i64 %1305, %241
  br i1 %1306, label %1242, label %1243

; <label>:1307:                                   ; preds = %1242, %1363
  %1308 = phi i64 [ %1364, %1363 ], [ 0, %1242 ]
  %1309 = mul nsw i64 %1308, %76
  %1310 = add nsw i64 %1309, %949
  br label %1311

; <label>:1311:                                   ; preds = %1354, %1307
  %1312 = phi i64 [ %1361, %1354 ], [ 0, %1307 ]
  %1313 = mul nsw i64 %1312, %65
  br i1 %275, label %1340, label %1314

; <label>:1314:                                   ; preds = %1311, %1314
  %1315 = phi i64 [ %1337, %1314 ], [ 0, %1311 ]
  %1316 = phi double [ %1336, %1314 ], [ 0.000000e+00, %1311 ]
  %1317 = phi i64 [ %1338, %1314 ], [ %276, %1311 ]
  %1318 = mul nsw i64 %1315, %65
  %1319 = add nsw i64 %1318, %1308
  %1320 = getelementptr inbounds double, double* %73, i64 %1319
  %1321 = load double, double* %1320, align 8, !tbaa !7
  %1322 = add nsw i64 %1315, %1313
  %1323 = getelementptr inbounds double, double* %85, i64 %1322
  %1324 = load double, double* %1323, align 8, !tbaa !7
  %1325 = fmul double %1321, %1324
  %1326 = fadd double %1316, %1325
  %1327 = or i64 %1315, 1
  %1328 = mul nsw i64 %1327, %65
  %1329 = add nsw i64 %1328, %1308
  %1330 = getelementptr inbounds double, double* %73, i64 %1329
  %1331 = load double, double* %1330, align 8, !tbaa !7
  %1332 = add nsw i64 %1327, %1313
  %1333 = getelementptr inbounds double, double* %85, i64 %1332
  %1334 = load double, double* %1333, align 8, !tbaa !7
  %1335 = fmul double %1331, %1334
  %1336 = fadd double %1326, %1335
  %1337 = add nuw nsw i64 %1315, 2
  %1338 = add i64 %1317, -2
  %1339 = icmp eq i64 %1338, 0
  br i1 %1339, label %1340, label %1314

; <label>:1340:                                   ; preds = %1314, %1311
  %1341 = phi double [ undef, %1311 ], [ %1336, %1314 ]
  %1342 = phi i64 [ 0, %1311 ], [ %1337, %1314 ]
  %1343 = phi double [ 0.000000e+00, %1311 ], [ %1336, %1314 ]
  br i1 %277, label %1354, label %1344

; <label>:1344:                                   ; preds = %1340
  %1345 = mul nsw i64 %1342, %65
  %1346 = add nsw i64 %1345, %1308
  %1347 = getelementptr inbounds double, double* %73, i64 %1346
  %1348 = load double, double* %1347, align 8, !tbaa !7
  %1349 = add nsw i64 %1342, %1313
  %1350 = getelementptr inbounds double, double* %85, i64 %1349
  %1351 = load double, double* %1350, align 8, !tbaa !7
  %1352 = fmul double %1348, %1351
  %1353 = fadd double %1343, %1352
  br label %1354

; <label>:1354:                                   ; preds = %1340, %1344
  %1355 = phi double [ %1341, %1340 ], [ %1353, %1344 ]
  %1356 = mul nsw i64 %1312, %81
  %1357 = add nsw i64 %1310, %1356
  %1358 = getelementptr inbounds double, double* %64, i64 %1357
  %1359 = load double, double* %1358, align 8, !tbaa !7
  %1360 = fadd double %1355, %1359
  store double %1360, double* %1358, align 8, !tbaa !7
  %1361 = add nuw nsw i64 %1312, 1
  %1362 = icmp eq i64 %1361, %242
  br i1 %1362, label %1363, label %1311

; <label>:1363:                                   ; preds = %1354
  %1364 = add nuw nsw i64 %1308, 1
  %1365 = icmp eq i64 %1364, %243
  br i1 %1365, label %1366, label %1307

; <label>:1366:                                   ; preds = %1363, %1076
  br i1 %232, label %1367, label %1421

; <label>:1367:                                   ; preds = %1366, %1414
  %1368 = phi i64 [ %1419, %1414 ], [ 0, %1366 ]
  %1369 = mul nsw i64 %1368, %76
  %1370 = add nsw i64 %1369, %949
  br i1 %279, label %1399, label %1371

; <label>:1371:                                   ; preds = %1367, %1371
  %1372 = phi i64 [ %1396, %1371 ], [ 0, %1367 ]
  %1373 = phi double [ %1395, %1371 ], [ 0.000000e+00, %1367 ]
  %1374 = phi i64 [ %1397, %1371 ], [ %280, %1367 ]
  %1375 = mul nsw i64 %1372, %81
  %1376 = add nsw i64 %1375, %1370
  %1377 = getelementptr inbounds double, double* %75, i64 %1376
  %1378 = load double, double* %1377, align 8, !tbaa !7
  %1379 = mul nsw i64 %1372, %76
  %1380 = add nsw i64 %1379, %949
  %1381 = getelementptr inbounds double, double* %229, i64 %1380
  %1382 = load double, double* %1381, align 8, !tbaa !7
  %1383 = fmul double %1378, %1382
  %1384 = fadd double %1373, %1383
  %1385 = or i64 %1372, 1
  %1386 = mul nsw i64 %1385, %81
  %1387 = add nsw i64 %1386, %1370
  %1388 = getelementptr inbounds double, double* %75, i64 %1387
  %1389 = load double, double* %1388, align 8, !tbaa !7
  %1390 = mul nsw i64 %1385, %76
  %1391 = add nsw i64 %1390, %949
  %1392 = getelementptr inbounds double, double* %229, i64 %1391
  %1393 = load double, double* %1392, align 8, !tbaa !7
  %1394 = fmul double %1389, %1393
  %1395 = fadd double %1384, %1394
  %1396 = add nuw nsw i64 %1372, 2
  %1397 = add i64 %1374, -2
  %1398 = icmp eq i64 %1397, 0
  br i1 %1398, label %1399, label %1371

; <label>:1399:                                   ; preds = %1371, %1367
  %1400 = phi double [ undef, %1367 ], [ %1395, %1371 ]
  %1401 = phi i64 [ 0, %1367 ], [ %1396, %1371 ]
  %1402 = phi double [ 0.000000e+00, %1367 ], [ %1395, %1371 ]
  br i1 %281, label %1414, label %1403

; <label>:1403:                                   ; preds = %1399
  %1404 = mul nsw i64 %1401, %81
  %1405 = add nsw i64 %1404, %1370
  %1406 = getelementptr inbounds double, double* %75, i64 %1405
  %1407 = load double, double* %1406, align 8, !tbaa !7
  %1408 = mul nsw i64 %1401, %76
  %1409 = add nsw i64 %1408, %949
  %1410 = getelementptr inbounds double, double* %229, i64 %1409
  %1411 = load double, double* %1410, align 8, !tbaa !7
  %1412 = fmul double %1407, %1411
  %1413 = fadd double %1402, %1412
  br label %1414

; <label>:1414:                                   ; preds = %1399, %1403
  %1415 = phi double [ %1400, %1399 ], [ %1413, %1403 ]
  %1416 = getelementptr inbounds double, double* %58, i64 %1370
  %1417 = load double, double* %1416, align 8, !tbaa !7
  %1418 = fadd double %1415, %1417
  store double %1418, double* %1416, align 8, !tbaa !7
  %1419 = add nuw nsw i64 %1368, 1
  %1420 = icmp eq i64 %1419, %244
  br i1 %1420, label %1421, label %1367

; <label>:1421:                                   ; preds = %1414, %1079, %1131, %1186, %1239, %1242, %1366
  %1422 = icmp sgt i64 %949, 0
  br i1 %1422, label %947, label %929

; <label>:1423:                                   ; preds = %1568, %930
  %1424 = phi i64 [ 0, %930 ], [ %1569, %1568 ]
  br i1 %931, label %1425, label %1568

; <label>:1425:                                   ; preds = %1423
  %1426 = trunc i64 %1424 to i32
  br label %1427

; <label>:1427:                                   ; preds = %1425, %1431
  %1428 = phi i64 [ 0, %1425 ], [ %1432, %1431 ]
  %1429 = mul nsw i64 %1428, %76
  %1430 = add nsw i64 %1429, %1424
  br label %1434

; <label>:1431:                                   ; preds = %1456
  %1432 = add nuw nsw i64 %1428, 1
  %1433 = icmp eq i64 %1432, %934
  br i1 %1433, label %1495, label %1427

; <label>:1434:                                   ; preds = %1456, %1427
  %1435 = phi i64 [ 0, %1427 ], [ %1461, %1456 ]
  %1436 = trunc i64 %1435 to i32
  %1437 = mul i32 %59, %1436
  %1438 = add i32 %1437, %1426
  br i1 %940, label %1439, label %1463

; <label>:1439:                                   ; preds = %1463, %1434
  %1440 = phi double [ undef, %1434 ], [ %1491, %1463 ]
  %1441 = phi i64 [ 0, %1434 ], [ %1492, %1463 ]
  %1442 = phi double [ 0.000000e+00, %1434 ], [ %1491, %1463 ]
  br i1 %942, label %1456, label %1443

; <label>:1443:                                   ; preds = %1439
  %1444 = mul nsw i64 %1441, %81
  %1445 = add nsw i64 %1430, %1444
  %1446 = getelementptr inbounds double, double* %75, i64 %1445
  %1447 = load double, double* %1446, align 8, !tbaa !7
  %1448 = trunc i64 %1441 to i32
  %1449 = mul i32 %31, %1448
  %1450 = add i32 %1438, %1449
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds double, double* %64, i64 %1451
  %1453 = load double, double* %1452, align 8, !tbaa !7
  %1454 = fmul double %1447, %1453
  %1455 = fadd double %1442, %1454
  br label %1456

; <label>:1456:                                   ; preds = %1439, %1443
  %1457 = phi double [ %1440, %1439 ], [ %1455, %1443 ]
  %1458 = mul nsw i64 %1435, %65
  %1459 = add nsw i64 %1458, %1428
  %1460 = getelementptr inbounds double, double* %73, i64 %1459
  store double %1457, double* %1460, align 8, !tbaa !7
  %1461 = add nuw nsw i64 %1435, 1
  %1462 = icmp eq i64 %1461, %933
  br i1 %1462, label %1431, label %1434

; <label>:1463:                                   ; preds = %1434, %1463
  %1464 = phi i64 [ %1492, %1463 ], [ 0, %1434 ]
  %1465 = phi double [ %1491, %1463 ], [ 0.000000e+00, %1434 ]
  %1466 = phi i64 [ %1493, %1463 ], [ %941, %1434 ]
  %1467 = mul nsw i64 %1464, %81
  %1468 = add nsw i64 %1430, %1467
  %1469 = getelementptr inbounds double, double* %75, i64 %1468
  %1470 = load double, double* %1469, align 8, !tbaa !7
  %1471 = trunc i64 %1464 to i32
  %1472 = mul i32 %31, %1471
  %1473 = add i32 %1438, %1472
  %1474 = sext i32 %1473 to i64
  %1475 = getelementptr inbounds double, double* %64, i64 %1474
  %1476 = load double, double* %1475, align 8, !tbaa !7
  %1477 = fmul double %1470, %1476
  %1478 = fadd double %1465, %1477
  %1479 = or i64 %1464, 1
  %1480 = mul nsw i64 %1479, %81
  %1481 = add nsw i64 %1430, %1480
  %1482 = getelementptr inbounds double, double* %75, i64 %1481
  %1483 = load double, double* %1482, align 8, !tbaa !7
  %1484 = trunc i64 %1479 to i32
  %1485 = mul i32 %31, %1484
  %1486 = add i32 %1438, %1485
  %1487 = sext i32 %1486 to i64
  %1488 = getelementptr inbounds double, double* %64, i64 %1487
  %1489 = load double, double* %1488, align 8, !tbaa !7
  %1490 = fmul double %1483, %1489
  %1491 = fadd double %1478, %1490
  %1492 = add nuw nsw i64 %1464, 2
  %1493 = add i64 %1466, -2
  %1494 = icmp eq i64 %1493, 0
  br i1 %1494, label %1439, label %1463

; <label>:1495:                                   ; preds = %1431
  br i1 %931, label %1496, label %1568

; <label>:1496:                                   ; preds = %1495
  %1497 = trunc i64 %1424 to i32
  br label %1498

; <label>:1498:                                   ; preds = %1496, %1502
  %1499 = phi i64 [ 0, %1496 ], [ %1503, %1502 ]
  %1500 = trunc i64 %1499 to i32
  %1501 = mul i32 %31, %1500
  br label %1505

; <label>:1502:                                   ; preds = %1531
  %1503 = add nuw nsw i64 %1499, 1
  %1504 = icmp eq i64 %1503, %936
  br i1 %1504, label %1568, label %1498

; <label>:1505:                                   ; preds = %1531, %1498
  %1506 = phi i64 [ 0, %1498 ], [ %1534, %1531 ]
  %1507 = trunc i64 %1506 to i32
  %1508 = mul i32 %59, %1507
  %1509 = add i32 %1508, %1497
  %1510 = add i32 %1509, %1501
  %1511 = sext i32 %1510 to i64
  %1512 = getelementptr inbounds double, double* %75, i64 %1511
  %1513 = load double, double* %1512, align 8, !tbaa !7
  br i1 %944, label %1514, label %1536

; <label>:1514:                                   ; preds = %1536, %1505
  %1515 = phi double [ undef, %1505 ], [ %1564, %1536 ]
  %1516 = phi i64 [ 0, %1505 ], [ %1565, %1536 ]
  %1517 = phi double [ %1513, %1505 ], [ %1564, %1536 ]
  br i1 %946, label %1531, label %1518

; <label>:1518:                                   ; preds = %1514
  %1519 = mul nsw i64 %1516, %65
  %1520 = add nsw i64 %1519, %1499
  %1521 = getelementptr inbounds double, double* %73, i64 %1520
  %1522 = load double, double* %1521, align 8, !tbaa !7
  %1523 = trunc i64 %1516 to i32
  %1524 = mul i32 %31, %1523
  %1525 = add i32 %1509, %1524
  %1526 = sext i32 %1525 to i64
  %1527 = getelementptr inbounds double, double* %75, i64 %1526
  %1528 = load double, double* %1527, align 8, !tbaa !7
  %1529 = fmul double %1522, %1528
  %1530 = fsub double %1517, %1529
  br label %1531

; <label>:1531:                                   ; preds = %1514, %1518
  %1532 = phi double [ %1515, %1514 ], [ %1530, %1518 ]
  %1533 = getelementptr inbounds double, double* %64, i64 %1511
  store double %1532, double* %1533, align 8, !tbaa !7
  %1534 = add nuw nsw i64 %1506, 1
  %1535 = icmp eq i64 %1534, %935
  br i1 %1535, label %1502, label %1505

; <label>:1536:                                   ; preds = %1505, %1536
  %1537 = phi i64 [ %1565, %1536 ], [ 0, %1505 ]
  %1538 = phi double [ %1564, %1536 ], [ %1513, %1505 ]
  %1539 = phi i64 [ %1566, %1536 ], [ %945, %1505 ]
  %1540 = mul nsw i64 %1537, %65
  %1541 = add nsw i64 %1540, %1499
  %1542 = getelementptr inbounds double, double* %73, i64 %1541
  %1543 = load double, double* %1542, align 8, !tbaa !7
  %1544 = trunc i64 %1537 to i32
  %1545 = mul i32 %31, %1544
  %1546 = add i32 %1509, %1545
  %1547 = sext i32 %1546 to i64
  %1548 = getelementptr inbounds double, double* %75, i64 %1547
  %1549 = load double, double* %1548, align 8, !tbaa !7
  %1550 = fmul double %1543, %1549
  %1551 = fsub double %1538, %1550
  %1552 = or i64 %1537, 1
  %1553 = mul nsw i64 %1552, %65
  %1554 = add nsw i64 %1553, %1499
  %1555 = getelementptr inbounds double, double* %73, i64 %1554
  %1556 = load double, double* %1555, align 8, !tbaa !7
  %1557 = trunc i64 %1552 to i32
  %1558 = mul i32 %31, %1557
  %1559 = add i32 %1509, %1558
  %1560 = sext i32 %1559 to i64
  %1561 = getelementptr inbounds double, double* %75, i64 %1560
  %1562 = load double, double* %1561, align 8, !tbaa !7
  %1563 = fmul double %1556, %1562
  %1564 = fsub double %1551, %1563
  %1565 = add nuw nsw i64 %1537, 2
  %1566 = add i64 %1539, -2
  %1567 = icmp eq i64 %1566, 0
  br i1 %1567, label %1514, label %1536

; <label>:1568:                                   ; preds = %1502, %1423, %1495
  %1569 = add nuw nsw i64 %1424, 1
  %1570 = icmp eq i64 %1569, %937
  br i1 %1570, label %1571, label %1423

; <label>:1571:                                   ; preds = %1568, %227, %87, %929
  tail call void @Rf_unprotect(i32 4) #7
  ret %struct.SEXPREC* %48
}

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @KalmanFore(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %4 = tail call %struct.SEXPREC* @Rf_duplicate(%struct.SEXPREC* %1) #7
  %5 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %4) #7
  %6 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #7
  %7 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  %8 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #7
  %9 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #7
  %10 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #7
  %11 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #7
  %12 = tail call i32 @TYPEOF(%struct.SEXPREC* %6) #7
  %13 = icmp eq i32 %12, 14
  br i1 %13, label %14, label %26

; <label>:14:                                     ; preds = %3
  %15 = tail call i32 @TYPEOF(%struct.SEXPREC* %7) #7
  %16 = icmp eq i32 %15, 14
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %14
  %18 = tail call i32 @TYPEOF(%struct.SEXPREC* %8) #7
  %19 = icmp eq i32 %18, 14
  br i1 %19, label %20, label %26

; <label>:20:                                     ; preds = %17
  %21 = tail call i32 @TYPEOF(%struct.SEXPREC* %9) #7
  %22 = icmp eq i32 %21, 14
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %20
  %24 = tail call i32 @TYPEOF(%struct.SEXPREC* %10) #7
  %25 = icmp eq i32 %24, 14
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %23, %20, %17, %14, %3
  %27 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %27) #8
  unreachable

; <label>:28:                                     ; preds = %23
  %29 = tail call i32 @Rf_asInteger(%struct.SEXPREC* %0) #7
  %30 = tail call i32 @LENGTH(%struct.SEXPREC* %7) #7
  %31 = tail call double* @REAL(%struct.SEXPREC* %6) #7
  %32 = tail call double* @REAL(%struct.SEXPREC* %7) #7
  %33 = bitcast double* %32 to i8*
  %34 = tail call double* @REAL(%struct.SEXPREC* %8) #7
  %35 = tail call double* @REAL(%struct.SEXPREC* %9) #7
  %36 = tail call double* @REAL(%struct.SEXPREC* %10) #7
  %37 = tail call double @Rf_asReal(%struct.SEXPREC* %11) #7
  %38 = sext i32 %30 to i64
  %39 = tail call i8* @R_alloc(i64 %38, i32 8) #7
  %40 = bitcast i8* %39 to double*
  %41 = mul nsw i32 %30, %30
  %42 = zext i32 %41 to i64
  %43 = tail call i8* @R_alloc(i64 %42, i32 8) #7
  %44 = bitcast i8* %43 to double*
  %45 = tail call i8* @R_alloc(i64 %42, i32 8) #7
  %46 = bitcast i8* %45 to double*
  %47 = tail call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 2) #7
  %48 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %47) #7
  %49 = sext i32 %29 to i64
  %50 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %49) #7
  %51 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %47, i64 0, %struct.SEXPREC* %50) #7
  %52 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %49) #7
  %53 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %47, i64 1, %struct.SEXPREC* %52) #7
  %54 = tail call %struct.SEXPREC* @Rf_allocVector(i32 16, i64 2) #7
  %55 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %54) #7
  %56 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %55, i64 0, %struct.SEXPREC* %56) #7
  %57 = tail call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)) #7
  tail call void @SET_STRING_ELT(%struct.SEXPREC* %55, i64 1, %struct.SEXPREC* %57) #7
  %58 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NamesSymbol, align 8, !tbaa !3
  %59 = tail call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %47, %struct.SEXPREC* %58, %struct.SEXPREC* %55) #7
  tail call void @Rf_unprotect(i32 1) #7
  %60 = icmp sgt i32 %29, 0
  br i1 %60, label %61, label %161

; <label>:61:                                     ; preds = %28
  %62 = icmp sgt i32 %30, 0
  %63 = zext i32 %30 to i64
  %64 = zext i32 %30 to i64
  %65 = zext i32 %30 to i64
  %66 = zext i32 %30 to i64
  %67 = zext i32 %30 to i64
  %68 = zext i32 %30 to i64
  %69 = zext i32 %30 to i64
  %70 = zext i32 %30 to i64
  %71 = zext i32 %29 to i64
  %72 = getelementptr double, double* %32, i64 %69
  %73 = bitcast double* %72 to i8*
  %74 = shl nuw nsw i64 %69, 3
  %75 = getelementptr i8, i8* %39, i64 %74
  %76 = add nsw i64 %63, -1
  %77 = and i64 %63, 4294967292
  %78 = add nsw i64 %77, -4
  %79 = lshr exact i64 %78, 2
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %63, 1
  %82 = icmp eq i64 %76, 0
  %83 = sub nsw i64 %63, %81
  %84 = icmp eq i64 %81, 0
  %85 = icmp ult i32 %30, 4
  %86 = icmp ugt i8* %75, %33
  %87 = icmp ult i8* %39, %73
  %88 = and i1 %86, %87
  %89 = and i64 %69, 4294967292
  %90 = and i64 %80, 3
  %91 = icmp ult i64 %78, 12
  %92 = sub nsw i64 %80, %90
  %93 = icmp eq i64 %90, 0
  %94 = icmp eq i64 %89, %69
  %95 = and i64 %63, 1
  %96 = icmp eq i64 %76, 0
  %97 = sub nsw i64 %63, %95
  %98 = icmp eq i64 %95, 0
  %99 = and i64 %63, 1
  %100 = icmp eq i64 %76, 0
  %101 = sub nsw i64 %63, %99
  %102 = icmp eq i64 %99, 0
  %103 = and i64 %63, 1
  %104 = icmp eq i64 %76, 0
  %105 = sub nsw i64 %63, %103
  %106 = icmp eq i64 %103, 0
  br label %107

; <label>:107:                                    ; preds = %481, %61
  %108 = phi i64 [ 0, %61 ], [ %485, %481 ]
  br i1 %62, label %109, label %257

; <label>:109:                                    ; preds = %107, %151
  %110 = phi i64 [ %159, %151 ], [ 0, %107 ]
  %111 = phi double [ %158, %151 ], [ 0.000000e+00, %107 ]
  br i1 %82, label %136, label %112

; <label>:112:                                    ; preds = %109, %112
  %113 = phi i64 [ %133, %112 ], [ 0, %109 ]
  %114 = phi double [ %132, %112 ], [ 0.000000e+00, %109 ]
  %115 = phi i64 [ %134, %112 ], [ %83, %109 ]
  %116 = mul nsw i64 %113, %38
  %117 = add nsw i64 %116, %110
  %118 = getelementptr inbounds double, double* %35, i64 %117
  %119 = load double, double* %118, align 8, !tbaa !7
  %120 = getelementptr inbounds double, double* %32, i64 %113
  %121 = load double, double* %120, align 8, !tbaa !7
  %122 = fmul double %119, %121
  %123 = fadd double %114, %122
  %124 = or i64 %113, 1
  %125 = mul nsw i64 %124, %38
  %126 = add nsw i64 %125, %110
  %127 = getelementptr inbounds double, double* %35, i64 %126
  %128 = load double, double* %127, align 8, !tbaa !7
  %129 = getelementptr inbounds double, double* %32, i64 %124
  %130 = load double, double* %129, align 8, !tbaa !7
  %131 = fmul double %128, %130
  %132 = fadd double %123, %131
  %133 = add nuw nsw i64 %113, 2
  %134 = add i64 %115, -2
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %112

; <label>:136:                                    ; preds = %112, %109
  %137 = phi double [ undef, %109 ], [ %132, %112 ]
  %138 = phi i64 [ undef, %109 ], [ %133, %112 ]
  %139 = phi i64 [ 0, %109 ], [ %133, %112 ]
  %140 = phi double [ 0.000000e+00, %109 ], [ %132, %112 ]
  br i1 %84, label %151, label %141

; <label>:141:                                    ; preds = %136
  %142 = add nuw nsw i64 %139, 1
  %143 = mul nsw i64 %139, %38
  %144 = add nsw i64 %143, %110
  %145 = getelementptr inbounds double, double* %35, i64 %144
  %146 = load double, double* %145, align 8, !tbaa !7
  %147 = getelementptr inbounds double, double* %32, i64 %139
  %148 = load double, double* %147, align 8, !tbaa !7
  %149 = fmul double %146, %148
  %150 = fadd double %140, %149
  br label %151

; <label>:151:                                    ; preds = %136, %141
  %152 = phi double [ %137, %136 ], [ %150, %141 ]
  %153 = phi i64 [ %138, %136 ], [ %142, %141 ]
  %154 = getelementptr inbounds double, double* %40, i64 %110
  store double %152, double* %154, align 8, !tbaa !7
  %155 = getelementptr inbounds double, double* %31, i64 %110
  %156 = load double, double* %155, align 8, !tbaa !7
  %157 = fmul double %152, %156
  %158 = fadd double %111, %157
  %159 = add nuw nsw i64 %110, 1
  %160 = icmp eq i64 %159, %153
  br i1 %160, label %164, label %109

; <label>:161:                                    ; preds = %481, %28
  %162 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %2) #7
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %490, label %487

; <label>:164:                                    ; preds = %151
  br i1 %62, label %165, label %257

; <label>:165:                                    ; preds = %164
  %166 = or i1 %85, %88
  br i1 %166, label %167, label %188

; <label>:167:                                    ; preds = %165, %256
  %168 = phi i64 [ 0, %165 ], [ %89, %256 ]
  %169 = sub nsw i64 %63, %168
  %170 = xor i64 %168, -1
  %171 = add nsw i64 %170, %63
  %172 = and i64 %169, 7
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %185, label %174

; <label>:174:                                    ; preds = %167, %174
  %175 = phi i64 [ %182, %174 ], [ %168, %167 ]
  %176 = phi i64 [ %183, %174 ], [ %172, %167 ]
  %177 = getelementptr inbounds double, double* %40, i64 %175
  %178 = bitcast double* %177 to i64*
  %179 = load i64, i64* %178, align 8, !tbaa !7
  %180 = getelementptr inbounds double, double* %32, i64 %175
  %181 = bitcast double* %180 to i64*
  store i64 %179, i64* %181, align 8, !tbaa !7
  %182 = add nuw nsw i64 %175, 1
  %183 = add i64 %176, -1
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %174, !llvm.loop !64

; <label>:185:                                    ; preds = %174, %167
  %186 = phi i64 [ %168, %167 ], [ %182, %174 ]
  %187 = icmp ult i64 %171, 7
  br i1 %187, label %261, label %318

; <label>:188:                                    ; preds = %165
  br i1 %91, label %238, label %189

; <label>:189:                                    ; preds = %188, %189
  %190 = phi i64 [ %235, %189 ], [ 0, %188 ]
  %191 = phi i64 [ %236, %189 ], [ %92, %188 ]
  %192 = getelementptr inbounds double, double* %40, i64 %190
  %193 = bitcast double* %192 to <2 x i64>*
  %194 = load <2 x i64>, <2 x i64>* %193, align 8, !tbaa !7, !alias.scope !65
  %195 = getelementptr inbounds double, double* %192, i64 2
  %196 = bitcast double* %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 8, !tbaa !7, !alias.scope !65
  %198 = getelementptr inbounds double, double* %32, i64 %190
  %199 = bitcast double* %198 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %199, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %200 = getelementptr inbounds double, double* %198, i64 2
  %201 = bitcast double* %200 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %201, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %202 = or i64 %190, 4
  %203 = getelementptr inbounds double, double* %40, i64 %202
  %204 = bitcast double* %203 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 8, !tbaa !7, !alias.scope !65
  %206 = getelementptr inbounds double, double* %203, i64 2
  %207 = bitcast double* %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 8, !tbaa !7, !alias.scope !65
  %209 = getelementptr inbounds double, double* %32, i64 %202
  %210 = bitcast double* %209 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %210, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %211 = getelementptr inbounds double, double* %209, i64 2
  %212 = bitcast double* %211 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %212, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %213 = or i64 %190, 8
  %214 = getelementptr inbounds double, double* %40, i64 %213
  %215 = bitcast double* %214 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !tbaa !7, !alias.scope !65
  %217 = getelementptr inbounds double, double* %214, i64 2
  %218 = bitcast double* %217 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 8, !tbaa !7, !alias.scope !65
  %220 = getelementptr inbounds double, double* %32, i64 %213
  %221 = bitcast double* %220 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %221, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %222 = getelementptr inbounds double, double* %220, i64 2
  %223 = bitcast double* %222 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %223, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %224 = or i64 %190, 12
  %225 = getelementptr inbounds double, double* %40, i64 %224
  %226 = bitcast double* %225 to <2 x i64>*
  %227 = load <2 x i64>, <2 x i64>* %226, align 8, !tbaa !7, !alias.scope !65
  %228 = getelementptr inbounds double, double* %225, i64 2
  %229 = bitcast double* %228 to <2 x i64>*
  %230 = load <2 x i64>, <2 x i64>* %229, align 8, !tbaa !7, !alias.scope !65
  %231 = getelementptr inbounds double, double* %32, i64 %224
  %232 = bitcast double* %231 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %232, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %233 = getelementptr inbounds double, double* %231, i64 2
  %234 = bitcast double* %233 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %234, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %235 = add i64 %190, 16
  %236 = add i64 %191, -4
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %238, label %189, !llvm.loop !70

; <label>:238:                                    ; preds = %189, %188
  %239 = phi i64 [ 0, %188 ], [ %235, %189 ]
  br i1 %93, label %256, label %240

; <label>:240:                                    ; preds = %238, %240
  %241 = phi i64 [ %253, %240 ], [ %239, %238 ]
  %242 = phi i64 [ %254, %240 ], [ %90, %238 ]
  %243 = getelementptr inbounds double, double* %40, i64 %241
  %244 = bitcast double* %243 to <2 x i64>*
  %245 = load <2 x i64>, <2 x i64>* %244, align 8, !tbaa !7, !alias.scope !65
  %246 = getelementptr inbounds double, double* %243, i64 2
  %247 = bitcast double* %246 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8, !tbaa !7, !alias.scope !65
  %249 = getelementptr inbounds double, double* %32, i64 %241
  %250 = bitcast double* %249 to <2 x i64>*
  store <2 x i64> %245, <2 x i64>* %250, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %251 = getelementptr inbounds double, double* %249, i64 2
  %252 = bitcast double* %251 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %252, align 8, !tbaa !7, !alias.scope !68, !noalias !65
  %253 = add i64 %241, 4
  %254 = add i64 %242, -1
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %240, !llvm.loop !71

; <label>:256:                                    ; preds = %240, %238
  br i1 %94, label %261, label %167

; <label>:257:                                    ; preds = %164, %107
  %258 = phi double [ %158, %164 ], [ 0.000000e+00, %107 ]
  %259 = tail call double* @REAL(%struct.SEXPREC* %50) #7
  %260 = getelementptr inbounds double, double* %259, i64 %108
  store double %258, double* %260, align 8, !tbaa !7
  br label %481

; <label>:261:                                    ; preds = %185, %318, %256
  %262 = tail call double* @REAL(%struct.SEXPREC* %50) #7
  %263 = getelementptr inbounds double, double* %262, i64 %108
  store double %158, double* %263, align 8, !tbaa !7
  br i1 %62, label %264, label %481

; <label>:264:                                    ; preds = %261, %266
  %265 = phi i64 [ %267, %266 ], [ 0, %261 ]
  br label %269

; <label>:266:                                    ; preds = %286
  %267 = add nuw nsw i64 %265, 1
  %268 = icmp eq i64 %267, %66
  br i1 %268, label %369, label %264

; <label>:269:                                    ; preds = %286, %264
  %270 = phi i64 [ 0, %264 ], [ %290, %286 ]
  %271 = mul nsw i64 %270, %38
  br i1 %96, label %272, label %292

; <label>:272:                                    ; preds = %292, %269
  %273 = phi double [ undef, %269 ], [ %314, %292 ]
  %274 = phi i64 [ 0, %269 ], [ %315, %292 ]
  %275 = phi double [ 0.000000e+00, %269 ], [ %314, %292 ]
  br i1 %98, label %286, label %276

; <label>:276:                                    ; preds = %272
  %277 = mul nsw i64 %274, %38
  %278 = add nsw i64 %277, %265
  %279 = getelementptr inbounds double, double* %35, i64 %278
  %280 = load double, double* %279, align 8, !tbaa !7
  %281 = add nsw i64 %274, %271
  %282 = getelementptr inbounds double, double* %34, i64 %281
  %283 = load double, double* %282, align 8, !tbaa !7
  %284 = fmul double %280, %283
  %285 = fadd double %275, %284
  br label %286

; <label>:286:                                    ; preds = %272, %276
  %287 = phi double [ %273, %272 ], [ %285, %276 ]
  %288 = add nsw i64 %271, %265
  %289 = getelementptr inbounds double, double* %46, i64 %288
  store double %287, double* %289, align 8, !tbaa !7
  %290 = add nuw nsw i64 %270, 1
  %291 = icmp eq i64 %290, %65
  br i1 %291, label %266, label %269

; <label>:292:                                    ; preds = %269, %292
  %293 = phi i64 [ %315, %292 ], [ 0, %269 ]
  %294 = phi double [ %314, %292 ], [ 0.000000e+00, %269 ]
  %295 = phi i64 [ %316, %292 ], [ %97, %269 ]
  %296 = mul nsw i64 %293, %38
  %297 = add nsw i64 %296, %265
  %298 = getelementptr inbounds double, double* %35, i64 %297
  %299 = load double, double* %298, align 8, !tbaa !7
  %300 = add nsw i64 %293, %271
  %301 = getelementptr inbounds double, double* %34, i64 %300
  %302 = load double, double* %301, align 8, !tbaa !7
  %303 = fmul double %299, %302
  %304 = fadd double %294, %303
  %305 = or i64 %293, 1
  %306 = mul nsw i64 %305, %38
  %307 = add nsw i64 %306, %265
  %308 = getelementptr inbounds double, double* %35, i64 %307
  %309 = load double, double* %308, align 8, !tbaa !7
  %310 = add nsw i64 %305, %271
  %311 = getelementptr inbounds double, double* %34, i64 %310
  %312 = load double, double* %311, align 8, !tbaa !7
  %313 = fmul double %309, %312
  %314 = fadd double %304, %313
  %315 = add nuw nsw i64 %293, 2
  %316 = add i64 %295, -2
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %272, label %292

; <label>:318:                                    ; preds = %185, %318
  %319 = phi i64 [ %367, %318 ], [ %186, %185 ]
  %320 = getelementptr inbounds double, double* %40, i64 %319
  %321 = bitcast double* %320 to i64*
  %322 = load i64, i64* %321, align 8, !tbaa !7
  %323 = getelementptr inbounds double, double* %32, i64 %319
  %324 = bitcast double* %323 to i64*
  store i64 %322, i64* %324, align 8, !tbaa !7
  %325 = add nuw nsw i64 %319, 1
  %326 = getelementptr inbounds double, double* %40, i64 %325
  %327 = bitcast double* %326 to i64*
  %328 = load i64, i64* %327, align 8, !tbaa !7
  %329 = getelementptr inbounds double, double* %32, i64 %325
  %330 = bitcast double* %329 to i64*
  store i64 %328, i64* %330, align 8, !tbaa !7
  %331 = add nsw i64 %319, 2
  %332 = getelementptr inbounds double, double* %40, i64 %331
  %333 = bitcast double* %332 to i64*
  %334 = load i64, i64* %333, align 8, !tbaa !7
  %335 = getelementptr inbounds double, double* %32, i64 %331
  %336 = bitcast double* %335 to i64*
  store i64 %334, i64* %336, align 8, !tbaa !7
  %337 = add nsw i64 %319, 3
  %338 = getelementptr inbounds double, double* %40, i64 %337
  %339 = bitcast double* %338 to i64*
  %340 = load i64, i64* %339, align 8, !tbaa !7
  %341 = getelementptr inbounds double, double* %32, i64 %337
  %342 = bitcast double* %341 to i64*
  store i64 %340, i64* %342, align 8, !tbaa !7
  %343 = add nsw i64 %319, 4
  %344 = getelementptr inbounds double, double* %40, i64 %343
  %345 = bitcast double* %344 to i64*
  %346 = load i64, i64* %345, align 8, !tbaa !7
  %347 = getelementptr inbounds double, double* %32, i64 %343
  %348 = bitcast double* %347 to i64*
  store i64 %346, i64* %348, align 8, !tbaa !7
  %349 = add nsw i64 %319, 5
  %350 = getelementptr inbounds double, double* %40, i64 %349
  %351 = bitcast double* %350 to i64*
  %352 = load i64, i64* %351, align 8, !tbaa !7
  %353 = getelementptr inbounds double, double* %32, i64 %349
  %354 = bitcast double* %353 to i64*
  store i64 %352, i64* %354, align 8, !tbaa !7
  %355 = add nsw i64 %319, 6
  %356 = getelementptr inbounds double, double* %40, i64 %355
  %357 = bitcast double* %356 to i64*
  %358 = load i64, i64* %357, align 8, !tbaa !7
  %359 = getelementptr inbounds double, double* %32, i64 %355
  %360 = bitcast double* %359 to i64*
  store i64 %358, i64* %360, align 8, !tbaa !7
  %361 = add nsw i64 %319, 7
  %362 = getelementptr inbounds double, double* %40, i64 %361
  %363 = bitcast double* %362 to i64*
  %364 = load i64, i64* %363, align 8, !tbaa !7
  %365 = getelementptr inbounds double, double* %32, i64 %361
  %366 = bitcast double* %365 to i64*
  store i64 %364, i64* %366, align 8, !tbaa !7
  %367 = add nsw i64 %319, 8
  %368 = icmp eq i64 %367, %64
  br i1 %368, label %261, label %318, !llvm.loop !72

; <label>:369:                                    ; preds = %266
  br i1 %62, label %370, label %481

; <label>:370:                                    ; preds = %369, %372
  %371 = phi i64 [ %373, %372 ], [ 0, %369 ]
  br label %375

; <label>:372:                                    ; preds = %395
  %373 = add nuw nsw i64 %371, 1
  %374 = icmp eq i64 %373, %68
  br i1 %374, label %426, label %370

; <label>:375:                                    ; preds = %395, %370
  %376 = phi i64 [ 0, %370 ], [ %398, %395 ]
  %377 = mul nsw i64 %376, %38
  %378 = add nsw i64 %377, %371
  %379 = getelementptr inbounds double, double* %36, i64 %378
  %380 = load double, double* %379, align 8, !tbaa !7
  br i1 %100, label %381, label %400

; <label>:381:                                    ; preds = %400, %375
  %382 = phi double [ undef, %375 ], [ %422, %400 ]
  %383 = phi i64 [ 0, %375 ], [ %423, %400 ]
  %384 = phi double [ %380, %375 ], [ %422, %400 ]
  br i1 %102, label %395, label %385

; <label>:385:                                    ; preds = %381
  %386 = mul nsw i64 %383, %38
  %387 = add nsw i64 %386, %371
  %388 = getelementptr inbounds double, double* %46, i64 %387
  %389 = load double, double* %388, align 8, !tbaa !7
  %390 = add nsw i64 %386, %376
  %391 = getelementptr inbounds double, double* %35, i64 %390
  %392 = load double, double* %391, align 8, !tbaa !7
  %393 = fmul double %389, %392
  %394 = fadd double %384, %393
  br label %395

; <label>:395:                                    ; preds = %381, %385
  %396 = phi double [ %382, %381 ], [ %394, %385 ]
  %397 = getelementptr inbounds double, double* %44, i64 %378
  store double %396, double* %397, align 8, !tbaa !7
  %398 = add nuw nsw i64 %376, 1
  %399 = icmp eq i64 %398, %67
  br i1 %399, label %372, label %375

; <label>:400:                                    ; preds = %375, %400
  %401 = phi i64 [ %423, %400 ], [ 0, %375 ]
  %402 = phi double [ %422, %400 ], [ %380, %375 ]
  %403 = phi i64 [ %424, %400 ], [ %101, %375 ]
  %404 = mul nsw i64 %401, %38
  %405 = add nsw i64 %404, %371
  %406 = getelementptr inbounds double, double* %46, i64 %405
  %407 = load double, double* %406, align 8, !tbaa !7
  %408 = add nsw i64 %404, %376
  %409 = getelementptr inbounds double, double* %35, i64 %408
  %410 = load double, double* %409, align 8, !tbaa !7
  %411 = fmul double %407, %410
  %412 = fadd double %402, %411
  %413 = or i64 %401, 1
  %414 = mul nsw i64 %413, %38
  %415 = add nsw i64 %414, %371
  %416 = getelementptr inbounds double, double* %46, i64 %415
  %417 = load double, double* %416, align 8, !tbaa !7
  %418 = add nsw i64 %414, %376
  %419 = getelementptr inbounds double, double* %35, i64 %418
  %420 = load double, double* %419, align 8, !tbaa !7
  %421 = fmul double %417, %420
  %422 = fadd double %412, %421
  %423 = add nuw nsw i64 %401, 2
  %424 = add i64 %403, -2
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %381, label %400

; <label>:426:                                    ; preds = %372
  br i1 %62, label %427, label %481

; <label>:427:                                    ; preds = %426, %477
  %428 = phi i64 [ %479, %477 ], [ 0, %426 ]
  %429 = phi double [ %478, %477 ], [ %37, %426 ]
  %430 = getelementptr inbounds double, double* %31, i64 %428
  br i1 %104, label %461, label %431

; <label>:431:                                    ; preds = %427, %431
  %432 = phi i64 [ %458, %431 ], [ 0, %427 ]
  %433 = phi double [ %457, %431 ], [ %429, %427 ]
  %434 = phi i64 [ %459, %431 ], [ %105, %427 ]
  %435 = mul nsw i64 %432, %38
  %436 = add nsw i64 %435, %428
  %437 = getelementptr inbounds double, double* %44, i64 %436
  %438 = load double, double* %437, align 8, !tbaa !7
  %439 = getelementptr inbounds double, double* %34, i64 %436
  store double %438, double* %439, align 8, !tbaa !7
  %440 = load double, double* %430, align 8, !tbaa !7
  %441 = getelementptr inbounds double, double* %31, i64 %432
  %442 = load double, double* %441, align 8, !tbaa !7
  %443 = fmul double %440, %442
  %444 = fmul double %438, %443
  %445 = fadd double %433, %444
  %446 = or i64 %432, 1
  %447 = mul nsw i64 %446, %38
  %448 = add nsw i64 %447, %428
  %449 = getelementptr inbounds double, double* %44, i64 %448
  %450 = load double, double* %449, align 8, !tbaa !7
  %451 = getelementptr inbounds double, double* %34, i64 %448
  store double %450, double* %451, align 8, !tbaa !7
  %452 = load double, double* %430, align 8, !tbaa !7
  %453 = getelementptr inbounds double, double* %31, i64 %446
  %454 = load double, double* %453, align 8, !tbaa !7
  %455 = fmul double %452, %454
  %456 = fmul double %450, %455
  %457 = fadd double %445, %456
  %458 = add nuw nsw i64 %432, 2
  %459 = add i64 %434, -2
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %461, label %431

; <label>:461:                                    ; preds = %431, %427
  %462 = phi double [ undef, %427 ], [ %457, %431 ]
  %463 = phi i64 [ 0, %427 ], [ %458, %431 ]
  %464 = phi double [ %429, %427 ], [ %457, %431 ]
  br i1 %106, label %477, label %465

; <label>:465:                                    ; preds = %461
  %466 = mul nsw i64 %463, %38
  %467 = add nsw i64 %466, %428
  %468 = getelementptr inbounds double, double* %44, i64 %467
  %469 = load double, double* %468, align 8, !tbaa !7
  %470 = getelementptr inbounds double, double* %34, i64 %467
  store double %469, double* %470, align 8, !tbaa !7
  %471 = load double, double* %430, align 8, !tbaa !7
  %472 = getelementptr inbounds double, double* %31, i64 %463
  %473 = load double, double* %472, align 8, !tbaa !7
  %474 = fmul double %471, %473
  %475 = fmul double %469, %474
  %476 = fadd double %464, %475
  br label %477

; <label>:477:                                    ; preds = %461, %465
  %478 = phi double [ %462, %461 ], [ %476, %465 ]
  %479 = add nuw nsw i64 %428, 1
  %480 = icmp eq i64 %479, %70
  br i1 %480, label %481, label %427

; <label>:481:                                    ; preds = %477, %261, %257, %369, %426
  %482 = phi double [ %37, %426 ], [ %37, %369 ], [ %37, %257 ], [ %37, %261 ], [ %478, %477 ]
  %483 = tail call double* @REAL(%struct.SEXPREC* %52) #7
  %484 = getelementptr inbounds double, double* %483, i64 %108
  store double %482, double* %484, align 8, !tbaa !7
  %485 = add nuw nsw i64 %108, 1
  %486 = icmp eq i64 %485, %71
  br i1 %486, label %161, label %107

; <label>:487:                                    ; preds = %161
  %488 = tail call %struct.SEXPREC* @Rf_install(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0)) #7
  %489 = tail call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %47, %struct.SEXPREC* %488, %struct.SEXPREC* %5) #7
  br label %490

; <label>:490:                                    ; preds = %161, %487
  tail call void @Rf_unprotect(i32 2) #7
  ret %struct.SEXPREC* %47
}

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @ARIMA_undoPars(%struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %3 = alloca [100 x double], align 16
  %4 = tail call i32* @INTEGER(%struct.SEXPREC* %1) #7
  %5 = load i32, i32* %4, align 4, !tbaa !73
  %6 = getelementptr inbounds i32, i32* %4, i64 1
  %7 = load i32, i32* %6, align 4, !tbaa !73
  %8 = getelementptr inbounds i32, i32* %4, i64 2
  %9 = load i32, i32* %8, align 4, !tbaa !73
  %10 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %11 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %12 = sext i32 %10 to i64
  %13 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %12) #7
  %14 = tail call double* @REAL(%struct.SEXPREC* %13) #7
  %15 = bitcast double* %14 to i8*
  %16 = icmp sgt i32 %10, 0
  br i1 %16, label %17, label %126

; <label>:17:                                     ; preds = %2
  %18 = zext i32 %10 to i64
  %19 = icmp ult i32 %10, 4
  br i1 %19, label %20, label %41

; <label>:20:                                     ; preds = %124, %41, %17
  %21 = phi i64 [ 0, %41 ], [ 0, %17 ], [ %48, %124 ]
  %22 = sub nsw i64 %18, %21
  %23 = xor i64 %21, -1
  %24 = add nsw i64 %23, %18
  %25 = and i64 %22, 7
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %38, label %27

; <label>:27:                                     ; preds = %20, %27
  %28 = phi i64 [ %35, %27 ], [ %21, %20 ]
  %29 = phi i64 [ %36, %27 ], [ %25, %20 ]
  %30 = getelementptr inbounds double, double* %11, i64 %28
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !7
  %33 = getelementptr inbounds double, double* %14, i64 %28
  %34 = bitcast double* %33 to i64*
  store i64 %32, i64* %34, align 8, !tbaa !7
  %35 = add nuw nsw i64 %28, 1
  %36 = add i64 %29, -1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %27, !llvm.loop !75

; <label>:38:                                     ; preds = %27, %20
  %39 = phi i64 [ %21, %20 ], [ %35, %27 ]
  %40 = icmp ult i64 %24, 7
  br i1 %40, label %126, label %128

; <label>:41:                                     ; preds = %17
  %42 = getelementptr double, double* %14, i64 %18
  %43 = getelementptr double, double* %11, i64 %18
  %44 = icmp ult double* %14, %43
  %45 = icmp ult double* %11, %42
  %46 = and i1 %44, %45
  br i1 %46, label %20, label %47

; <label>:47:                                     ; preds = %41
  %48 = and i64 %18, 4294967292
  %49 = add nsw i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = and i64 %51, 3
  %53 = icmp ult i64 %49, 12
  br i1 %53, label %105, label %54

; <label>:54:                                     ; preds = %47
  %55 = sub nsw i64 %51, %52
  br label %56

; <label>:56:                                     ; preds = %56, %54
  %57 = phi i64 [ 0, %54 ], [ %102, %56 ]
  %58 = phi i64 [ %55, %54 ], [ %103, %56 ]
  %59 = getelementptr inbounds double, double* %11, i64 %57
  %60 = bitcast double* %59 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 8, !tbaa !7, !alias.scope !76
  %62 = getelementptr inbounds double, double* %59, i64 2
  %63 = bitcast double* %62 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 8, !tbaa !7, !alias.scope !76
  %65 = getelementptr inbounds double, double* %14, i64 %57
  %66 = bitcast double* %65 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %66, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %67 = getelementptr inbounds double, double* %65, i64 2
  %68 = bitcast double* %67 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %68, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %69 = or i64 %57, 4
  %70 = getelementptr inbounds double, double* %11, i64 %69
  %71 = bitcast double* %70 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 8, !tbaa !7, !alias.scope !76
  %73 = getelementptr inbounds double, double* %70, i64 2
  %74 = bitcast double* %73 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 8, !tbaa !7, !alias.scope !76
  %76 = getelementptr inbounds double, double* %14, i64 %69
  %77 = bitcast double* %76 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %77, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %78 = getelementptr inbounds double, double* %76, i64 2
  %79 = bitcast double* %78 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %79, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %80 = or i64 %57, 8
  %81 = getelementptr inbounds double, double* %11, i64 %80
  %82 = bitcast double* %81 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 8, !tbaa !7, !alias.scope !76
  %84 = getelementptr inbounds double, double* %81, i64 2
  %85 = bitcast double* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 8, !tbaa !7, !alias.scope !76
  %87 = getelementptr inbounds double, double* %14, i64 %80
  %88 = bitcast double* %87 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %88, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %89 = getelementptr inbounds double, double* %87, i64 2
  %90 = bitcast double* %89 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %90, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %91 = or i64 %57, 12
  %92 = getelementptr inbounds double, double* %11, i64 %91
  %93 = bitcast double* %92 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 8, !tbaa !7, !alias.scope !76
  %95 = getelementptr inbounds double, double* %92, i64 2
  %96 = bitcast double* %95 to <2 x i64>*
  %97 = load <2 x i64>, <2 x i64>* %96, align 8, !tbaa !7, !alias.scope !76
  %98 = getelementptr inbounds double, double* %14, i64 %91
  %99 = bitcast double* %98 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %99, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %100 = getelementptr inbounds double, double* %98, i64 2
  %101 = bitcast double* %100 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %101, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %102 = add i64 %57, 16
  %103 = add i64 %58, -4
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %56, !llvm.loop !81

; <label>:105:                                    ; preds = %56, %47
  %106 = phi i64 [ 0, %47 ], [ %102, %56 ]
  %107 = icmp eq i64 %52, 0
  br i1 %107, label %124, label %108

; <label>:108:                                    ; preds = %105, %108
  %109 = phi i64 [ %121, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %122, %108 ], [ %52, %105 ]
  %111 = getelementptr inbounds double, double* %11, i64 %109
  %112 = bitcast double* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !tbaa !7, !alias.scope !76
  %114 = getelementptr inbounds double, double* %111, i64 2
  %115 = bitcast double* %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 8, !tbaa !7, !alias.scope !76
  %117 = getelementptr inbounds double, double* %14, i64 %109
  %118 = bitcast double* %117 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %118, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %119 = getelementptr inbounds double, double* %117, i64 2
  %120 = bitcast double* %119 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %120, align 8, !tbaa !7, !alias.scope !79, !noalias !76
  %121 = add i64 %109, 4
  %122 = add i64 %110, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %108, !llvm.loop !82

; <label>:124:                                    ; preds = %108, %105
  %125 = icmp eq i64 %48, %18
  br i1 %125, label %126, label %20

; <label>:126:                                    ; preds = %38, %128, %124, %2
  %127 = icmp sgt i32 %5, 0
  br i1 %127, label %179, label %258

; <label>:128:                                    ; preds = %38, %128
  %129 = phi i64 [ %177, %128 ], [ %39, %38 ]
  %130 = getelementptr inbounds double, double* %11, i64 %129
  %131 = bitcast double* %130 to i64*
  %132 = load i64, i64* %131, align 8, !tbaa !7
  %133 = getelementptr inbounds double, double* %14, i64 %129
  %134 = bitcast double* %133 to i64*
  store i64 %132, i64* %134, align 8, !tbaa !7
  %135 = add nuw nsw i64 %129, 1
  %136 = getelementptr inbounds double, double* %11, i64 %135
  %137 = bitcast double* %136 to i64*
  %138 = load i64, i64* %137, align 8, !tbaa !7
  %139 = getelementptr inbounds double, double* %14, i64 %135
  %140 = bitcast double* %139 to i64*
  store i64 %138, i64* %140, align 8, !tbaa !7
  %141 = add nsw i64 %129, 2
  %142 = getelementptr inbounds double, double* %11, i64 %141
  %143 = bitcast double* %142 to i64*
  %144 = load i64, i64* %143, align 8, !tbaa !7
  %145 = getelementptr inbounds double, double* %14, i64 %141
  %146 = bitcast double* %145 to i64*
  store i64 %144, i64* %146, align 8, !tbaa !7
  %147 = add nsw i64 %129, 3
  %148 = getelementptr inbounds double, double* %11, i64 %147
  %149 = bitcast double* %148 to i64*
  %150 = load i64, i64* %149, align 8, !tbaa !7
  %151 = getelementptr inbounds double, double* %14, i64 %147
  %152 = bitcast double* %151 to i64*
  store i64 %150, i64* %152, align 8, !tbaa !7
  %153 = add nsw i64 %129, 4
  %154 = getelementptr inbounds double, double* %11, i64 %153
  %155 = bitcast double* %154 to i64*
  %156 = load i64, i64* %155, align 8, !tbaa !7
  %157 = getelementptr inbounds double, double* %14, i64 %153
  %158 = bitcast double* %157 to i64*
  store i64 %156, i64* %158, align 8, !tbaa !7
  %159 = add nsw i64 %129, 5
  %160 = getelementptr inbounds double, double* %11, i64 %159
  %161 = bitcast double* %160 to i64*
  %162 = load i64, i64* %161, align 8, !tbaa !7
  %163 = getelementptr inbounds double, double* %14, i64 %159
  %164 = bitcast double* %163 to i64*
  store i64 %162, i64* %164, align 8, !tbaa !7
  %165 = add nsw i64 %129, 6
  %166 = getelementptr inbounds double, double* %11, i64 %165
  %167 = bitcast double* %166 to i64*
  %168 = load i64, i64* %167, align 8, !tbaa !7
  %169 = getelementptr inbounds double, double* %14, i64 %165
  %170 = bitcast double* %169 to i64*
  store i64 %168, i64* %170, align 8, !tbaa !7
  %171 = add nsw i64 %129, 7
  %172 = getelementptr inbounds double, double* %11, i64 %171
  %173 = bitcast double* %172 to i64*
  %174 = load i64, i64* %173, align 8, !tbaa !7
  %175 = getelementptr inbounds double, double* %14, i64 %171
  %176 = bitcast double* %175 to i64*
  store i64 %174, i64* %176, align 8, !tbaa !7
  %177 = add nsw i64 %129, 8
  %178 = icmp eq i64 %177, %18
  br i1 %178, label %126, label %128, !llvm.loop !83

; <label>:179:                                    ; preds = %126
  %180 = bitcast [100 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %180) #7
  %181 = icmp sgt i32 %5, 100
  br i1 %181, label %184, label %182

; <label>:182:                                    ; preds = %179
  %183 = zext i32 %5 to i64
  br label %191

; <label>:184:                                    ; preds = %179
  %185 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %185) #8
  unreachable

; <label>:186:                                    ; preds = %191
  %187 = icmp sgt i32 %5, 1
  br i1 %187, label %188, label %257

; <label>:188:                                    ; preds = %186
  %189 = add i32 %5, -1
  %190 = zext i32 %189 to i64
  br label %200

; <label>:191:                                    ; preds = %191, %182
  %192 = phi i64 [ 0, %182 ], [ %198, %191 ]
  %193 = getelementptr inbounds double, double* %11, i64 %192
  %194 = load double, double* %193, align 8, !tbaa !7
  %195 = tail call double @tanh(double %194) #9
  %196 = getelementptr inbounds double, double* %14, i64 %192
  store double %195, double* %196, align 8, !tbaa !7
  %197 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %192
  store double %195, double* %197, align 8, !tbaa !7
  %198 = add nuw nsw i64 %192, 1
  %199 = icmp eq i64 %198, %183
  br i1 %199, label %186, label %191

; <label>:200:                                    ; preds = %252, %188
  %201 = phi i64 [ 1, %188 ], [ %254, %252 ]
  %202 = phi i64 [ 0, %188 ], [ %255, %252 ]
  %203 = add nuw i64 %202, 1
  %204 = shl i64 %202, 3
  %205 = getelementptr inbounds double, double* %14, i64 %201
  %206 = load double, double* %205, align 8, !tbaa !7
  %207 = and i64 %203, 1
  %208 = icmp eq i64 %202, 0
  br i1 %208, label %238, label %209

; <label>:209:                                    ; preds = %200
  %210 = sub i64 %203, %207
  br label %211

; <label>:211:                                    ; preds = %211, %209
  %212 = phi i64 [ 0, %209 ], [ %235, %211 ]
  %213 = phi i64 [ %210, %209 ], [ %236, %211 ]
  %214 = xor i64 %212, 4294967295
  %215 = add nuw i64 %214, %201
  %216 = shl i64 %215, 32
  %217 = ashr exact i64 %216, 32
  %218 = getelementptr inbounds double, double* %14, i64 %217
  %219 = load double, double* %218, align 8, !tbaa !7
  %220 = fmul double %206, %219
  %221 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %212
  %222 = load double, double* %221, align 16, !tbaa !7
  %223 = fsub double %222, %220
  store double %223, double* %221, align 16, !tbaa !7
  %224 = or i64 %212, 1
  %225 = xor i64 %212, 4294967294
  %226 = add nuw i64 %225, %201
  %227 = shl i64 %226, 32
  %228 = ashr exact i64 %227, 32
  %229 = getelementptr inbounds double, double* %14, i64 %228
  %230 = load double, double* %229, align 8, !tbaa !7
  %231 = fmul double %206, %230
  %232 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %224
  %233 = load double, double* %232, align 8, !tbaa !7
  %234 = fsub double %233, %231
  store double %234, double* %232, align 8, !tbaa !7
  %235 = add nuw nsw i64 %212, 2
  %236 = add i64 %213, -2
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %238, label %211

; <label>:238:                                    ; preds = %211, %200
  %239 = phi i64 [ 0, %200 ], [ %235, %211 ]
  %240 = icmp eq i64 %207, 0
  br i1 %240, label %252, label %241

; <label>:241:                                    ; preds = %238
  %242 = xor i64 %239, 4294967295
  %243 = add nuw i64 %242, %201
  %244 = shl i64 %243, 32
  %245 = ashr exact i64 %244, 32
  %246 = getelementptr inbounds double, double* %14, i64 %245
  %247 = load double, double* %246, align 8, !tbaa !7
  %248 = fmul double %206, %247
  %249 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %239
  %250 = load double, double* %249, align 8, !tbaa !7
  %251 = fsub double %250, %248
  store double %251, double* %249, align 8, !tbaa !7
  br label %252

; <label>:252:                                    ; preds = %238, %241
  %253 = add nuw nsw i64 %204, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* nonnull align 16 %180, i64 %253, i1 false) #7
  %254 = add nuw nsw i64 %201, 1
  %255 = add nuw nsw i64 %202, 1
  %256 = icmp eq i64 %255, %190
  br i1 %256, label %257, label %200

; <label>:257:                                    ; preds = %252, %186
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %180) #7
  br label %258

; <label>:258:                                    ; preds = %257, %126
  %259 = icmp sgt i32 %9, 0
  br i1 %259, label %260, label %344

; <label>:260:                                    ; preds = %258
  %261 = add nsw i32 %7, %5
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds double, double* %11, i64 %262
  %264 = getelementptr inbounds double, double* %14, i64 %262
  %265 = bitcast double* %264 to i8*
  %266 = bitcast [100 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %266) #7
  %267 = icmp sgt i32 %9, 100
  br i1 %267, label %270, label %268

; <label>:268:                                    ; preds = %260
  %269 = zext i32 %9 to i64
  br label %277

; <label>:270:                                    ; preds = %260
  %271 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %271) #8
  unreachable

; <label>:272:                                    ; preds = %277
  %273 = icmp sgt i32 %9, 1
  br i1 %273, label %274, label %343

; <label>:274:                                    ; preds = %272
  %275 = add i32 %9, -1
  %276 = zext i32 %275 to i64
  br label %286

; <label>:277:                                    ; preds = %277, %268
  %278 = phi i64 [ 0, %268 ], [ %284, %277 ]
  %279 = getelementptr inbounds double, double* %263, i64 %278
  %280 = load double, double* %279, align 8, !tbaa !7
  %281 = tail call double @tanh(double %280) #9
  %282 = getelementptr inbounds double, double* %264, i64 %278
  store double %281, double* %282, align 8, !tbaa !7
  %283 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %278
  store double %281, double* %283, align 8, !tbaa !7
  %284 = add nuw nsw i64 %278, 1
  %285 = icmp eq i64 %284, %269
  br i1 %285, label %272, label %277

; <label>:286:                                    ; preds = %338, %274
  %287 = phi i64 [ 1, %274 ], [ %340, %338 ]
  %288 = phi i64 [ 0, %274 ], [ %341, %338 ]
  %289 = add nuw i64 %288, 1
  %290 = shl i64 %288, 3
  %291 = getelementptr inbounds double, double* %264, i64 %287
  %292 = load double, double* %291, align 8, !tbaa !7
  %293 = and i64 %289, 1
  %294 = icmp eq i64 %288, 0
  br i1 %294, label %324, label %295

; <label>:295:                                    ; preds = %286
  %296 = sub i64 %289, %293
  br label %297

; <label>:297:                                    ; preds = %297, %295
  %298 = phi i64 [ 0, %295 ], [ %321, %297 ]
  %299 = phi i64 [ %296, %295 ], [ %322, %297 ]
  %300 = xor i64 %298, 4294967295
  %301 = add nuw i64 %300, %287
  %302 = shl i64 %301, 32
  %303 = ashr exact i64 %302, 32
  %304 = getelementptr inbounds double, double* %264, i64 %303
  %305 = load double, double* %304, align 8, !tbaa !7
  %306 = fmul double %292, %305
  %307 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %298
  %308 = load double, double* %307, align 16, !tbaa !7
  %309 = fsub double %308, %306
  store double %309, double* %307, align 16, !tbaa !7
  %310 = or i64 %298, 1
  %311 = xor i64 %298, 4294967294
  %312 = add nuw i64 %311, %287
  %313 = shl i64 %312, 32
  %314 = ashr exact i64 %313, 32
  %315 = getelementptr inbounds double, double* %264, i64 %314
  %316 = load double, double* %315, align 8, !tbaa !7
  %317 = fmul double %292, %316
  %318 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %310
  %319 = load double, double* %318, align 8, !tbaa !7
  %320 = fsub double %319, %317
  store double %320, double* %318, align 8, !tbaa !7
  %321 = add nuw nsw i64 %298, 2
  %322 = add i64 %299, -2
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %297

; <label>:324:                                    ; preds = %297, %286
  %325 = phi i64 [ 0, %286 ], [ %321, %297 ]
  %326 = icmp eq i64 %293, 0
  br i1 %326, label %338, label %327

; <label>:327:                                    ; preds = %324
  %328 = xor i64 %325, 4294967295
  %329 = add nuw i64 %328, %287
  %330 = shl i64 %329, 32
  %331 = ashr exact i64 %330, 32
  %332 = getelementptr inbounds double, double* %264, i64 %331
  %333 = load double, double* %332, align 8, !tbaa !7
  %334 = fmul double %292, %333
  %335 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %325
  %336 = load double, double* %335, align 8, !tbaa !7
  %337 = fsub double %336, %334
  store double %337, double* %335, align 8, !tbaa !7
  br label %338

; <label>:338:                                    ; preds = %324, %327
  %339 = add nuw nsw i64 %290, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %265, i8* nonnull align 16 %266, i64 %339, i1 false) #7
  %340 = add nuw nsw i64 %287, 1
  %341 = add nuw nsw i64 %288, 1
  %342 = icmp eq i64 %341, %276
  br i1 %342, label %343, label %286

; <label>:343:                                    ; preds = %338, %272
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %266) #7
  br label %344

; <label>:344:                                    ; preds = %343, %258
  ret %struct.SEXPREC* %13
}

declare i32* @INTEGER(%struct.SEXPREC*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @ARIMA_transPars(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %4 = alloca [100 x double], align 16
  %5 = tail call i32* @INTEGER(%struct.SEXPREC* %1) #7
  %6 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %2) #7
  %7 = load i32, i32* %5, align 4, !tbaa !73
  %8 = getelementptr inbounds i32, i32* %5, i64 1
  %9 = load i32, i32* %8, align 4, !tbaa !73
  %10 = getelementptr inbounds i32, i32* %5, i64 2
  %11 = load i32, i32* %10, align 4, !tbaa !73
  %12 = getelementptr inbounds i32, i32* %5, i64 3
  %13 = load i32, i32* %12, align 4, !tbaa !73
  %14 = getelementptr inbounds i32, i32* %5, i64 4
  %15 = load i32, i32* %14, align 4, !tbaa !73
  %16 = mul i32 %15, %11
  %17 = add i32 %16, %7
  %18 = mul i32 %15, %13
  %19 = add i32 %18, %9
  %20 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %21 = bitcast double* %20 to i8*
  %22 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %23 = tail call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 2) #7
  %24 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %23) #7
  %25 = sext i32 %17 to i64
  %26 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %25) #7
  %27 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %23, i64 0, %struct.SEXPREC* %26) #7
  %28 = sext i32 %19 to i64
  %29 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %28) #7
  %30 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %23, i64 1, %struct.SEXPREC* %29) #7
  %31 = tail call double* @REAL(%struct.SEXPREC* %26) #7
  %32 = tail call double* @REAL(%struct.SEXPREC* %29) #7
  %33 = icmp eq i32 %6, 0
  br i1 %33, label %370, label %34

; <label>:34:                                     ; preds = %3
  %35 = add i32 %9, %7
  %36 = add i32 %35, %11
  %37 = add i32 %36, %13
  %38 = sext i32 %37 to i64
  %39 = tail call i8* @R_alloc(i64 %38, i32 8) #7
  %40 = bitcast i8* %39 to double*
  %41 = icmp sgt i32 %37, 0
  br i1 %41, label %42, label %204

; <label>:42:                                     ; preds = %34
  %43 = zext i32 %37 to i64
  %44 = icmp ult i32 %37, 4
  br i1 %44, label %132, label %45

; <label>:45:                                     ; preds = %42
  %46 = shl nuw nsw i64 %43, 3
  %47 = getelementptr i8, i8* %39, i64 %46
  %48 = getelementptr double, double* %20, i64 %43
  %49 = bitcast double* %48 to i8*
  %50 = icmp ult i8* %39, %49
  %51 = icmp ugt i8* %47, %21
  %52 = and i1 %50, %51
  br i1 %52, label %132, label %53

; <label>:53:                                     ; preds = %45
  %54 = and i64 %43, 4294967292
  %55 = add nsw i64 %54, -4
  %56 = lshr exact i64 %55, 2
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 12
  br i1 %59, label %111, label %60

; <label>:60:                                     ; preds = %53
  %61 = sub nsw i64 %57, %58
  br label %62

; <label>:62:                                     ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr inbounds double, double* %20, i64 %63
  %66 = bitcast double* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 8, !tbaa !7, !alias.scope !84
  %68 = getelementptr inbounds double, double* %65, i64 2
  %69 = bitcast double* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !7, !alias.scope !84
  %71 = getelementptr inbounds double, double* %40, i64 %63
  %72 = bitcast double* %71 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %72, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %73 = getelementptr inbounds double, double* %71, i64 2
  %74 = bitcast double* %73 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %75 = or i64 %63, 4
  %76 = getelementptr inbounds double, double* %20, i64 %75
  %77 = bitcast double* %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !7, !alias.scope !84
  %79 = getelementptr inbounds double, double* %76, i64 2
  %80 = bitcast double* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !7, !alias.scope !84
  %82 = getelementptr inbounds double, double* %40, i64 %75
  %83 = bitcast double* %82 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %83, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %84 = getelementptr inbounds double, double* %82, i64 2
  %85 = bitcast double* %84 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %86 = or i64 %63, 8
  %87 = getelementptr inbounds double, double* %20, i64 %86
  %88 = bitcast double* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !7, !alias.scope !84
  %90 = getelementptr inbounds double, double* %87, i64 2
  %91 = bitcast double* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !tbaa !7, !alias.scope !84
  %93 = getelementptr inbounds double, double* %40, i64 %86
  %94 = bitcast double* %93 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %94, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %95 = getelementptr inbounds double, double* %93, i64 2
  %96 = bitcast double* %95 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %97 = or i64 %63, 12
  %98 = getelementptr inbounds double, double* %20, i64 %97
  %99 = bitcast double* %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8, !tbaa !7, !alias.scope !84
  %101 = getelementptr inbounds double, double* %98, i64 2
  %102 = bitcast double* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !7, !alias.scope !84
  %104 = getelementptr inbounds double, double* %40, i64 %97
  %105 = bitcast double* %104 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %105, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %106 = getelementptr inbounds double, double* %104, i64 2
  %107 = bitcast double* %106 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %108 = add i64 %63, 16
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !89

; <label>:111:                                    ; preds = %62, %53
  %112 = phi i64 [ 0, %53 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

; <label>:114:                                    ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr inbounds double, double* %20, i64 %115
  %118 = bitcast double* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !tbaa !7, !alias.scope !84
  %120 = getelementptr inbounds double, double* %117, i64 2
  %121 = bitcast double* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !tbaa !7, !alias.scope !84
  %123 = getelementptr inbounds double, double* %40, i64 %115
  %124 = bitcast double* %123 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %124, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %125 = getelementptr inbounds double, double* %123, i64 2
  %126 = bitcast double* %125 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !tbaa !7, !alias.scope !87, !noalias !84
  %127 = add i64 %115, 4
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !90

; <label>:130:                                    ; preds = %114, %111
  %131 = icmp eq i64 %54, %43
  br i1 %131, label %204, label %132

; <label>:132:                                    ; preds = %130, %45, %42
  %133 = phi i64 [ 0, %45 ], [ 0, %42 ], [ %54, %130 ]
  %134 = sub nsw i64 %43, %133
  %135 = xor i64 %133, -1
  %136 = add nsw i64 %135, %43
  %137 = and i64 %134, 7
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %150, label %139

; <label>:139:                                    ; preds = %132, %139
  %140 = phi i64 [ %147, %139 ], [ %133, %132 ]
  %141 = phi i64 [ %148, %139 ], [ %137, %132 ]
  %142 = getelementptr inbounds double, double* %20, i64 %140
  %143 = bitcast double* %142 to i64*
  %144 = load i64, i64* %143, align 8, !tbaa !7
  %145 = getelementptr inbounds double, double* %40, i64 %140
  %146 = bitcast double* %145 to i64*
  store i64 %144, i64* %146, align 8, !tbaa !7
  %147 = add nuw nsw i64 %140, 1
  %148 = add i64 %141, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %139, !llvm.loop !91

; <label>:150:                                    ; preds = %139, %132
  %151 = phi i64 [ %133, %132 ], [ %147, %139 ]
  %152 = icmp ult i64 %136, 7
  br i1 %152, label %204, label %153

; <label>:153:                                    ; preds = %150, %153
  %154 = phi i64 [ %202, %153 ], [ %151, %150 ]
  %155 = getelementptr inbounds double, double* %20, i64 %154
  %156 = bitcast double* %155 to i64*
  %157 = load i64, i64* %156, align 8, !tbaa !7
  %158 = getelementptr inbounds double, double* %40, i64 %154
  %159 = bitcast double* %158 to i64*
  store i64 %157, i64* %159, align 8, !tbaa !7
  %160 = add nuw nsw i64 %154, 1
  %161 = getelementptr inbounds double, double* %20, i64 %160
  %162 = bitcast double* %161 to i64*
  %163 = load i64, i64* %162, align 8, !tbaa !7
  %164 = getelementptr inbounds double, double* %40, i64 %160
  %165 = bitcast double* %164 to i64*
  store i64 %163, i64* %165, align 8, !tbaa !7
  %166 = add nsw i64 %154, 2
  %167 = getelementptr inbounds double, double* %20, i64 %166
  %168 = bitcast double* %167 to i64*
  %169 = load i64, i64* %168, align 8, !tbaa !7
  %170 = getelementptr inbounds double, double* %40, i64 %166
  %171 = bitcast double* %170 to i64*
  store i64 %169, i64* %171, align 8, !tbaa !7
  %172 = add nsw i64 %154, 3
  %173 = getelementptr inbounds double, double* %20, i64 %172
  %174 = bitcast double* %173 to i64*
  %175 = load i64, i64* %174, align 8, !tbaa !7
  %176 = getelementptr inbounds double, double* %40, i64 %172
  %177 = bitcast double* %176 to i64*
  store i64 %175, i64* %177, align 8, !tbaa !7
  %178 = add nsw i64 %154, 4
  %179 = getelementptr inbounds double, double* %20, i64 %178
  %180 = bitcast double* %179 to i64*
  %181 = load i64, i64* %180, align 8, !tbaa !7
  %182 = getelementptr inbounds double, double* %40, i64 %178
  %183 = bitcast double* %182 to i64*
  store i64 %181, i64* %183, align 8, !tbaa !7
  %184 = add nsw i64 %154, 5
  %185 = getelementptr inbounds double, double* %20, i64 %184
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8, !tbaa !7
  %188 = getelementptr inbounds double, double* %40, i64 %184
  %189 = bitcast double* %188 to i64*
  store i64 %187, i64* %189, align 8, !tbaa !7
  %190 = add nsw i64 %154, 6
  %191 = getelementptr inbounds double, double* %20, i64 %190
  %192 = bitcast double* %191 to i64*
  %193 = load i64, i64* %192, align 8, !tbaa !7
  %194 = getelementptr inbounds double, double* %40, i64 %190
  %195 = bitcast double* %194 to i64*
  store i64 %193, i64* %195, align 8, !tbaa !7
  %196 = add nsw i64 %154, 7
  %197 = getelementptr inbounds double, double* %20, i64 %196
  %198 = bitcast double* %197 to i64*
  %199 = load i64, i64* %198, align 8, !tbaa !7
  %200 = getelementptr inbounds double, double* %40, i64 %196
  %201 = bitcast double* %200 to i64*
  store i64 %199, i64* %201, align 8, !tbaa !7
  %202 = add nsw i64 %154, 8
  %203 = icmp eq i64 %202, %43
  br i1 %203, label %204, label %153, !llvm.loop !92

; <label>:204:                                    ; preds = %150, %153, %130, %34
  %205 = icmp sgt i32 %7, 0
  br i1 %205, label %206, label %285

; <label>:206:                                    ; preds = %204
  %207 = bitcast [100 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %207) #7
  %208 = icmp sgt i32 %7, 100
  br i1 %208, label %211, label %209

; <label>:209:                                    ; preds = %206
  %210 = zext i32 %7 to i64
  br label %218

; <label>:211:                                    ; preds = %206
  %212 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %212) #8
  unreachable

; <label>:213:                                    ; preds = %218
  %214 = icmp sgt i32 %7, 1
  br i1 %214, label %215, label %284

; <label>:215:                                    ; preds = %213
  %216 = add i32 %7, -1
  %217 = zext i32 %216 to i64
  br label %227

; <label>:218:                                    ; preds = %218, %209
  %219 = phi i64 [ 0, %209 ], [ %225, %218 ]
  %220 = getelementptr inbounds double, double* %20, i64 %219
  %221 = load double, double* %220, align 8, !tbaa !7
  %222 = tail call double @tanh(double %221) #9
  %223 = getelementptr inbounds double, double* %40, i64 %219
  store double %222, double* %223, align 8, !tbaa !7
  %224 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %219
  store double %222, double* %224, align 8, !tbaa !7
  %225 = add nuw nsw i64 %219, 1
  %226 = icmp eq i64 %225, %210
  br i1 %226, label %213, label %218

; <label>:227:                                    ; preds = %279, %215
  %228 = phi i64 [ 1, %215 ], [ %281, %279 ]
  %229 = phi i64 [ 0, %215 ], [ %282, %279 ]
  %230 = add nuw i64 %229, 1
  %231 = shl i64 %229, 3
  %232 = getelementptr inbounds double, double* %40, i64 %228
  %233 = load double, double* %232, align 8, !tbaa !7
  %234 = and i64 %230, 1
  %235 = icmp eq i64 %229, 0
  br i1 %235, label %265, label %236

; <label>:236:                                    ; preds = %227
  %237 = sub i64 %230, %234
  br label %238

; <label>:238:                                    ; preds = %238, %236
  %239 = phi i64 [ 0, %236 ], [ %262, %238 ]
  %240 = phi i64 [ %237, %236 ], [ %263, %238 ]
  %241 = xor i64 %239, 4294967295
  %242 = add nuw i64 %241, %228
  %243 = shl i64 %242, 32
  %244 = ashr exact i64 %243, 32
  %245 = getelementptr inbounds double, double* %40, i64 %244
  %246 = load double, double* %245, align 8, !tbaa !7
  %247 = fmul double %233, %246
  %248 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %239
  %249 = load double, double* %248, align 16, !tbaa !7
  %250 = fsub double %249, %247
  store double %250, double* %248, align 16, !tbaa !7
  %251 = or i64 %239, 1
  %252 = xor i64 %239, 4294967294
  %253 = add nuw i64 %252, %228
  %254 = shl i64 %253, 32
  %255 = ashr exact i64 %254, 32
  %256 = getelementptr inbounds double, double* %40, i64 %255
  %257 = load double, double* %256, align 8, !tbaa !7
  %258 = fmul double %233, %257
  %259 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %251
  %260 = load double, double* %259, align 8, !tbaa !7
  %261 = fsub double %260, %258
  store double %261, double* %259, align 8, !tbaa !7
  %262 = add nuw nsw i64 %239, 2
  %263 = add i64 %240, -2
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %238

; <label>:265:                                    ; preds = %238, %227
  %266 = phi i64 [ 0, %227 ], [ %262, %238 ]
  %267 = icmp eq i64 %234, 0
  br i1 %267, label %279, label %268

; <label>:268:                                    ; preds = %265
  %269 = xor i64 %266, 4294967295
  %270 = add nuw i64 %269, %228
  %271 = shl i64 %270, 32
  %272 = ashr exact i64 %271, 32
  %273 = getelementptr inbounds double, double* %40, i64 %272
  %274 = load double, double* %273, align 8, !tbaa !7
  %275 = fmul double %233, %274
  %276 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %266
  %277 = load double, double* %276, align 8, !tbaa !7
  %278 = fsub double %277, %275
  store double %278, double* %276, align 8, !tbaa !7
  br label %279

; <label>:279:                                    ; preds = %265, %268
  %280 = add nuw nsw i64 %231, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 16 %207, i64 %280, i1 false) #7
  %281 = add nuw nsw i64 %228, 1
  %282 = add nuw nsw i64 %229, 1
  %283 = icmp eq i64 %282, %217
  br i1 %283, label %284, label %227

; <label>:284:                                    ; preds = %279, %213
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %207) #7
  br label %285

; <label>:285:                                    ; preds = %284, %204
  %286 = icmp sgt i32 %11, 0
  br i1 %286, label %287, label %370

; <label>:287:                                    ; preds = %285
  %288 = sext i32 %35 to i64
  %289 = getelementptr inbounds double, double* %20, i64 %288
  %290 = getelementptr inbounds double, double* %40, i64 %288
  %291 = bitcast double* %290 to i8*
  %292 = bitcast [100 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %292) #7
  %293 = icmp sgt i32 %11, 100
  br i1 %293, label %296, label %294

; <label>:294:                                    ; preds = %287
  %295 = zext i32 %11 to i64
  br label %303

; <label>:296:                                    ; preds = %287
  %297 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %297) #8
  unreachable

; <label>:298:                                    ; preds = %303
  %299 = icmp sgt i32 %11, 1
  br i1 %299, label %300, label %369

; <label>:300:                                    ; preds = %298
  %301 = add i32 %11, -1
  %302 = zext i32 %301 to i64
  br label %312

; <label>:303:                                    ; preds = %303, %294
  %304 = phi i64 [ 0, %294 ], [ %310, %303 ]
  %305 = getelementptr inbounds double, double* %289, i64 %304
  %306 = load double, double* %305, align 8, !tbaa !7
  %307 = tail call double @tanh(double %306) #9
  %308 = getelementptr inbounds double, double* %290, i64 %304
  store double %307, double* %308, align 8, !tbaa !7
  %309 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %304
  store double %307, double* %309, align 8, !tbaa !7
  %310 = add nuw nsw i64 %304, 1
  %311 = icmp eq i64 %310, %295
  br i1 %311, label %298, label %303

; <label>:312:                                    ; preds = %364, %300
  %313 = phi i64 [ 1, %300 ], [ %366, %364 ]
  %314 = phi i64 [ 0, %300 ], [ %367, %364 ]
  %315 = add nuw i64 %314, 1
  %316 = shl i64 %314, 3
  %317 = getelementptr inbounds double, double* %290, i64 %313
  %318 = load double, double* %317, align 8, !tbaa !7
  %319 = and i64 %315, 1
  %320 = icmp eq i64 %314, 0
  br i1 %320, label %350, label %321

; <label>:321:                                    ; preds = %312
  %322 = sub i64 %315, %319
  br label %323

; <label>:323:                                    ; preds = %323, %321
  %324 = phi i64 [ 0, %321 ], [ %347, %323 ]
  %325 = phi i64 [ %322, %321 ], [ %348, %323 ]
  %326 = xor i64 %324, 4294967295
  %327 = add nuw i64 %326, %313
  %328 = shl i64 %327, 32
  %329 = ashr exact i64 %328, 32
  %330 = getelementptr inbounds double, double* %290, i64 %329
  %331 = load double, double* %330, align 8, !tbaa !7
  %332 = fmul double %318, %331
  %333 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %324
  %334 = load double, double* %333, align 16, !tbaa !7
  %335 = fsub double %334, %332
  store double %335, double* %333, align 16, !tbaa !7
  %336 = or i64 %324, 1
  %337 = xor i64 %324, 4294967294
  %338 = add nuw i64 %337, %313
  %339 = shl i64 %338, 32
  %340 = ashr exact i64 %339, 32
  %341 = getelementptr inbounds double, double* %290, i64 %340
  %342 = load double, double* %341, align 8, !tbaa !7
  %343 = fmul double %318, %342
  %344 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %336
  %345 = load double, double* %344, align 8, !tbaa !7
  %346 = fsub double %345, %343
  store double %346, double* %344, align 8, !tbaa !7
  %347 = add nuw nsw i64 %324, 2
  %348 = add i64 %325, -2
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %350, label %323

; <label>:350:                                    ; preds = %323, %312
  %351 = phi i64 [ 0, %312 ], [ %347, %323 ]
  %352 = icmp eq i64 %319, 0
  br i1 %352, label %364, label %353

; <label>:353:                                    ; preds = %350
  %354 = xor i64 %351, 4294967295
  %355 = add nuw i64 %354, %313
  %356 = shl i64 %355, 32
  %357 = ashr exact i64 %356, 32
  %358 = getelementptr inbounds double, double* %290, i64 %357
  %359 = load double, double* %358, align 8, !tbaa !7
  %360 = fmul double %318, %359
  %361 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %351
  %362 = load double, double* %361, align 8, !tbaa !7
  %363 = fsub double %362, %360
  store double %363, double* %361, align 8, !tbaa !7
  br label %364

; <label>:364:                                    ; preds = %350, %353
  %365 = add nuw nsw i64 %316, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %291, i8* nonnull align 16 %292, i64 %365, i1 false) #7
  %366 = add nuw nsw i64 %313, 1
  %367 = add nuw nsw i64 %314, 1
  %368 = icmp eq i64 %367, %302
  br i1 %368, label %369, label %312

; <label>:369:                                    ; preds = %364, %298
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %292) #7
  br label %370

; <label>:370:                                    ; preds = %285, %369, %3
  %371 = phi double* [ %22, %3 ], [ %40, %369 ], [ %40, %285 ]
  %372 = bitcast double* %371 to i8*
  %373 = icmp sgt i32 %15, 0
  %374 = icmp sgt i32 %7, 0
  br i1 %373, label %485, label %375

; <label>:375:                                    ; preds = %370
  br i1 %374, label %376, label %1152

; <label>:376:                                    ; preds = %375
  %377 = zext i32 %7 to i64
  %378 = icmp ult i32 %7, 4
  br i1 %378, label %379, label %400

; <label>:379:                                    ; preds = %483, %400, %376
  %380 = phi i64 [ 0, %400 ], [ 0, %376 ], [ %407, %483 ]
  %381 = sub nsw i64 %377, %380
  %382 = xor i64 %380, -1
  %383 = add nsw i64 %382, %377
  %384 = and i64 %381, 7
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %397, label %386

; <label>:386:                                    ; preds = %379, %386
  %387 = phi i64 [ %394, %386 ], [ %380, %379 ]
  %388 = phi i64 [ %395, %386 ], [ %384, %379 ]
  %389 = getelementptr inbounds double, double* %371, i64 %387
  %390 = bitcast double* %389 to i64*
  %391 = load i64, i64* %390, align 8, !tbaa !7
  %392 = getelementptr inbounds double, double* %31, i64 %387
  %393 = bitcast double* %392 to i64*
  store i64 %391, i64* %393, align 8, !tbaa !7
  %394 = add nuw nsw i64 %387, 1
  %395 = add i64 %388, -1
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %386, !llvm.loop !93

; <label>:397:                                    ; preds = %386, %379
  %398 = phi i64 [ %380, %379 ], [ %394, %386 ]
  %399 = icmp ult i64 %383, 7
  br i1 %399, label %1152, label %1271

; <label>:400:                                    ; preds = %376
  %401 = getelementptr double, double* %31, i64 %377
  %402 = getelementptr double, double* %371, i64 %377
  %403 = icmp ult double* %31, %402
  %404 = icmp ult double* %371, %401
  %405 = and i1 %403, %404
  br i1 %405, label %379, label %406

; <label>:406:                                    ; preds = %400
  %407 = and i64 %377, 4294967292
  %408 = add nsw i64 %407, -4
  %409 = lshr exact i64 %408, 2
  %410 = add nuw nsw i64 %409, 1
  %411 = and i64 %410, 3
  %412 = icmp ult i64 %408, 12
  br i1 %412, label %464, label %413

; <label>:413:                                    ; preds = %406
  %414 = sub nsw i64 %410, %411
  br label %415

; <label>:415:                                    ; preds = %415, %413
  %416 = phi i64 [ 0, %413 ], [ %461, %415 ]
  %417 = phi i64 [ %414, %413 ], [ %462, %415 ]
  %418 = getelementptr inbounds double, double* %371, i64 %416
  %419 = bitcast double* %418 to <2 x i64>*
  %420 = load <2 x i64>, <2 x i64>* %419, align 8, !tbaa !7, !alias.scope !94
  %421 = getelementptr inbounds double, double* %418, i64 2
  %422 = bitcast double* %421 to <2 x i64>*
  %423 = load <2 x i64>, <2 x i64>* %422, align 8, !tbaa !7, !alias.scope !94
  %424 = getelementptr inbounds double, double* %31, i64 %416
  %425 = bitcast double* %424 to <2 x i64>*
  store <2 x i64> %420, <2 x i64>* %425, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %426 = getelementptr inbounds double, double* %424, i64 2
  %427 = bitcast double* %426 to <2 x i64>*
  store <2 x i64> %423, <2 x i64>* %427, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %428 = or i64 %416, 4
  %429 = getelementptr inbounds double, double* %371, i64 %428
  %430 = bitcast double* %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 8, !tbaa !7, !alias.scope !94
  %432 = getelementptr inbounds double, double* %429, i64 2
  %433 = bitcast double* %432 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %433, align 8, !tbaa !7, !alias.scope !94
  %435 = getelementptr inbounds double, double* %31, i64 %428
  %436 = bitcast double* %435 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %436, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %437 = getelementptr inbounds double, double* %435, i64 2
  %438 = bitcast double* %437 to <2 x i64>*
  store <2 x i64> %434, <2 x i64>* %438, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %439 = or i64 %416, 8
  %440 = getelementptr inbounds double, double* %371, i64 %439
  %441 = bitcast double* %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 8, !tbaa !7, !alias.scope !94
  %443 = getelementptr inbounds double, double* %440, i64 2
  %444 = bitcast double* %443 to <2 x i64>*
  %445 = load <2 x i64>, <2 x i64>* %444, align 8, !tbaa !7, !alias.scope !94
  %446 = getelementptr inbounds double, double* %31, i64 %439
  %447 = bitcast double* %446 to <2 x i64>*
  store <2 x i64> %442, <2 x i64>* %447, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %448 = getelementptr inbounds double, double* %446, i64 2
  %449 = bitcast double* %448 to <2 x i64>*
  store <2 x i64> %445, <2 x i64>* %449, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %450 = or i64 %416, 12
  %451 = getelementptr inbounds double, double* %371, i64 %450
  %452 = bitcast double* %451 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 8, !tbaa !7, !alias.scope !94
  %454 = getelementptr inbounds double, double* %451, i64 2
  %455 = bitcast double* %454 to <2 x i64>*
  %456 = load <2 x i64>, <2 x i64>* %455, align 8, !tbaa !7, !alias.scope !94
  %457 = getelementptr inbounds double, double* %31, i64 %450
  %458 = bitcast double* %457 to <2 x i64>*
  store <2 x i64> %453, <2 x i64>* %458, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %459 = getelementptr inbounds double, double* %457, i64 2
  %460 = bitcast double* %459 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %460, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %461 = add i64 %416, 16
  %462 = add i64 %417, -4
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %464, label %415, !llvm.loop !99

; <label>:464:                                    ; preds = %415, %406
  %465 = phi i64 [ 0, %406 ], [ %461, %415 ]
  %466 = icmp eq i64 %411, 0
  br i1 %466, label %483, label %467

; <label>:467:                                    ; preds = %464, %467
  %468 = phi i64 [ %480, %467 ], [ %465, %464 ]
  %469 = phi i64 [ %481, %467 ], [ %411, %464 ]
  %470 = getelementptr inbounds double, double* %371, i64 %468
  %471 = bitcast double* %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !tbaa !7, !alias.scope !94
  %473 = getelementptr inbounds double, double* %470, i64 2
  %474 = bitcast double* %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 8, !tbaa !7, !alias.scope !94
  %476 = getelementptr inbounds double, double* %31, i64 %468
  %477 = bitcast double* %476 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %477, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %478 = getelementptr inbounds double, double* %476, i64 2
  %479 = bitcast double* %478 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %479, align 8, !tbaa !7, !alias.scope !97, !noalias !94
  %480 = add i64 %468, 4
  %481 = add i64 %469, -1
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %483, label %467, !llvm.loop !100

; <label>:483:                                    ; preds = %467, %464
  %484 = icmp eq i64 %407, %377
  br i1 %484, label %1152, label %379

; <label>:485:                                    ; preds = %370
  br i1 %374, label %486, label %595

; <label>:486:                                    ; preds = %485
  %487 = zext i32 %7 to i64
  %488 = icmp ult i32 %7, 4
  br i1 %488, label %489, label %510

; <label>:489:                                    ; preds = %593, %510, %486
  %490 = phi i64 [ 0, %510 ], [ 0, %486 ], [ %517, %593 ]
  %491 = sub nsw i64 %487, %490
  %492 = xor i64 %490, -1
  %493 = add nsw i64 %492, %487
  %494 = and i64 %491, 7
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %507, label %496

; <label>:496:                                    ; preds = %489, %496
  %497 = phi i64 [ %504, %496 ], [ %490, %489 ]
  %498 = phi i64 [ %505, %496 ], [ %494, %489 ]
  %499 = getelementptr inbounds double, double* %371, i64 %497
  %500 = bitcast double* %499 to i64*
  %501 = load i64, i64* %500, align 8, !tbaa !7
  %502 = getelementptr inbounds double, double* %31, i64 %497
  %503 = bitcast double* %502 to i64*
  store i64 %501, i64* %503, align 8, !tbaa !7
  %504 = add nuw nsw i64 %497, 1
  %505 = add i64 %498, -1
  %506 = icmp eq i64 %505, 0
  br i1 %506, label %507, label %496, !llvm.loop !101

; <label>:507:                                    ; preds = %496, %489
  %508 = phi i64 [ %490, %489 ], [ %504, %496 ]
  %509 = icmp ult i64 %493, 7
  br i1 %509, label %595, label %714

; <label>:510:                                    ; preds = %486
  %511 = getelementptr double, double* %31, i64 %487
  %512 = getelementptr double, double* %371, i64 %487
  %513 = icmp ult double* %31, %512
  %514 = icmp ult double* %371, %511
  %515 = and i1 %513, %514
  br i1 %515, label %489, label %516

; <label>:516:                                    ; preds = %510
  %517 = and i64 %487, 4294967292
  %518 = add nsw i64 %517, -4
  %519 = lshr exact i64 %518, 2
  %520 = add nuw nsw i64 %519, 1
  %521 = and i64 %520, 3
  %522 = icmp ult i64 %518, 12
  br i1 %522, label %574, label %523

; <label>:523:                                    ; preds = %516
  %524 = sub nsw i64 %520, %521
  br label %525

; <label>:525:                                    ; preds = %525, %523
  %526 = phi i64 [ 0, %523 ], [ %571, %525 ]
  %527 = phi i64 [ %524, %523 ], [ %572, %525 ]
  %528 = getelementptr inbounds double, double* %371, i64 %526
  %529 = bitcast double* %528 to <2 x i64>*
  %530 = load <2 x i64>, <2 x i64>* %529, align 8, !tbaa !7, !alias.scope !102
  %531 = getelementptr inbounds double, double* %528, i64 2
  %532 = bitcast double* %531 to <2 x i64>*
  %533 = load <2 x i64>, <2 x i64>* %532, align 8, !tbaa !7, !alias.scope !102
  %534 = getelementptr inbounds double, double* %31, i64 %526
  %535 = bitcast double* %534 to <2 x i64>*
  store <2 x i64> %530, <2 x i64>* %535, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %536 = getelementptr inbounds double, double* %534, i64 2
  %537 = bitcast double* %536 to <2 x i64>*
  store <2 x i64> %533, <2 x i64>* %537, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %538 = or i64 %526, 4
  %539 = getelementptr inbounds double, double* %371, i64 %538
  %540 = bitcast double* %539 to <2 x i64>*
  %541 = load <2 x i64>, <2 x i64>* %540, align 8, !tbaa !7, !alias.scope !102
  %542 = getelementptr inbounds double, double* %539, i64 2
  %543 = bitcast double* %542 to <2 x i64>*
  %544 = load <2 x i64>, <2 x i64>* %543, align 8, !tbaa !7, !alias.scope !102
  %545 = getelementptr inbounds double, double* %31, i64 %538
  %546 = bitcast double* %545 to <2 x i64>*
  store <2 x i64> %541, <2 x i64>* %546, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %547 = getelementptr inbounds double, double* %545, i64 2
  %548 = bitcast double* %547 to <2 x i64>*
  store <2 x i64> %544, <2 x i64>* %548, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %549 = or i64 %526, 8
  %550 = getelementptr inbounds double, double* %371, i64 %549
  %551 = bitcast double* %550 to <2 x i64>*
  %552 = load <2 x i64>, <2 x i64>* %551, align 8, !tbaa !7, !alias.scope !102
  %553 = getelementptr inbounds double, double* %550, i64 2
  %554 = bitcast double* %553 to <2 x i64>*
  %555 = load <2 x i64>, <2 x i64>* %554, align 8, !tbaa !7, !alias.scope !102
  %556 = getelementptr inbounds double, double* %31, i64 %549
  %557 = bitcast double* %556 to <2 x i64>*
  store <2 x i64> %552, <2 x i64>* %557, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %558 = getelementptr inbounds double, double* %556, i64 2
  %559 = bitcast double* %558 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %559, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %560 = or i64 %526, 12
  %561 = getelementptr inbounds double, double* %371, i64 %560
  %562 = bitcast double* %561 to <2 x i64>*
  %563 = load <2 x i64>, <2 x i64>* %562, align 8, !tbaa !7, !alias.scope !102
  %564 = getelementptr inbounds double, double* %561, i64 2
  %565 = bitcast double* %564 to <2 x i64>*
  %566 = load <2 x i64>, <2 x i64>* %565, align 8, !tbaa !7, !alias.scope !102
  %567 = getelementptr inbounds double, double* %31, i64 %560
  %568 = bitcast double* %567 to <2 x i64>*
  store <2 x i64> %563, <2 x i64>* %568, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %569 = getelementptr inbounds double, double* %567, i64 2
  %570 = bitcast double* %569 to <2 x i64>*
  store <2 x i64> %566, <2 x i64>* %570, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %571 = add i64 %526, 16
  %572 = add i64 %527, -4
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %525, !llvm.loop !107

; <label>:574:                                    ; preds = %525, %516
  %575 = phi i64 [ 0, %516 ], [ %571, %525 ]
  %576 = icmp eq i64 %521, 0
  br i1 %576, label %593, label %577

; <label>:577:                                    ; preds = %574, %577
  %578 = phi i64 [ %590, %577 ], [ %575, %574 ]
  %579 = phi i64 [ %591, %577 ], [ %521, %574 ]
  %580 = getelementptr inbounds double, double* %371, i64 %578
  %581 = bitcast double* %580 to <2 x i64>*
  %582 = load <2 x i64>, <2 x i64>* %581, align 8, !tbaa !7, !alias.scope !102
  %583 = getelementptr inbounds double, double* %580, i64 2
  %584 = bitcast double* %583 to <2 x i64>*
  %585 = load <2 x i64>, <2 x i64>* %584, align 8, !tbaa !7, !alias.scope !102
  %586 = getelementptr inbounds double, double* %31, i64 %578
  %587 = bitcast double* %586 to <2 x i64>*
  store <2 x i64> %582, <2 x i64>* %587, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %588 = getelementptr inbounds double, double* %586, i64 2
  %589 = bitcast double* %588 to <2 x i64>*
  store <2 x i64> %585, <2 x i64>* %589, align 8, !tbaa !7, !alias.scope !105, !noalias !102
  %590 = add i64 %578, 4
  %591 = add i64 %579, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %577, !llvm.loop !108

; <label>:593:                                    ; preds = %577, %574
  %594 = icmp eq i64 %517, %487
  br i1 %594, label %595, label %489

; <label>:595:                                    ; preds = %507, %714, %593, %485
  %596 = icmp sgt i32 %9, 0
  br i1 %596, label %597, label %765

; <label>:597:                                    ; preds = %595
  %598 = sext i32 %7 to i64
  %599 = zext i32 %9 to i64
  %600 = icmp ult i32 %9, 4
  br i1 %600, label %601, label %622

; <label>:601:                                    ; preds = %712, %622, %597
  %602 = phi i64 [ 0, %622 ], [ 0, %597 ], [ %631, %712 ]
  %603 = xor i64 %602, -1
  %604 = add nsw i64 %603, %599
  %605 = and i64 %599, 3
  %606 = icmp eq i64 %605, 0
  br i1 %606, label %619, label %607

; <label>:607:                                    ; preds = %601, %607
  %608 = phi i64 [ %616, %607 ], [ %602, %601 ]
  %609 = phi i64 [ %617, %607 ], [ %605, %601 ]
  %610 = add nsw i64 %608, %598
  %611 = getelementptr inbounds double, double* %371, i64 %610
  %612 = bitcast double* %611 to i64*
  %613 = load i64, i64* %612, align 8, !tbaa !7
  %614 = getelementptr inbounds double, double* %32, i64 %608
  %615 = bitcast double* %614 to i64*
  store i64 %613, i64* %615, align 8, !tbaa !7
  %616 = add nuw nsw i64 %608, 1
  %617 = add i64 %609, -1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %607, !llvm.loop !109

; <label>:619:                                    ; preds = %607, %601
  %620 = phi i64 [ %602, %601 ], [ %616, %607 ]
  %621 = icmp ult i64 %604, 3
  br i1 %621, label %765, label %779

; <label>:622:                                    ; preds = %597
  %623 = getelementptr double, double* %32, i64 %599
  %624 = getelementptr double, double* %371, i64 %598
  %625 = add nsw i64 %598, %599
  %626 = getelementptr double, double* %371, i64 %625
  %627 = icmp ult double* %32, %626
  %628 = icmp ult double* %624, %623
  %629 = and i1 %627, %628
  br i1 %629, label %601, label %630

; <label>:630:                                    ; preds = %622
  %631 = and i64 %599, 4294967292
  %632 = add nsw i64 %631, -4
  %633 = lshr exact i64 %632, 2
  %634 = add nuw nsw i64 %633, 1
  %635 = and i64 %634, 3
  %636 = icmp ult i64 %632, 12
  br i1 %636, label %692, label %637

; <label>:637:                                    ; preds = %630
  %638 = sub nsw i64 %634, %635
  br label %639

; <label>:639:                                    ; preds = %639, %637
  %640 = phi i64 [ 0, %637 ], [ %689, %639 ]
  %641 = phi i64 [ %638, %637 ], [ %690, %639 ]
  %642 = add nsw i64 %640, %598
  %643 = getelementptr inbounds double, double* %371, i64 %642
  %644 = bitcast double* %643 to <2 x i64>*
  %645 = load <2 x i64>, <2 x i64>* %644, align 8, !tbaa !7, !alias.scope !110
  %646 = getelementptr inbounds double, double* %643, i64 2
  %647 = bitcast double* %646 to <2 x i64>*
  %648 = load <2 x i64>, <2 x i64>* %647, align 8, !tbaa !7, !alias.scope !110
  %649 = getelementptr inbounds double, double* %32, i64 %640
  %650 = bitcast double* %649 to <2 x i64>*
  store <2 x i64> %645, <2 x i64>* %650, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %651 = getelementptr inbounds double, double* %649, i64 2
  %652 = bitcast double* %651 to <2 x i64>*
  store <2 x i64> %648, <2 x i64>* %652, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %653 = or i64 %640, 4
  %654 = add nsw i64 %653, %598
  %655 = getelementptr inbounds double, double* %371, i64 %654
  %656 = bitcast double* %655 to <2 x i64>*
  %657 = load <2 x i64>, <2 x i64>* %656, align 8, !tbaa !7, !alias.scope !110
  %658 = getelementptr inbounds double, double* %655, i64 2
  %659 = bitcast double* %658 to <2 x i64>*
  %660 = load <2 x i64>, <2 x i64>* %659, align 8, !tbaa !7, !alias.scope !110
  %661 = getelementptr inbounds double, double* %32, i64 %653
  %662 = bitcast double* %661 to <2 x i64>*
  store <2 x i64> %657, <2 x i64>* %662, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %663 = getelementptr inbounds double, double* %661, i64 2
  %664 = bitcast double* %663 to <2 x i64>*
  store <2 x i64> %660, <2 x i64>* %664, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %665 = or i64 %640, 8
  %666 = add nsw i64 %665, %598
  %667 = getelementptr inbounds double, double* %371, i64 %666
  %668 = bitcast double* %667 to <2 x i64>*
  %669 = load <2 x i64>, <2 x i64>* %668, align 8, !tbaa !7, !alias.scope !110
  %670 = getelementptr inbounds double, double* %667, i64 2
  %671 = bitcast double* %670 to <2 x i64>*
  %672 = load <2 x i64>, <2 x i64>* %671, align 8, !tbaa !7, !alias.scope !110
  %673 = getelementptr inbounds double, double* %32, i64 %665
  %674 = bitcast double* %673 to <2 x i64>*
  store <2 x i64> %669, <2 x i64>* %674, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %675 = getelementptr inbounds double, double* %673, i64 2
  %676 = bitcast double* %675 to <2 x i64>*
  store <2 x i64> %672, <2 x i64>* %676, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %677 = or i64 %640, 12
  %678 = add nsw i64 %677, %598
  %679 = getelementptr inbounds double, double* %371, i64 %678
  %680 = bitcast double* %679 to <2 x i64>*
  %681 = load <2 x i64>, <2 x i64>* %680, align 8, !tbaa !7, !alias.scope !110
  %682 = getelementptr inbounds double, double* %679, i64 2
  %683 = bitcast double* %682 to <2 x i64>*
  %684 = load <2 x i64>, <2 x i64>* %683, align 8, !tbaa !7, !alias.scope !110
  %685 = getelementptr inbounds double, double* %32, i64 %677
  %686 = bitcast double* %685 to <2 x i64>*
  store <2 x i64> %681, <2 x i64>* %686, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %687 = getelementptr inbounds double, double* %685, i64 2
  %688 = bitcast double* %687 to <2 x i64>*
  store <2 x i64> %684, <2 x i64>* %688, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %689 = add i64 %640, 16
  %690 = add i64 %641, -4
  %691 = icmp eq i64 %690, 0
  br i1 %691, label %692, label %639, !llvm.loop !115

; <label>:692:                                    ; preds = %639, %630
  %693 = phi i64 [ 0, %630 ], [ %689, %639 ]
  %694 = icmp eq i64 %635, 0
  br i1 %694, label %712, label %695

; <label>:695:                                    ; preds = %692, %695
  %696 = phi i64 [ %709, %695 ], [ %693, %692 ]
  %697 = phi i64 [ %710, %695 ], [ %635, %692 ]
  %698 = add nsw i64 %696, %598
  %699 = getelementptr inbounds double, double* %371, i64 %698
  %700 = bitcast double* %699 to <2 x i64>*
  %701 = load <2 x i64>, <2 x i64>* %700, align 8, !tbaa !7, !alias.scope !110
  %702 = getelementptr inbounds double, double* %699, i64 2
  %703 = bitcast double* %702 to <2 x i64>*
  %704 = load <2 x i64>, <2 x i64>* %703, align 8, !tbaa !7, !alias.scope !110
  %705 = getelementptr inbounds double, double* %32, i64 %696
  %706 = bitcast double* %705 to <2 x i64>*
  store <2 x i64> %701, <2 x i64>* %706, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %707 = getelementptr inbounds double, double* %705, i64 2
  %708 = bitcast double* %707 to <2 x i64>*
  store <2 x i64> %704, <2 x i64>* %708, align 8, !tbaa !7, !alias.scope !113, !noalias !110
  %709 = add i64 %696, 4
  %710 = add i64 %697, -1
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %695, !llvm.loop !116

; <label>:712:                                    ; preds = %695, %692
  %713 = icmp eq i64 %631, %599
  br i1 %713, label %765, label %601

; <label>:714:                                    ; preds = %507, %714
  %715 = phi i64 [ %763, %714 ], [ %508, %507 ]
  %716 = getelementptr inbounds double, double* %371, i64 %715
  %717 = bitcast double* %716 to i64*
  %718 = load i64, i64* %717, align 8, !tbaa !7
  %719 = getelementptr inbounds double, double* %31, i64 %715
  %720 = bitcast double* %719 to i64*
  store i64 %718, i64* %720, align 8, !tbaa !7
  %721 = add nuw nsw i64 %715, 1
  %722 = getelementptr inbounds double, double* %371, i64 %721
  %723 = bitcast double* %722 to i64*
  %724 = load i64, i64* %723, align 8, !tbaa !7
  %725 = getelementptr inbounds double, double* %31, i64 %721
  %726 = bitcast double* %725 to i64*
  store i64 %724, i64* %726, align 8, !tbaa !7
  %727 = add nsw i64 %715, 2
  %728 = getelementptr inbounds double, double* %371, i64 %727
  %729 = bitcast double* %728 to i64*
  %730 = load i64, i64* %729, align 8, !tbaa !7
  %731 = getelementptr inbounds double, double* %31, i64 %727
  %732 = bitcast double* %731 to i64*
  store i64 %730, i64* %732, align 8, !tbaa !7
  %733 = add nsw i64 %715, 3
  %734 = getelementptr inbounds double, double* %371, i64 %733
  %735 = bitcast double* %734 to i64*
  %736 = load i64, i64* %735, align 8, !tbaa !7
  %737 = getelementptr inbounds double, double* %31, i64 %733
  %738 = bitcast double* %737 to i64*
  store i64 %736, i64* %738, align 8, !tbaa !7
  %739 = add nsw i64 %715, 4
  %740 = getelementptr inbounds double, double* %371, i64 %739
  %741 = bitcast double* %740 to i64*
  %742 = load i64, i64* %741, align 8, !tbaa !7
  %743 = getelementptr inbounds double, double* %31, i64 %739
  %744 = bitcast double* %743 to i64*
  store i64 %742, i64* %744, align 8, !tbaa !7
  %745 = add nsw i64 %715, 5
  %746 = getelementptr inbounds double, double* %371, i64 %745
  %747 = bitcast double* %746 to i64*
  %748 = load i64, i64* %747, align 8, !tbaa !7
  %749 = getelementptr inbounds double, double* %31, i64 %745
  %750 = bitcast double* %749 to i64*
  store i64 %748, i64* %750, align 8, !tbaa !7
  %751 = add nsw i64 %715, 6
  %752 = getelementptr inbounds double, double* %371, i64 %751
  %753 = bitcast double* %752 to i64*
  %754 = load i64, i64* %753, align 8, !tbaa !7
  %755 = getelementptr inbounds double, double* %31, i64 %751
  %756 = bitcast double* %755 to i64*
  store i64 %754, i64* %756, align 8, !tbaa !7
  %757 = add nsw i64 %715, 7
  %758 = getelementptr inbounds double, double* %371, i64 %757
  %759 = bitcast double* %758 to i64*
  %760 = load i64, i64* %759, align 8, !tbaa !7
  %761 = getelementptr inbounds double, double* %31, i64 %757
  %762 = bitcast double* %761 to i64*
  store i64 %760, i64* %762, align 8, !tbaa !7
  %763 = add nsw i64 %715, 8
  %764 = icmp eq i64 %763, %487
  br i1 %764, label %595, label %714, !llvm.loop !117

; <label>:765:                                    ; preds = %619, %779, %712, %595
  %766 = icmp sgt i32 %16, 0
  br i1 %766, label %767, label %810

; <label>:767:                                    ; preds = %765
  %768 = sext i32 %7 to i64
  %769 = getelementptr double, double* %31, i64 %768
  %770 = bitcast double* %769 to i8*
  %771 = add i32 %7, 1
  %772 = icmp sgt i32 %17, %771
  %773 = select i1 %772, i32 %17, i32 %771
  %774 = xor i32 %7, -1
  %775 = add i32 %773, %774
  %776 = zext i32 %775 to i64
  %777 = shl nuw nsw i64 %776, 3
  %778 = add nuw nsw i64 %777, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %770, i8 0, i64 %778, i1 false)
  br label %810

; <label>:779:                                    ; preds = %619, %779
  %780 = phi i64 [ %808, %779 ], [ %620, %619 ]
  %781 = add nsw i64 %780, %598
  %782 = getelementptr inbounds double, double* %371, i64 %781
  %783 = bitcast double* %782 to i64*
  %784 = load i64, i64* %783, align 8, !tbaa !7
  %785 = getelementptr inbounds double, double* %32, i64 %780
  %786 = bitcast double* %785 to i64*
  store i64 %784, i64* %786, align 8, !tbaa !7
  %787 = add nuw nsw i64 %780, 1
  %788 = add nsw i64 %787, %598
  %789 = getelementptr inbounds double, double* %371, i64 %788
  %790 = bitcast double* %789 to i64*
  %791 = load i64, i64* %790, align 8, !tbaa !7
  %792 = getelementptr inbounds double, double* %32, i64 %787
  %793 = bitcast double* %792 to i64*
  store i64 %791, i64* %793, align 8, !tbaa !7
  %794 = add nsw i64 %780, 2
  %795 = add nsw i64 %794, %598
  %796 = getelementptr inbounds double, double* %371, i64 %795
  %797 = bitcast double* %796 to i64*
  %798 = load i64, i64* %797, align 8, !tbaa !7
  %799 = getelementptr inbounds double, double* %32, i64 %794
  %800 = bitcast double* %799 to i64*
  store i64 %798, i64* %800, align 8, !tbaa !7
  %801 = add nsw i64 %780, 3
  %802 = add nsw i64 %801, %598
  %803 = getelementptr inbounds double, double* %371, i64 %802
  %804 = bitcast double* %803 to i64*
  %805 = load i64, i64* %804, align 8, !tbaa !7
  %806 = getelementptr inbounds double, double* %32, i64 %801
  %807 = bitcast double* %806 to i64*
  store i64 %805, i64* %807, align 8, !tbaa !7
  %808 = add nsw i64 %780, 4
  %809 = icmp eq i64 %808, %599
  br i1 %809, label %765, label %779, !llvm.loop !118

; <label>:810:                                    ; preds = %767, %765
  %811 = icmp sgt i32 %18, 0
  br i1 %811, label %812, label %824

; <label>:812:                                    ; preds = %810
  %813 = sext i32 %9 to i64
  %814 = getelementptr double, double* %32, i64 %813
  %815 = bitcast double* %814 to i8*
  %816 = add i32 %9, 1
  %817 = icmp sgt i32 %19, %816
  %818 = select i1 %817, i32 %19, i32 %816
  %819 = xor i32 %9, -1
  %820 = add i32 %818, %819
  %821 = zext i32 %820 to i64
  %822 = shl nuw nsw i64 %821, 3
  %823 = add nuw nsw i64 %822, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %815, i8 0, i64 %823, i1 false)
  br label %824

; <label>:824:                                    ; preds = %812, %810
  %825 = icmp sgt i32 %11, 0
  br i1 %825, label %826, label %963

; <label>:826:                                    ; preds = %824
  %827 = add i32 %9, %7
  %828 = sext i32 %15 to i64
  %829 = zext i32 %11 to i64
  br i1 %374, label %835, label %830

; <label>:830:                                    ; preds = %826
  %831 = and i64 %829, 1
  %832 = icmp eq i32 %11, 1
  br i1 %832, label %948, label %833

; <label>:833:                                    ; preds = %830
  %834 = sub nsw i64 %829, %831
  br label %1098

; <label>:835:                                    ; preds = %826
  %836 = zext i32 %7 to i64
  %837 = add nsw i64 %828, %836
  %838 = getelementptr i8, i8* %372, i64 1
  %839 = add i32 %7, %9
  %840 = getelementptr double, double* %371, i64 %836
  %841 = icmp ult i32 %7, 4
  %842 = and i64 %836, 4294967292
  %843 = icmp eq i64 %842, %836
  %844 = and i64 %836, 1
  %845 = icmp eq i64 %844, 0
  %846 = sub nsw i64 0, %836
  br label %847

; <label>:847:                                    ; preds = %946, %835
  %848 = phi i64 [ 0, %835 ], [ %859, %946 ]
  %849 = mul i64 %848, %828
  %850 = add i64 %849, %828
  %851 = getelementptr double, double* %31, i64 %850
  %852 = add i64 %837, %849
  %853 = getelementptr double, double* %31, i64 %852
  %854 = trunc i64 %848 to i32
  %855 = add i32 %827, %854
  %856 = sext i32 %855 to i64
  %857 = getelementptr inbounds double, double* %371, i64 %856
  %858 = load double, double* %857, align 8, !tbaa !7
  %859 = add nuw nsw i64 %848, 1
  %860 = mul nsw i64 %859, %828
  %861 = add nsw i64 %860, -1
  %862 = getelementptr inbounds double, double* %31, i64 %861
  %863 = load double, double* %862, align 8, !tbaa !7
  %864 = fadd double %858, %863
  store double %864, double* %862, align 8, !tbaa !7
  br i1 %841, label %909, label %865

; <label>:865:                                    ; preds = %847
  %866 = bitcast double* %851 to i8*
  %867 = trunc i64 %848 to i32
  %868 = add i32 %839, %867
  %869 = sext i32 %868 to i64
  %870 = shl nsw i64 %869, 3
  %871 = getelementptr i8, i8* %838, i64 %870
  %872 = icmp ugt i8* %871, %866
  %873 = icmp ult double* %857, %853
  %874 = and i1 %872, %873
  %875 = icmp ult double* %851, %840
  %876 = icmp ult double* %371, %853
  %877 = and i1 %875, %876
  %878 = or i1 %874, %877
  br i1 %878, label %909, label %879

; <label>:879:                                    ; preds = %865
  %880 = load double, double* %857, align 8, !tbaa !7, !alias.scope !119
  %881 = insertelement <2 x double> undef, double %880, i32 0
  %882 = shufflevector <2 x double> %881, <2 x double> undef, <2 x i32> zeroinitializer
  %883 = insertelement <2 x double> undef, double %880, i32 0
  %884 = shufflevector <2 x double> %883, <2 x double> undef, <2 x i32> zeroinitializer
  br label %885

; <label>:885:                                    ; preds = %885, %879
  %886 = phi i64 [ 0, %879 ], [ %906, %885 ]
  %887 = getelementptr inbounds double, double* %371, i64 %886
  %888 = bitcast double* %887 to <2 x double>*
  %889 = load <2 x double>, <2 x double>* %888, align 8, !tbaa !7, !alias.scope !122
  %890 = getelementptr inbounds double, double* %887, i64 2
  %891 = bitcast double* %890 to <2 x double>*
  %892 = load <2 x double>, <2 x double>* %891, align 8, !tbaa !7, !alias.scope !122
  %893 = fmul <2 x double> %889, %882
  %894 = fmul <2 x double> %892, %884
  %895 = add nsw i64 %886, %860
  %896 = getelementptr inbounds double, double* %31, i64 %895
  %897 = bitcast double* %896 to <2 x double>*
  %898 = load <2 x double>, <2 x double>* %897, align 8, !tbaa !7, !alias.scope !124, !noalias !126
  %899 = getelementptr inbounds double, double* %896, i64 2
  %900 = bitcast double* %899 to <2 x double>*
  %901 = load <2 x double>, <2 x double>* %900, align 8, !tbaa !7, !alias.scope !124, !noalias !126
  %902 = fsub <2 x double> %898, %893
  %903 = fsub <2 x double> %901, %894
  %904 = bitcast double* %896 to <2 x double>*
  store <2 x double> %902, <2 x double>* %904, align 8, !tbaa !7, !alias.scope !124, !noalias !126
  %905 = bitcast double* %899 to <2 x double>*
  store <2 x double> %903, <2 x double>* %905, align 8, !tbaa !7, !alias.scope !124, !noalias !126
  %906 = add i64 %886, 4
  %907 = icmp eq i64 %906, %842
  br i1 %907, label %908, label %885, !llvm.loop !127

; <label>:908:                                    ; preds = %885
  br i1 %843, label %946, label %909

; <label>:909:                                    ; preds = %908, %865, %847
  %910 = phi i64 [ 0, %865 ], [ 0, %847 ], [ %842, %908 ]
  %911 = xor i64 %910, -1
  br i1 %845, label %922, label %912

; <label>:912:                                    ; preds = %909
  %913 = getelementptr inbounds double, double* %371, i64 %910
  %914 = load double, double* %913, align 8, !tbaa !7
  %915 = load double, double* %857, align 8, !tbaa !7
  %916 = fmul double %914, %915
  %917 = add nsw i64 %910, %860
  %918 = getelementptr inbounds double, double* %31, i64 %917
  %919 = load double, double* %918, align 8, !tbaa !7
  %920 = fsub double %919, %916
  store double %920, double* %918, align 8, !tbaa !7
  %921 = or i64 %910, 1
  br label %922

; <label>:922:                                    ; preds = %912, %909
  %923 = phi i64 [ %921, %912 ], [ %910, %909 ]
  %924 = icmp eq i64 %911, %846
  br i1 %924, label %946, label %925

; <label>:925:                                    ; preds = %922, %925
  %926 = phi i64 [ %944, %925 ], [ %923, %922 ]
  %927 = getelementptr inbounds double, double* %371, i64 %926
  %928 = load double, double* %927, align 8, !tbaa !7
  %929 = load double, double* %857, align 8, !tbaa !7
  %930 = fmul double %928, %929
  %931 = add nsw i64 %926, %860
  %932 = getelementptr inbounds double, double* %31, i64 %931
  %933 = load double, double* %932, align 8, !tbaa !7
  %934 = fsub double %933, %930
  store double %934, double* %932, align 8, !tbaa !7
  %935 = add nuw nsw i64 %926, 1
  %936 = getelementptr inbounds double, double* %371, i64 %935
  %937 = load double, double* %936, align 8, !tbaa !7
  %938 = load double, double* %857, align 8, !tbaa !7
  %939 = fmul double %937, %938
  %940 = add nsw i64 %935, %860
  %941 = getelementptr inbounds double, double* %31, i64 %940
  %942 = load double, double* %941, align 8, !tbaa !7
  %943 = fsub double %942, %939
  store double %943, double* %941, align 8, !tbaa !7
  %944 = add nsw i64 %926, 2
  %945 = icmp eq i64 %944, %836
  br i1 %945, label %946, label %925, !llvm.loop !128

; <label>:946:                                    ; preds = %922, %925, %908
  %947 = icmp eq i64 %859, %829
  br i1 %947, label %963, label %847

; <label>:948:                                    ; preds = %1098, %830
  %949 = phi i64 [ 0, %830 ], [ %1117, %1098 ]
  %950 = icmp eq i64 %831, 0
  br i1 %950, label %963, label %951

; <label>:951:                                    ; preds = %948
  %952 = trunc i64 %949 to i32
  %953 = add i32 %827, %952
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds double, double* %371, i64 %954
  %956 = load double, double* %955, align 8, !tbaa !7
  %957 = add nuw nsw i64 %949, 1
  %958 = mul nsw i64 %957, %828
  %959 = add nsw i64 %958, -1
  %960 = getelementptr inbounds double, double* %31, i64 %959
  %961 = load double, double* %960, align 8, !tbaa !7
  %962 = fadd double %956, %961
  store double %962, double* %960, align 8, !tbaa !7
  br label %963

; <label>:963:                                    ; preds = %951, %948, %946, %824
  %964 = icmp sgt i32 %13, 0
  br i1 %964, label %965, label %1368

; <label>:965:                                    ; preds = %963
  %966 = add i32 %9, %7
  %967 = add i32 %966, %11
  br i1 %596, label %975, label %968

; <label>:968:                                    ; preds = %965
  %969 = sext i32 %15 to i64
  %970 = zext i32 %13 to i64
  %971 = and i64 %970, 1
  %972 = icmp eq i32 %13, 1
  br i1 %972, label %1353, label %973

; <label>:973:                                    ; preds = %968
  %974 = sub nsw i64 %970, %971
  br label %1125

; <label>:975:                                    ; preds = %965
  %976 = sext i32 %7 to i64
  %977 = sext i32 %15 to i64
  %978 = zext i32 %13 to i64
  %979 = zext i32 %9 to i64
  %980 = add nsw i64 %977, %979
  %981 = getelementptr i8, i8* %372, i64 1
  %982 = add i32 %7, %9
  %983 = add i32 %982, %11
  %984 = getelementptr double, double* %371, i64 %976
  %985 = add nsw i64 %976, %979
  %986 = getelementptr double, double* %371, i64 %985
  %987 = icmp ult i32 %9, 4
  %988 = and i64 %979, 4294967292
  %989 = icmp eq i64 %988, %979
  %990 = and i64 %979, 1
  %991 = icmp eq i64 %990, 0
  %992 = sub nsw i64 0, %979
  br label %993

; <label>:993:                                    ; preds = %1096, %975
  %994 = phi i64 [ 0, %975 ], [ %1005, %1096 ]
  %995 = mul i64 %994, %977
  %996 = add i64 %995, %977
  %997 = getelementptr double, double* %32, i64 %996
  %998 = add i64 %980, %995
  %999 = getelementptr double, double* %32, i64 %998
  %1000 = trunc i64 %994 to i32
  %1001 = add i32 %967, %1000
  %1002 = sext i32 %1001 to i64
  %1003 = getelementptr inbounds double, double* %371, i64 %1002
  %1004 = load double, double* %1003, align 8, !tbaa !7
  %1005 = add nuw nsw i64 %994, 1
  %1006 = mul nsw i64 %1005, %977
  %1007 = add nsw i64 %1006, -1
  %1008 = getelementptr inbounds double, double* %32, i64 %1007
  %1009 = load double, double* %1008, align 8, !tbaa !7
  %1010 = fadd double %1004, %1009
  store double %1010, double* %1008, align 8, !tbaa !7
  br i1 %987, label %1056, label %1011

; <label>:1011:                                   ; preds = %993
  %1012 = bitcast double* %997 to i8*
  %1013 = trunc i64 %994 to i32
  %1014 = add i32 %983, %1013
  %1015 = sext i32 %1014 to i64
  %1016 = shl nsw i64 %1015, 3
  %1017 = getelementptr i8, i8* %981, i64 %1016
  %1018 = icmp ugt i8* %1017, %1012
  %1019 = icmp ult double* %1003, %999
  %1020 = and i1 %1018, %1019
  %1021 = icmp ult double* %997, %986
  %1022 = icmp ult double* %984, %999
  %1023 = and i1 %1021, %1022
  %1024 = or i1 %1020, %1023
  br i1 %1024, label %1056, label %1025

; <label>:1025:                                   ; preds = %1011
  %1026 = load double, double* %1003, align 8, !tbaa !7, !alias.scope !129
  %1027 = insertelement <2 x double> undef, double %1026, i32 0
  %1028 = shufflevector <2 x double> %1027, <2 x double> undef, <2 x i32> zeroinitializer
  %1029 = insertelement <2 x double> undef, double %1026, i32 0
  %1030 = shufflevector <2 x double> %1029, <2 x double> undef, <2 x i32> zeroinitializer
  br label %1031

; <label>:1031:                                   ; preds = %1031, %1025
  %1032 = phi i64 [ 0, %1025 ], [ %1053, %1031 ]
  %1033 = add nsw i64 %1032, %976
  %1034 = getelementptr inbounds double, double* %371, i64 %1033
  %1035 = bitcast double* %1034 to <2 x double>*
  %1036 = load <2 x double>, <2 x double>* %1035, align 8, !tbaa !7, !alias.scope !132
  %1037 = getelementptr inbounds double, double* %1034, i64 2
  %1038 = bitcast double* %1037 to <2 x double>*
  %1039 = load <2 x double>, <2 x double>* %1038, align 8, !tbaa !7, !alias.scope !132
  %1040 = fmul <2 x double> %1036, %1028
  %1041 = fmul <2 x double> %1039, %1030
  %1042 = add nsw i64 %1032, %1006
  %1043 = getelementptr inbounds double, double* %32, i64 %1042
  %1044 = bitcast double* %1043 to <2 x double>*
  %1045 = load <2 x double>, <2 x double>* %1044, align 8, !tbaa !7, !alias.scope !134, !noalias !136
  %1046 = getelementptr inbounds double, double* %1043, i64 2
  %1047 = bitcast double* %1046 to <2 x double>*
  %1048 = load <2 x double>, <2 x double>* %1047, align 8, !tbaa !7, !alias.scope !134, !noalias !136
  %1049 = fadd <2 x double> %1045, %1040
  %1050 = fadd <2 x double> %1048, %1041
  %1051 = bitcast double* %1043 to <2 x double>*
  store <2 x double> %1049, <2 x double>* %1051, align 8, !tbaa !7, !alias.scope !134, !noalias !136
  %1052 = bitcast double* %1046 to <2 x double>*
  store <2 x double> %1050, <2 x double>* %1052, align 8, !tbaa !7, !alias.scope !134, !noalias !136
  %1053 = add i64 %1032, 4
  %1054 = icmp eq i64 %1053, %988
  br i1 %1054, label %1055, label %1031, !llvm.loop !137

; <label>:1055:                                   ; preds = %1031
  br i1 %989, label %1096, label %1056

; <label>:1056:                                   ; preds = %1055, %1011, %993
  %1057 = phi i64 [ 0, %1011 ], [ 0, %993 ], [ %988, %1055 ]
  %1058 = xor i64 %1057, -1
  br i1 %991, label %1070, label %1059

; <label>:1059:                                   ; preds = %1056
  %1060 = add nsw i64 %1057, %976
  %1061 = getelementptr inbounds double, double* %371, i64 %1060
  %1062 = load double, double* %1061, align 8, !tbaa !7
  %1063 = load double, double* %1003, align 8, !tbaa !7
  %1064 = fmul double %1062, %1063
  %1065 = add nsw i64 %1057, %1006
  %1066 = getelementptr inbounds double, double* %32, i64 %1065
  %1067 = load double, double* %1066, align 8, !tbaa !7
  %1068 = fadd double %1067, %1064
  store double %1068, double* %1066, align 8, !tbaa !7
  %1069 = or i64 %1057, 1
  br label %1070

; <label>:1070:                                   ; preds = %1059, %1056
  %1071 = phi i64 [ %1069, %1059 ], [ %1057, %1056 ]
  %1072 = icmp eq i64 %1058, %992
  br i1 %1072, label %1096, label %1073

; <label>:1073:                                   ; preds = %1070, %1073
  %1074 = phi i64 [ %1094, %1073 ], [ %1071, %1070 ]
  %1075 = add nsw i64 %1074, %976
  %1076 = getelementptr inbounds double, double* %371, i64 %1075
  %1077 = load double, double* %1076, align 8, !tbaa !7
  %1078 = load double, double* %1003, align 8, !tbaa !7
  %1079 = fmul double %1077, %1078
  %1080 = add nsw i64 %1074, %1006
  %1081 = getelementptr inbounds double, double* %32, i64 %1080
  %1082 = load double, double* %1081, align 8, !tbaa !7
  %1083 = fadd double %1082, %1079
  store double %1083, double* %1081, align 8, !tbaa !7
  %1084 = add nuw nsw i64 %1074, 1
  %1085 = add nsw i64 %1084, %976
  %1086 = getelementptr inbounds double, double* %371, i64 %1085
  %1087 = load double, double* %1086, align 8, !tbaa !7
  %1088 = load double, double* %1003, align 8, !tbaa !7
  %1089 = fmul double %1087, %1088
  %1090 = add nsw i64 %1084, %1006
  %1091 = getelementptr inbounds double, double* %32, i64 %1090
  %1092 = load double, double* %1091, align 8, !tbaa !7
  %1093 = fadd double %1092, %1089
  store double %1093, double* %1091, align 8, !tbaa !7
  %1094 = add nsw i64 %1074, 2
  %1095 = icmp eq i64 %1094, %979
  br i1 %1095, label %1096, label %1073, !llvm.loop !138

; <label>:1096:                                   ; preds = %1070, %1073, %1055
  %1097 = icmp eq i64 %1005, %978
  br i1 %1097, label %1368, label %993

; <label>:1098:                                   ; preds = %1098, %833
  %1099 = phi i64 [ 0, %833 ], [ %1117, %1098 ]
  %1100 = phi i64 [ %834, %833 ], [ %1123, %1098 ]
  %1101 = trunc i64 %1099 to i32
  %1102 = add i32 %827, %1101
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds double, double* %371, i64 %1103
  %1105 = load double, double* %1104, align 8, !tbaa !7
  %1106 = or i64 %1099, 1
  %1107 = mul nsw i64 %1106, %828
  %1108 = add nsw i64 %1107, -1
  %1109 = getelementptr inbounds double, double* %31, i64 %1108
  %1110 = load double, double* %1109, align 8, !tbaa !7
  %1111 = fadd double %1105, %1110
  store double %1111, double* %1109, align 8, !tbaa !7
  %1112 = trunc i64 %1106 to i32
  %1113 = add i32 %827, %1112
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds double, double* %371, i64 %1114
  %1116 = load double, double* %1115, align 8, !tbaa !7
  %1117 = add nuw nsw i64 %1099, 2
  %1118 = mul nsw i64 %1117, %828
  %1119 = add nsw i64 %1118, -1
  %1120 = getelementptr inbounds double, double* %31, i64 %1119
  %1121 = load double, double* %1120, align 8, !tbaa !7
  %1122 = fadd double %1116, %1121
  store double %1122, double* %1120, align 8, !tbaa !7
  %1123 = add i64 %1100, -2
  %1124 = icmp eq i64 %1123, 0
  br i1 %1124, label %948, label %1098

; <label>:1125:                                   ; preds = %1125, %973
  %1126 = phi i64 [ 0, %973 ], [ %1144, %1125 ]
  %1127 = phi i64 [ %974, %973 ], [ %1150, %1125 ]
  %1128 = trunc i64 %1126 to i32
  %1129 = add i32 %967, %1128
  %1130 = sext i32 %1129 to i64
  %1131 = getelementptr inbounds double, double* %371, i64 %1130
  %1132 = load double, double* %1131, align 8, !tbaa !7
  %1133 = or i64 %1126, 1
  %1134 = mul nsw i64 %1133, %969
  %1135 = add nsw i64 %1134, -1
  %1136 = getelementptr inbounds double, double* %32, i64 %1135
  %1137 = load double, double* %1136, align 8, !tbaa !7
  %1138 = fadd double %1132, %1137
  store double %1138, double* %1136, align 8, !tbaa !7
  %1139 = trunc i64 %1133 to i32
  %1140 = add i32 %967, %1139
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds double, double* %371, i64 %1141
  %1143 = load double, double* %1142, align 8, !tbaa !7
  %1144 = add nuw nsw i64 %1126, 2
  %1145 = mul nsw i64 %1144, %969
  %1146 = add nsw i64 %1145, -1
  %1147 = getelementptr inbounds double, double* %32, i64 %1146
  %1148 = load double, double* %1147, align 8, !tbaa !7
  %1149 = fadd double %1143, %1148
  store double %1149, double* %1147, align 8, !tbaa !7
  %1150 = add i64 %1127, -2
  %1151 = icmp eq i64 %1150, 0
  br i1 %1151, label %1353, label %1125

; <label>:1152:                                   ; preds = %397, %1271, %483, %375
  %1153 = icmp sgt i32 %9, 0
  br i1 %1153, label %1154, label %1368

; <label>:1154:                                   ; preds = %1152
  %1155 = sext i32 %7 to i64
  %1156 = zext i32 %9 to i64
  %1157 = icmp ult i32 %9, 4
  br i1 %1157, label %1158, label %1179

; <label>:1158:                                   ; preds = %1269, %1179, %1154
  %1159 = phi i64 [ 0, %1179 ], [ 0, %1154 ], [ %1188, %1269 ]
  %1160 = xor i64 %1159, -1
  %1161 = add nsw i64 %1160, %1156
  %1162 = and i64 %1156, 3
  %1163 = icmp eq i64 %1162, 0
  br i1 %1163, label %1176, label %1164

; <label>:1164:                                   ; preds = %1158, %1164
  %1165 = phi i64 [ %1173, %1164 ], [ %1159, %1158 ]
  %1166 = phi i64 [ %1174, %1164 ], [ %1162, %1158 ]
  %1167 = add nsw i64 %1165, %1155
  %1168 = getelementptr inbounds double, double* %371, i64 %1167
  %1169 = bitcast double* %1168 to i64*
  %1170 = load i64, i64* %1169, align 8, !tbaa !7
  %1171 = getelementptr inbounds double, double* %32, i64 %1165
  %1172 = bitcast double* %1171 to i64*
  store i64 %1170, i64* %1172, align 8, !tbaa !7
  %1173 = add nuw nsw i64 %1165, 1
  %1174 = add i64 %1166, -1
  %1175 = icmp eq i64 %1174, 0
  br i1 %1175, label %1176, label %1164, !llvm.loop !139

; <label>:1176:                                   ; preds = %1164, %1158
  %1177 = phi i64 [ %1159, %1158 ], [ %1173, %1164 ]
  %1178 = icmp ult i64 %1161, 3
  br i1 %1178, label %1368, label %1322

; <label>:1179:                                   ; preds = %1154
  %1180 = getelementptr double, double* %32, i64 %1156
  %1181 = getelementptr double, double* %371, i64 %1155
  %1182 = add nsw i64 %1155, %1156
  %1183 = getelementptr double, double* %371, i64 %1182
  %1184 = icmp ult double* %32, %1183
  %1185 = icmp ult double* %1181, %1180
  %1186 = and i1 %1184, %1185
  br i1 %1186, label %1158, label %1187

; <label>:1187:                                   ; preds = %1179
  %1188 = and i64 %1156, 4294967292
  %1189 = add nsw i64 %1188, -4
  %1190 = lshr exact i64 %1189, 2
  %1191 = add nuw nsw i64 %1190, 1
  %1192 = and i64 %1191, 3
  %1193 = icmp ult i64 %1189, 12
  br i1 %1193, label %1249, label %1194

; <label>:1194:                                   ; preds = %1187
  %1195 = sub nsw i64 %1191, %1192
  br label %1196

; <label>:1196:                                   ; preds = %1196, %1194
  %1197 = phi i64 [ 0, %1194 ], [ %1246, %1196 ]
  %1198 = phi i64 [ %1195, %1194 ], [ %1247, %1196 ]
  %1199 = add nsw i64 %1197, %1155
  %1200 = getelementptr inbounds double, double* %371, i64 %1199
  %1201 = bitcast double* %1200 to <2 x i64>*
  %1202 = load <2 x i64>, <2 x i64>* %1201, align 8, !tbaa !7, !alias.scope !140
  %1203 = getelementptr inbounds double, double* %1200, i64 2
  %1204 = bitcast double* %1203 to <2 x i64>*
  %1205 = load <2 x i64>, <2 x i64>* %1204, align 8, !tbaa !7, !alias.scope !140
  %1206 = getelementptr inbounds double, double* %32, i64 %1197
  %1207 = bitcast double* %1206 to <2 x i64>*
  store <2 x i64> %1202, <2 x i64>* %1207, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1208 = getelementptr inbounds double, double* %1206, i64 2
  %1209 = bitcast double* %1208 to <2 x i64>*
  store <2 x i64> %1205, <2 x i64>* %1209, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1210 = or i64 %1197, 4
  %1211 = add nsw i64 %1210, %1155
  %1212 = getelementptr inbounds double, double* %371, i64 %1211
  %1213 = bitcast double* %1212 to <2 x i64>*
  %1214 = load <2 x i64>, <2 x i64>* %1213, align 8, !tbaa !7, !alias.scope !140
  %1215 = getelementptr inbounds double, double* %1212, i64 2
  %1216 = bitcast double* %1215 to <2 x i64>*
  %1217 = load <2 x i64>, <2 x i64>* %1216, align 8, !tbaa !7, !alias.scope !140
  %1218 = getelementptr inbounds double, double* %32, i64 %1210
  %1219 = bitcast double* %1218 to <2 x i64>*
  store <2 x i64> %1214, <2 x i64>* %1219, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1220 = getelementptr inbounds double, double* %1218, i64 2
  %1221 = bitcast double* %1220 to <2 x i64>*
  store <2 x i64> %1217, <2 x i64>* %1221, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1222 = or i64 %1197, 8
  %1223 = add nsw i64 %1222, %1155
  %1224 = getelementptr inbounds double, double* %371, i64 %1223
  %1225 = bitcast double* %1224 to <2 x i64>*
  %1226 = load <2 x i64>, <2 x i64>* %1225, align 8, !tbaa !7, !alias.scope !140
  %1227 = getelementptr inbounds double, double* %1224, i64 2
  %1228 = bitcast double* %1227 to <2 x i64>*
  %1229 = load <2 x i64>, <2 x i64>* %1228, align 8, !tbaa !7, !alias.scope !140
  %1230 = getelementptr inbounds double, double* %32, i64 %1222
  %1231 = bitcast double* %1230 to <2 x i64>*
  store <2 x i64> %1226, <2 x i64>* %1231, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1232 = getelementptr inbounds double, double* %1230, i64 2
  %1233 = bitcast double* %1232 to <2 x i64>*
  store <2 x i64> %1229, <2 x i64>* %1233, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1234 = or i64 %1197, 12
  %1235 = add nsw i64 %1234, %1155
  %1236 = getelementptr inbounds double, double* %371, i64 %1235
  %1237 = bitcast double* %1236 to <2 x i64>*
  %1238 = load <2 x i64>, <2 x i64>* %1237, align 8, !tbaa !7, !alias.scope !140
  %1239 = getelementptr inbounds double, double* %1236, i64 2
  %1240 = bitcast double* %1239 to <2 x i64>*
  %1241 = load <2 x i64>, <2 x i64>* %1240, align 8, !tbaa !7, !alias.scope !140
  %1242 = getelementptr inbounds double, double* %32, i64 %1234
  %1243 = bitcast double* %1242 to <2 x i64>*
  store <2 x i64> %1238, <2 x i64>* %1243, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1244 = getelementptr inbounds double, double* %1242, i64 2
  %1245 = bitcast double* %1244 to <2 x i64>*
  store <2 x i64> %1241, <2 x i64>* %1245, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1246 = add i64 %1197, 16
  %1247 = add i64 %1198, -4
  %1248 = icmp eq i64 %1247, 0
  br i1 %1248, label %1249, label %1196, !llvm.loop !145

; <label>:1249:                                   ; preds = %1196, %1187
  %1250 = phi i64 [ 0, %1187 ], [ %1246, %1196 ]
  %1251 = icmp eq i64 %1192, 0
  br i1 %1251, label %1269, label %1252

; <label>:1252:                                   ; preds = %1249, %1252
  %1253 = phi i64 [ %1266, %1252 ], [ %1250, %1249 ]
  %1254 = phi i64 [ %1267, %1252 ], [ %1192, %1249 ]
  %1255 = add nsw i64 %1253, %1155
  %1256 = getelementptr inbounds double, double* %371, i64 %1255
  %1257 = bitcast double* %1256 to <2 x i64>*
  %1258 = load <2 x i64>, <2 x i64>* %1257, align 8, !tbaa !7, !alias.scope !140
  %1259 = getelementptr inbounds double, double* %1256, i64 2
  %1260 = bitcast double* %1259 to <2 x i64>*
  %1261 = load <2 x i64>, <2 x i64>* %1260, align 8, !tbaa !7, !alias.scope !140
  %1262 = getelementptr inbounds double, double* %32, i64 %1253
  %1263 = bitcast double* %1262 to <2 x i64>*
  store <2 x i64> %1258, <2 x i64>* %1263, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1264 = getelementptr inbounds double, double* %1262, i64 2
  %1265 = bitcast double* %1264 to <2 x i64>*
  store <2 x i64> %1261, <2 x i64>* %1265, align 8, !tbaa !7, !alias.scope !143, !noalias !140
  %1266 = add i64 %1253, 4
  %1267 = add i64 %1254, -1
  %1268 = icmp eq i64 %1267, 0
  br i1 %1268, label %1269, label %1252, !llvm.loop !146

; <label>:1269:                                   ; preds = %1252, %1249
  %1270 = icmp eq i64 %1188, %1156
  br i1 %1270, label %1368, label %1158

; <label>:1271:                                   ; preds = %397, %1271
  %1272 = phi i64 [ %1320, %1271 ], [ %398, %397 ]
  %1273 = getelementptr inbounds double, double* %371, i64 %1272
  %1274 = bitcast double* %1273 to i64*
  %1275 = load i64, i64* %1274, align 8, !tbaa !7
  %1276 = getelementptr inbounds double, double* %31, i64 %1272
  %1277 = bitcast double* %1276 to i64*
  store i64 %1275, i64* %1277, align 8, !tbaa !7
  %1278 = add nuw nsw i64 %1272, 1
  %1279 = getelementptr inbounds double, double* %371, i64 %1278
  %1280 = bitcast double* %1279 to i64*
  %1281 = load i64, i64* %1280, align 8, !tbaa !7
  %1282 = getelementptr inbounds double, double* %31, i64 %1278
  %1283 = bitcast double* %1282 to i64*
  store i64 %1281, i64* %1283, align 8, !tbaa !7
  %1284 = add nsw i64 %1272, 2
  %1285 = getelementptr inbounds double, double* %371, i64 %1284
  %1286 = bitcast double* %1285 to i64*
  %1287 = load i64, i64* %1286, align 8, !tbaa !7
  %1288 = getelementptr inbounds double, double* %31, i64 %1284
  %1289 = bitcast double* %1288 to i64*
  store i64 %1287, i64* %1289, align 8, !tbaa !7
  %1290 = add nsw i64 %1272, 3
  %1291 = getelementptr inbounds double, double* %371, i64 %1290
  %1292 = bitcast double* %1291 to i64*
  %1293 = load i64, i64* %1292, align 8, !tbaa !7
  %1294 = getelementptr inbounds double, double* %31, i64 %1290
  %1295 = bitcast double* %1294 to i64*
  store i64 %1293, i64* %1295, align 8, !tbaa !7
  %1296 = add nsw i64 %1272, 4
  %1297 = getelementptr inbounds double, double* %371, i64 %1296
  %1298 = bitcast double* %1297 to i64*
  %1299 = load i64, i64* %1298, align 8, !tbaa !7
  %1300 = getelementptr inbounds double, double* %31, i64 %1296
  %1301 = bitcast double* %1300 to i64*
  store i64 %1299, i64* %1301, align 8, !tbaa !7
  %1302 = add nsw i64 %1272, 5
  %1303 = getelementptr inbounds double, double* %371, i64 %1302
  %1304 = bitcast double* %1303 to i64*
  %1305 = load i64, i64* %1304, align 8, !tbaa !7
  %1306 = getelementptr inbounds double, double* %31, i64 %1302
  %1307 = bitcast double* %1306 to i64*
  store i64 %1305, i64* %1307, align 8, !tbaa !7
  %1308 = add nsw i64 %1272, 6
  %1309 = getelementptr inbounds double, double* %371, i64 %1308
  %1310 = bitcast double* %1309 to i64*
  %1311 = load i64, i64* %1310, align 8, !tbaa !7
  %1312 = getelementptr inbounds double, double* %31, i64 %1308
  %1313 = bitcast double* %1312 to i64*
  store i64 %1311, i64* %1313, align 8, !tbaa !7
  %1314 = add nsw i64 %1272, 7
  %1315 = getelementptr inbounds double, double* %371, i64 %1314
  %1316 = bitcast double* %1315 to i64*
  %1317 = load i64, i64* %1316, align 8, !tbaa !7
  %1318 = getelementptr inbounds double, double* %31, i64 %1314
  %1319 = bitcast double* %1318 to i64*
  store i64 %1317, i64* %1319, align 8, !tbaa !7
  %1320 = add nsw i64 %1272, 8
  %1321 = icmp eq i64 %1320, %377
  br i1 %1321, label %1152, label %1271, !llvm.loop !147

; <label>:1322:                                   ; preds = %1176, %1322
  %1323 = phi i64 [ %1351, %1322 ], [ %1177, %1176 ]
  %1324 = add nsw i64 %1323, %1155
  %1325 = getelementptr inbounds double, double* %371, i64 %1324
  %1326 = bitcast double* %1325 to i64*
  %1327 = load i64, i64* %1326, align 8, !tbaa !7
  %1328 = getelementptr inbounds double, double* %32, i64 %1323
  %1329 = bitcast double* %1328 to i64*
  store i64 %1327, i64* %1329, align 8, !tbaa !7
  %1330 = add nuw nsw i64 %1323, 1
  %1331 = add nsw i64 %1330, %1155
  %1332 = getelementptr inbounds double, double* %371, i64 %1331
  %1333 = bitcast double* %1332 to i64*
  %1334 = load i64, i64* %1333, align 8, !tbaa !7
  %1335 = getelementptr inbounds double, double* %32, i64 %1330
  %1336 = bitcast double* %1335 to i64*
  store i64 %1334, i64* %1336, align 8, !tbaa !7
  %1337 = add nsw i64 %1323, 2
  %1338 = add nsw i64 %1337, %1155
  %1339 = getelementptr inbounds double, double* %371, i64 %1338
  %1340 = bitcast double* %1339 to i64*
  %1341 = load i64, i64* %1340, align 8, !tbaa !7
  %1342 = getelementptr inbounds double, double* %32, i64 %1337
  %1343 = bitcast double* %1342 to i64*
  store i64 %1341, i64* %1343, align 8, !tbaa !7
  %1344 = add nsw i64 %1323, 3
  %1345 = add nsw i64 %1344, %1155
  %1346 = getelementptr inbounds double, double* %371, i64 %1345
  %1347 = bitcast double* %1346 to i64*
  %1348 = load i64, i64* %1347, align 8, !tbaa !7
  %1349 = getelementptr inbounds double, double* %32, i64 %1344
  %1350 = bitcast double* %1349 to i64*
  store i64 %1348, i64* %1350, align 8, !tbaa !7
  %1351 = add nsw i64 %1323, 4
  %1352 = icmp eq i64 %1351, %1156
  br i1 %1352, label %1368, label %1322, !llvm.loop !148

; <label>:1353:                                   ; preds = %1125, %968
  %1354 = phi i64 [ 0, %968 ], [ %1144, %1125 ]
  %1355 = icmp eq i64 %971, 0
  br i1 %1355, label %1368, label %1356

; <label>:1356:                                   ; preds = %1353
  %1357 = trunc i64 %1354 to i32
  %1358 = add i32 %967, %1357
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds double, double* %371, i64 %1359
  %1361 = load double, double* %1360, align 8, !tbaa !7
  %1362 = add nuw nsw i64 %1354, 1
  %1363 = mul nsw i64 %1362, %969
  %1364 = add nsw i64 %1363, -1
  %1365 = getelementptr inbounds double, double* %32, i64 %1364
  %1366 = load double, double* %1365, align 8, !tbaa !7
  %1367 = fadd double %1361, %1366
  store double %1367, double* %1365, align 8, !tbaa !7
  br label %1368

; <label>:1368:                                   ; preds = %1176, %1322, %1356, %1353, %1096, %1269, %1152, %963
  tail call void @Rf_unprotect(i32 1) #7
  ret %struct.SEXPREC* %23
}

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @ARIMA_Invtrans(%struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %3 = tail call i32* @INTEGER(%struct.SEXPREC* %1) #7
  %4 = load i32, i32* %3, align 4, !tbaa !73
  %5 = getelementptr inbounds i32, i32* %3, i64 1
  %6 = load i32, i32* %5, align 4, !tbaa !73
  %7 = getelementptr inbounds i32, i32* %3, i64 2
  %8 = load i32, i32* %7, align 4, !tbaa !73
  %9 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %10 = sext i32 %9 to i64
  %11 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %10) #7
  %12 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %13 = tail call double* @REAL(%struct.SEXPREC* %11) #7
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %15, label %175

; <label>:15:                                     ; preds = %2
  %16 = zext i32 %9 to i64
  %17 = icmp ult i32 %9, 4
  br i1 %17, label %103, label %18

; <label>:18:                                     ; preds = %15
  %19 = getelementptr double, double* %13, i64 %16
  %20 = getelementptr double, double* %12, i64 %16
  %21 = icmp ult double* %13, %20
  %22 = icmp ult double* %12, %19
  %23 = and i1 %21, %22
  br i1 %23, label %103, label %24

; <label>:24:                                     ; preds = %18
  %25 = and i64 %16, 4294967292
  %26 = add nsw i64 %25, -4
  %27 = lshr exact i64 %26, 2
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 3
  %30 = icmp ult i64 %26, 12
  br i1 %30, label %82, label %31

; <label>:31:                                     ; preds = %24
  %32 = sub nsw i64 %28, %29
  br label %33

; <label>:33:                                     ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %79, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %80, %33 ]
  %36 = getelementptr inbounds double, double* %12, i64 %34
  %37 = bitcast double* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 8, !tbaa !7, !alias.scope !149
  %39 = getelementptr inbounds double, double* %36, i64 2
  %40 = bitcast double* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 8, !tbaa !7, !alias.scope !149
  %42 = getelementptr inbounds double, double* %13, i64 %34
  %43 = bitcast double* %42 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %43, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %44 = getelementptr inbounds double, double* %42, i64 2
  %45 = bitcast double* %44 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %45, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %46 = or i64 %34, 4
  %47 = getelementptr inbounds double, double* %12, i64 %46
  %48 = bitcast double* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 8, !tbaa !7, !alias.scope !149
  %50 = getelementptr inbounds double, double* %47, i64 2
  %51 = bitcast double* %50 to <2 x i64>*
  %52 = load <2 x i64>, <2 x i64>* %51, align 8, !tbaa !7, !alias.scope !149
  %53 = getelementptr inbounds double, double* %13, i64 %46
  %54 = bitcast double* %53 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %54, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %55 = getelementptr inbounds double, double* %53, i64 2
  %56 = bitcast double* %55 to <2 x i64>*
  store <2 x i64> %52, <2 x i64>* %56, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %57 = or i64 %34, 8
  %58 = getelementptr inbounds double, double* %12, i64 %57
  %59 = bitcast double* %58 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 8, !tbaa !7, !alias.scope !149
  %61 = getelementptr inbounds double, double* %58, i64 2
  %62 = bitcast double* %61 to <2 x i64>*
  %63 = load <2 x i64>, <2 x i64>* %62, align 8, !tbaa !7, !alias.scope !149
  %64 = getelementptr inbounds double, double* %13, i64 %57
  %65 = bitcast double* %64 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %65, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %66 = getelementptr inbounds double, double* %64, i64 2
  %67 = bitcast double* %66 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %67, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %68 = or i64 %34, 12
  %69 = getelementptr inbounds double, double* %12, i64 %68
  %70 = bitcast double* %69 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 8, !tbaa !7, !alias.scope !149
  %72 = getelementptr inbounds double, double* %69, i64 2
  %73 = bitcast double* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 8, !tbaa !7, !alias.scope !149
  %75 = getelementptr inbounds double, double* %13, i64 %68
  %76 = bitcast double* %75 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %76, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %77 = getelementptr inbounds double, double* %75, i64 2
  %78 = bitcast double* %77 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %78, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %79 = add i64 %34, 16
  %80 = add i64 %35, -4
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %33, !llvm.loop !154

; <label>:82:                                     ; preds = %33, %24
  %83 = phi i64 [ 0, %24 ], [ %79, %33 ]
  %84 = icmp eq i64 %29, 0
  br i1 %84, label %101, label %85

; <label>:85:                                     ; preds = %82, %85
  %86 = phi i64 [ %98, %85 ], [ %83, %82 ]
  %87 = phi i64 [ %99, %85 ], [ %29, %82 ]
  %88 = getelementptr inbounds double, double* %12, i64 %86
  %89 = bitcast double* %88 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 8, !tbaa !7, !alias.scope !149
  %91 = getelementptr inbounds double, double* %88, i64 2
  %92 = bitcast double* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8, !tbaa !7, !alias.scope !149
  %94 = getelementptr inbounds double, double* %13, i64 %86
  %95 = bitcast double* %94 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %95, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %96 = getelementptr inbounds double, double* %94, i64 2
  %97 = bitcast double* %96 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %97, align 8, !tbaa !7, !alias.scope !152, !noalias !149
  %98 = add i64 %86, 4
  %99 = add i64 %87, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %85, !llvm.loop !155

; <label>:101:                                    ; preds = %85, %82
  %102 = icmp eq i64 %25, %16
  br i1 %102, label %175, label %103

; <label>:103:                                    ; preds = %101, %18, %15
  %104 = phi i64 [ 0, %18 ], [ 0, %15 ], [ %25, %101 ]
  %105 = sub nsw i64 %16, %104
  %106 = xor i64 %104, -1
  %107 = add nsw i64 %106, %16
  %108 = and i64 %105, 7
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %121, label %110

; <label>:110:                                    ; preds = %103, %110
  %111 = phi i64 [ %118, %110 ], [ %104, %103 ]
  %112 = phi i64 [ %119, %110 ], [ %108, %103 ]
  %113 = getelementptr inbounds double, double* %12, i64 %111
  %114 = bitcast double* %113 to i64*
  %115 = load i64, i64* %114, align 8, !tbaa !7
  %116 = getelementptr inbounds double, double* %13, i64 %111
  %117 = bitcast double* %116 to i64*
  store i64 %115, i64* %117, align 8, !tbaa !7
  %118 = add nuw nsw i64 %111, 1
  %119 = add i64 %112, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %110, !llvm.loop !156

; <label>:121:                                    ; preds = %110, %103
  %122 = phi i64 [ %104, %103 ], [ %118, %110 ]
  %123 = icmp ult i64 %107, 7
  br i1 %123, label %175, label %124

; <label>:124:                                    ; preds = %121, %124
  %125 = phi i64 [ %173, %124 ], [ %122, %121 ]
  %126 = getelementptr inbounds double, double* %12, i64 %125
  %127 = bitcast double* %126 to i64*
  %128 = load i64, i64* %127, align 8, !tbaa !7
  %129 = getelementptr inbounds double, double* %13, i64 %125
  %130 = bitcast double* %129 to i64*
  store i64 %128, i64* %130, align 8, !tbaa !7
  %131 = add nuw nsw i64 %125, 1
  %132 = getelementptr inbounds double, double* %12, i64 %131
  %133 = bitcast double* %132 to i64*
  %134 = load i64, i64* %133, align 8, !tbaa !7
  %135 = getelementptr inbounds double, double* %13, i64 %131
  %136 = bitcast double* %135 to i64*
  store i64 %134, i64* %136, align 8, !tbaa !7
  %137 = add nsw i64 %125, 2
  %138 = getelementptr inbounds double, double* %12, i64 %137
  %139 = bitcast double* %138 to i64*
  %140 = load i64, i64* %139, align 8, !tbaa !7
  %141 = getelementptr inbounds double, double* %13, i64 %137
  %142 = bitcast double* %141 to i64*
  store i64 %140, i64* %142, align 8, !tbaa !7
  %143 = add nsw i64 %125, 3
  %144 = getelementptr inbounds double, double* %12, i64 %143
  %145 = bitcast double* %144 to i64*
  %146 = load i64, i64* %145, align 8, !tbaa !7
  %147 = getelementptr inbounds double, double* %13, i64 %143
  %148 = bitcast double* %147 to i64*
  store i64 %146, i64* %148, align 8, !tbaa !7
  %149 = add nsw i64 %125, 4
  %150 = getelementptr inbounds double, double* %12, i64 %149
  %151 = bitcast double* %150 to i64*
  %152 = load i64, i64* %151, align 8, !tbaa !7
  %153 = getelementptr inbounds double, double* %13, i64 %149
  %154 = bitcast double* %153 to i64*
  store i64 %152, i64* %154, align 8, !tbaa !7
  %155 = add nsw i64 %125, 5
  %156 = getelementptr inbounds double, double* %12, i64 %155
  %157 = bitcast double* %156 to i64*
  %158 = load i64, i64* %157, align 8, !tbaa !7
  %159 = getelementptr inbounds double, double* %13, i64 %155
  %160 = bitcast double* %159 to i64*
  store i64 %158, i64* %160, align 8, !tbaa !7
  %161 = add nsw i64 %125, 6
  %162 = getelementptr inbounds double, double* %12, i64 %161
  %163 = bitcast double* %162 to i64*
  %164 = load i64, i64* %163, align 8, !tbaa !7
  %165 = getelementptr inbounds double, double* %13, i64 %161
  %166 = bitcast double* %165 to i64*
  store i64 %164, i64* %166, align 8, !tbaa !7
  %167 = add nsw i64 %125, 7
  %168 = getelementptr inbounds double, double* %12, i64 %167
  %169 = bitcast double* %168 to i64*
  %170 = load i64, i64* %169, align 8, !tbaa !7
  %171 = getelementptr inbounds double, double* %13, i64 %167
  %172 = bitcast double* %171 to i64*
  store i64 %170, i64* %172, align 8, !tbaa !7
  %173 = add nsw i64 %125, 8
  %174 = icmp eq i64 %173, %16
  br i1 %174, label %175, label %124, !llvm.loop !157

; <label>:175:                                    ; preds = %121, %124, %101, %2
  %176 = icmp sgt i32 %4, 0
  br i1 %176, label %177, label %178

; <label>:177:                                    ; preds = %175
  tail call fastcc void @invpartrans(i32 %4, double* %12, double* %13)
  br label %178

; <label>:178:                                    ; preds = %177, %175
  %179 = icmp sgt i32 %8, 0
  br i1 %179, label %180, label %185

; <label>:180:                                    ; preds = %178
  %181 = add nsw i32 %6, %4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds double, double* %12, i64 %182
  %184 = getelementptr inbounds double, double* %13, i64 %182
  tail call fastcc void @invpartrans(i32 %8, double* %183, double* %184)
  br label %185

; <label>:185:                                    ; preds = %180, %178
  ret %struct.SEXPREC* %11
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @invpartrans(i32, double* nocapture readonly, double* nocapture) unnamed_addr #0 {
  %4 = bitcast double* %2 to i8*
  %5 = alloca [100 x double], align 16
  %6 = bitcast [100 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %6) #7
  %7 = icmp sgt i32 %0, 100
  br i1 %7, label %105, label %8

; <label>:8:                                      ; preds = %3
  %9 = icmp sgt i32 %0, 0
  br i1 %9, label %10, label %107

; <label>:10:                                     ; preds = %8
  %11 = zext i32 %0 to i64
  %12 = icmp ult i32 %0, 4
  br i1 %12, label %13, label %35

; <label>:13:                                     ; preds = %103, %35, %10
  %14 = phi i64 [ 0, %35 ], [ 0, %10 ], [ %42, %103 ]
  %15 = xor i64 %14, -1
  %16 = add nsw i64 %15, %11
  %17 = and i64 %11, 3
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %32, label %19

; <label>:19:                                     ; preds = %13, %19
  %20 = phi i64 [ %29, %19 ], [ %14, %13 ]
  %21 = phi i64 [ %30, %19 ], [ %17, %13 ]
  %22 = getelementptr inbounds double, double* %1, i64 %20
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !7
  %25 = getelementptr inbounds double, double* %2, i64 %20
  %26 = bitcast double* %25 to i64*
  store i64 %24, i64* %26, align 8, !tbaa !7
  %27 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %20
  %28 = bitcast double* %27 to i64*
  store i64 %24, i64* %28, align 8, !tbaa !7
  %29 = add nuw nsw i64 %20, 1
  %30 = add i64 %21, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %19, !llvm.loop !158

; <label>:32:                                     ; preds = %19, %13
  %33 = phi i64 [ %14, %13 ], [ %29, %19 ]
  %34 = icmp ult i64 %16, 3
  br i1 %34, label %107, label %114

; <label>:35:                                     ; preds = %10
  %36 = getelementptr double, double* %2, i64 %11
  %37 = getelementptr double, double* %1, i64 %11
  %38 = icmp ugt double* %37, %2
  %39 = icmp ugt double* %36, %1
  %40 = and i1 %38, %39
  br i1 %40, label %13, label %41

; <label>:41:                                     ; preds = %35
  %42 = and i64 %11, 4294967292
  %43 = add nsw i64 %42, -4
  %44 = lshr exact i64 %43, 2
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 1
  %47 = icmp eq i64 %43, 0
  br i1 %47, label %85, label %48

; <label>:48:                                     ; preds = %41
  %49 = sub nsw i64 %45, %46
  br label %50

; <label>:50:                                     ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %82, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %83, %50 ]
  %53 = getelementptr inbounds double, double* %1, i64 %51
  %54 = bitcast double* %53 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 8, !tbaa !7, !alias.scope !159
  %56 = getelementptr inbounds double, double* %53, i64 2
  %57 = bitcast double* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8, !tbaa !7, !alias.scope !159
  %59 = getelementptr inbounds double, double* %2, i64 %51
  %60 = bitcast double* %59 to <2 x i64>*
  store <2 x i64> %55, <2 x i64>* %60, align 8, !tbaa !7, !alias.scope !162, !noalias !159
  %61 = getelementptr inbounds double, double* %59, i64 2
  %62 = bitcast double* %61 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %62, align 8, !tbaa !7, !alias.scope !162, !noalias !159
  %63 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %51
  %64 = bitcast double* %63 to <2 x i64>*
  store <2 x i64> %55, <2 x i64>* %64, align 16, !tbaa !7, !alias.scope !164
  %65 = getelementptr inbounds double, double* %63, i64 2
  %66 = bitcast double* %65 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %66, align 16, !tbaa !7, !alias.scope !164
  %67 = or i64 %51, 4
  %68 = getelementptr inbounds double, double* %1, i64 %67
  %69 = bitcast double* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !7, !alias.scope !159
  %71 = getelementptr inbounds double, double* %68, i64 2
  %72 = bitcast double* %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !7, !alias.scope !159
  %74 = getelementptr inbounds double, double* %2, i64 %67
  %75 = bitcast double* %74 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %75, align 8, !tbaa !7, !alias.scope !162, !noalias !159
  %76 = getelementptr inbounds double, double* %74, i64 2
  %77 = bitcast double* %76 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %77, align 8, !tbaa !7, !alias.scope !162, !noalias !159
  %78 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %67
  %79 = bitcast double* %78 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %79, align 16, !tbaa !7, !alias.scope !164
  %80 = getelementptr inbounds double, double* %78, i64 2
  %81 = bitcast double* %80 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %81, align 16, !tbaa !7, !alias.scope !164
  %82 = add i64 %51, 8
  %83 = add i64 %52, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %50, !llvm.loop !166

; <label>:85:                                     ; preds = %50, %41
  %86 = phi i64 [ 0, %41 ], [ %82, %50 ]
  %87 = icmp eq i64 %46, 0
  br i1 %87, label %103, label %88

; <label>:88:                                     ; preds = %85
  %89 = getelementptr inbounds double, double* %1, i64 %86
  %90 = bitcast double* %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !tbaa !7, !alias.scope !159
  %92 = getelementptr inbounds double, double* %89, i64 2
  %93 = bitcast double* %92 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 8, !tbaa !7, !alias.scope !159
  %95 = getelementptr inbounds double, double* %2, i64 %86
  %96 = bitcast double* %95 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %96, align 8, !tbaa !7, !alias.scope !162, !noalias !159
  %97 = getelementptr inbounds double, double* %95, i64 2
  %98 = bitcast double* %97 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %98, align 8, !tbaa !7, !alias.scope !162, !noalias !159
  %99 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %86
  %100 = bitcast double* %99 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %100, align 16, !tbaa !7, !alias.scope !164
  %101 = getelementptr inbounds double, double* %99, i64 2
  %102 = bitcast double* %101 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %102, align 16, !tbaa !7, !alias.scope !164
  br label %103

; <label>:103:                                    ; preds = %85, %88
  %104 = icmp eq i64 %42, %11
  br i1 %104, label %107, label %13

; <label>:105:                                    ; preds = %3
  %106 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %106) #8
  unreachable

; <label>:107:                                    ; preds = %32, %114, %103, %8
  %108 = add i32 %0, -1
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %153

; <label>:110:                                    ; preds = %107
  %111 = zext i32 %108 to i64
  %112 = shl nuw nsw i64 %111, 3
  %113 = sext i32 %108 to i64
  br label %156

; <label>:114:                                    ; preds = %32, %114
  %115 = phi i64 [ %147, %114 ], [ %33, %32 ]
  %116 = getelementptr inbounds double, double* %1, i64 %115
  %117 = bitcast double* %116 to i64*
  %118 = load i64, i64* %117, align 8, !tbaa !7
  %119 = getelementptr inbounds double, double* %2, i64 %115
  %120 = bitcast double* %119 to i64*
  store i64 %118, i64* %120, align 8, !tbaa !7
  %121 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %115
  %122 = bitcast double* %121 to i64*
  store i64 %118, i64* %122, align 8, !tbaa !7
  %123 = add nuw nsw i64 %115, 1
  %124 = getelementptr inbounds double, double* %1, i64 %123
  %125 = bitcast double* %124 to i64*
  %126 = load i64, i64* %125, align 8, !tbaa !7
  %127 = getelementptr inbounds double, double* %2, i64 %123
  %128 = bitcast double* %127 to i64*
  store i64 %126, i64* %128, align 8, !tbaa !7
  %129 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %123
  %130 = bitcast double* %129 to i64*
  store i64 %126, i64* %130, align 8, !tbaa !7
  %131 = add nsw i64 %115, 2
  %132 = getelementptr inbounds double, double* %1, i64 %131
  %133 = bitcast double* %132 to i64*
  %134 = load i64, i64* %133, align 8, !tbaa !7
  %135 = getelementptr inbounds double, double* %2, i64 %131
  %136 = bitcast double* %135 to i64*
  store i64 %134, i64* %136, align 8, !tbaa !7
  %137 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %131
  %138 = bitcast double* %137 to i64*
  store i64 %134, i64* %138, align 8, !tbaa !7
  %139 = add nsw i64 %115, 3
  %140 = getelementptr inbounds double, double* %1, i64 %139
  %141 = bitcast double* %140 to i64*
  %142 = load i64, i64* %141, align 8, !tbaa !7
  %143 = getelementptr inbounds double, double* %2, i64 %139
  %144 = bitcast double* %143 to i64*
  store i64 %142, i64* %144, align 8, !tbaa !7
  %145 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %139
  %146 = bitcast double* %145 to i64*
  store i64 %142, i64* %146, align 8, !tbaa !7
  %147 = add nsw i64 %115, 4
  %148 = icmp eq i64 %147, %11
  br i1 %148, label %107, label %114, !llvm.loop !167

; <label>:149:                                    ; preds = %165
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 16 %6, i64 %160, i1 false)
  %150 = add nsw i64 %157, -1
  %151 = add nuw nsw i64 %158, 1
  %152 = icmp eq i64 %151, %111
  br i1 %152, label %153, label %156

; <label>:153:                                    ; preds = %149, %107
  br i1 %9, label %154, label %188

; <label>:154:                                    ; preds = %153
  %155 = zext i32 %0 to i64
  br label %181

; <label>:156:                                    ; preds = %110, %149
  %157 = phi i64 [ %113, %110 ], [ %150, %149 ]
  %158 = phi i64 [ 0, %110 ], [ %151, %149 ]
  %159 = mul nsw i64 %158, -8
  %160 = add nsw i64 %112, %159
  %161 = getelementptr inbounds double, double* %2, i64 %157
  %162 = load double, double* %161, align 8, !tbaa !7
  %163 = fmul double %162, %162
  %164 = fsub double 1.000000e+00, %163
  br label %165

; <label>:165:                                    ; preds = %165, %156
  %166 = phi i64 [ 0, %156 ], [ %179, %165 ]
  %167 = getelementptr inbounds double, double* %2, i64 %166
  %168 = load double, double* %167, align 8, !tbaa !7
  %169 = xor i64 %166, 4294967295
  %170 = add i64 %157, %169
  %171 = shl i64 %170, 32
  %172 = ashr exact i64 %171, 32
  %173 = getelementptr inbounds double, double* %2, i64 %172
  %174 = load double, double* %173, align 8, !tbaa !7
  %175 = fmul double %162, %174
  %176 = fadd double %168, %175
  %177 = fdiv double %176, %164
  %178 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 %166
  store double %177, double* %178, align 8, !tbaa !7
  %179 = add nuw nsw i64 %166, 1
  %180 = icmp eq i64 %179, %157
  br i1 %180, label %149, label %165

; <label>:181:                                    ; preds = %181, %154
  %182 = phi i64 [ 0, %154 ], [ %186, %181 ]
  %183 = getelementptr inbounds double, double* %2, i64 %182
  %184 = load double, double* %183, align 8, !tbaa !7
  %185 = tail call double @atanh(double %184) #9
  store double %185, double* %183, align 8, !tbaa !7
  %186 = add nuw nsw i64 %182, 1
  %187 = icmp eq i64 %186, %155
  br i1 %187, label %188, label %181

; <label>:188:                                    ; preds = %181, %153
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @ARIMA_Gradtrans(%struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %3 = alloca [100 x double], align 16
  %4 = alloca [100 x double], align 16
  %5 = bitcast [100 x double]* %4 to i8*
  %6 = alloca [100 x double], align 16
  %7 = alloca [100 x double], align 16
  %8 = tail call i32* @INTEGER(%struct.SEXPREC* %1) #7
  %9 = load i32, i32* %8, align 4, !tbaa !73
  %10 = getelementptr inbounds i32, i32* %8, i64 1
  %11 = load i32, i32* %10, align 4, !tbaa !73
  %12 = getelementptr inbounds i32, i32* %8, i64 2
  %13 = load i32, i32* %12, align 4, !tbaa !73
  %14 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %15 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %14, i32 %14) #7
  %16 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %17 = bitcast double* %16 to i8*
  %18 = tail call double* @REAL(%struct.SEXPREC* %15) #7
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %5) #7
  %19 = bitcast [100 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %19) #7
  %20 = bitcast [100 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %20) #7
  %21 = icmp sgt i32 %14, 0
  br i1 %21, label %22, label %79

; <label>:22:                                     ; preds = %2
  %23 = sext i32 %14 to i64
  %24 = zext i32 %14 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  %28 = sub nsw i64 %24, %26
  %29 = icmp eq i64 %26, 0
  br label %30

; <label>:30:                                     ; preds = %75, %22
  %31 = phi i64 [ 0, %22 ], [ %77, %75 ]
  br i1 %27, label %61, label %32

; <label>:32:                                     ; preds = %30, %32
  %33 = phi i64 [ %58, %32 ], [ 0, %30 ]
  %34 = phi i64 [ %59, %32 ], [ %28, %30 ]
  %35 = icmp eq i64 %31, %33
  %36 = uitofp i1 %35 to double
  %37 = mul nsw i64 %33, %23
  %38 = add nsw i64 %37, %31
  %39 = getelementptr inbounds double, double* %18, i64 %38
  store double %36, double* %39, align 8, !tbaa !7
  %40 = or i64 %33, 1
  %41 = icmp eq i64 %31, %40
  %42 = uitofp i1 %41 to double
  %43 = mul nsw i64 %40, %23
  %44 = add nsw i64 %43, %31
  %45 = getelementptr inbounds double, double* %18, i64 %44
  store double %42, double* %45, align 8, !tbaa !7
  %46 = or i64 %33, 2
  %47 = icmp eq i64 %31, %46
  %48 = uitofp i1 %47 to double
  %49 = mul nsw i64 %46, %23
  %50 = add nsw i64 %49, %31
  %51 = getelementptr inbounds double, double* %18, i64 %50
  store double %48, double* %51, align 8, !tbaa !7
  %52 = or i64 %33, 3
  %53 = icmp eq i64 %31, %52
  %54 = uitofp i1 %53 to double
  %55 = mul nsw i64 %52, %23
  %56 = add nsw i64 %55, %31
  %57 = getelementptr inbounds double, double* %18, i64 %56
  store double %54, double* %57, align 8, !tbaa !7
  %58 = add nuw nsw i64 %33, 4
  %59 = add i64 %34, -4
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %32

; <label>:61:                                     ; preds = %32, %30
  %62 = phi i64 [ undef, %30 ], [ %58, %32 ]
  %63 = phi i64 [ 0, %30 ], [ %58, %32 ]
  br i1 %29, label %75, label %64

; <label>:64:                                     ; preds = %61, %64
  %65 = phi i64 [ %72, %64 ], [ %63, %61 ]
  %66 = phi i64 [ %73, %64 ], [ %26, %61 ]
  %67 = icmp eq i64 %31, %65
  %68 = uitofp i1 %67 to double
  %69 = mul nsw i64 %65, %23
  %70 = add nsw i64 %69, %31
  %71 = getelementptr inbounds double, double* %18, i64 %70
  store double %68, double* %71, align 8, !tbaa !7
  %72 = add nuw nsw i64 %65, 1
  %73 = add i64 %66, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %64, !llvm.loop !168

; <label>:75:                                     ; preds = %64, %61
  %76 = phi i64 [ %62, %61 ], [ %72, %64 ]
  %77 = add nuw nsw i64 %31, 1
  %78 = icmp eq i64 %77, %76
  br i1 %78, label %79, label %30

; <label>:79:                                     ; preds = %75, %2
  %80 = icmp sgt i32 %9, 0
  br i1 %80, label %81, label %282

; <label>:81:                                     ; preds = %79
  %82 = zext i32 %9 to i64
  %83 = shl nuw nsw i64 %82, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 %17, i64 %83, i1 false)
  %84 = bitcast [100 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %84) #7
  %85 = icmp sgt i32 %9, 100
  br i1 %85, label %86, label %93

; <label>:86:                                     ; preds = %81
  %87 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %87) #8
  unreachable

; <label>:88:                                     ; preds = %93
  %89 = icmp sgt i32 %9, 1
  br i1 %89, label %90, label %159

; <label>:90:                                     ; preds = %88
  %91 = add i32 %9, -1
  %92 = zext i32 %91 to i64
  br label %102

; <label>:93:                                     ; preds = %81, %93
  %94 = phi i64 [ %100, %93 ], [ 0, %81 ]
  %95 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %94
  %96 = load double, double* %95, align 8, !tbaa !7
  %97 = tail call double @tanh(double %96) #9
  %98 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %94
  store double %97, double* %98, align 8, !tbaa !7
  %99 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %94
  store double %97, double* %99, align 8, !tbaa !7
  %100 = add nuw nsw i64 %94, 1
  %101 = icmp eq i64 %100, %82
  br i1 %101, label %88, label %93

; <label>:102:                                    ; preds = %154, %90
  %103 = phi i64 [ 1, %90 ], [ %156, %154 ]
  %104 = phi i64 [ 0, %90 ], [ %157, %154 ]
  %105 = add nuw i64 %104, 1
  %106 = shl i64 %104, 3
  %107 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %103
  %108 = load double, double* %107, align 8, !tbaa !7
  %109 = and i64 %105, 1
  %110 = icmp eq i64 %104, 0
  br i1 %110, label %140, label %111

; <label>:111:                                    ; preds = %102
  %112 = sub i64 %105, %109
  br label %113

; <label>:113:                                    ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %137, %113 ]
  %115 = phi i64 [ %112, %111 ], [ %138, %113 ]
  %116 = xor i64 %114, 4294967295
  %117 = add nuw i64 %116, %103
  %118 = shl i64 %117, 32
  %119 = ashr exact i64 %118, 32
  %120 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %119
  %121 = load double, double* %120, align 8, !tbaa !7
  %122 = fmul double %108, %121
  %123 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %114
  %124 = load double, double* %123, align 16, !tbaa !7
  %125 = fsub double %124, %122
  store double %125, double* %123, align 16, !tbaa !7
  %126 = or i64 %114, 1
  %127 = xor i64 %114, 4294967294
  %128 = add nuw i64 %127, %103
  %129 = shl i64 %128, 32
  %130 = ashr exact i64 %129, 32
  %131 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !7
  %133 = fmul double %108, %132
  %134 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %126
  %135 = load double, double* %134, align 8, !tbaa !7
  %136 = fsub double %135, %133
  store double %136, double* %134, align 8, !tbaa !7
  %137 = add nuw nsw i64 %114, 2
  %138 = add i64 %115, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %113

; <label>:140:                                    ; preds = %113, %102
  %141 = phi i64 [ 0, %102 ], [ %137, %113 ]
  %142 = icmp eq i64 %109, 0
  br i1 %142, label %154, label %143

; <label>:143:                                    ; preds = %140
  %144 = xor i64 %141, 4294967295
  %145 = add nuw i64 %144, %103
  %146 = shl i64 %145, 32
  %147 = ashr exact i64 %146, 32
  %148 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %147
  %149 = load double, double* %148, align 8, !tbaa !7
  %150 = fmul double %108, %149
  %151 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %141
  %152 = load double, double* %151, align 8, !tbaa !7
  %153 = fsub double %152, %150
  store double %153, double* %151, align 8, !tbaa !7
  br label %154

; <label>:154:                                    ; preds = %140, %143
  %155 = add nuw nsw i64 %106, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* nonnull align 16 %84, i64 %155, i1 false) #7
  %156 = add nuw nsw i64 %103, 1
  %157 = add nuw nsw i64 %104, 1
  %158 = icmp eq i64 %157, %92
  br i1 %158, label %159, label %102

; <label>:159:                                    ; preds = %154, %88
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %84) #7
  %160 = icmp eq i32 %9, 1
  %161 = add i32 %9, -1
  %162 = zext i32 %161 to i64
  %163 = sext i32 %14 to i64
  %164 = and i64 %82, 1
  %165 = icmp eq i32 %9, 1
  %166 = sub nsw i64 %82, %164
  %167 = icmp eq i64 %164, 0
  br label %168

; <label>:168:                                    ; preds = %253, %159
  %169 = phi i64 [ %255, %253 ], [ 0, %159 ]
  %170 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %169
  %171 = load double, double* %170, align 8, !tbaa !7
  %172 = fadd double %171, 1.000000e-03
  store double %172, double* %170, align 8, !tbaa !7
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %84) #7
  br label %173

; <label>:173:                                    ; preds = %173, %168
  %174 = phi i64 [ 0, %168 ], [ %180, %173 ]
  %175 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %174
  %176 = load double, double* %175, align 8, !tbaa !7
  %177 = tail call double @tanh(double %176) #9
  %178 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %174
  store double %177, double* %178, align 8, !tbaa !7
  %179 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %174
  store double %177, double* %179, align 8, !tbaa !7
  %180 = add nuw nsw i64 %174, 1
  %181 = icmp eq i64 %180, %82
  br i1 %181, label %182, label %173

; <label>:182:                                    ; preds = %173
  br i1 %160, label %240, label %183

; <label>:183:                                    ; preds = %182, %235
  %184 = phi i64 [ %237, %235 ], [ 1, %182 ]
  %185 = phi i64 [ %238, %235 ], [ 0, %182 ]
  %186 = add nuw i64 %185, 1
  %187 = shl i64 %185, 3
  %188 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %184
  %189 = load double, double* %188, align 8, !tbaa !7
  %190 = and i64 %186, 1
  %191 = icmp eq i64 %185, 0
  br i1 %191, label %221, label %192

; <label>:192:                                    ; preds = %183
  %193 = sub i64 %186, %190
  br label %194

; <label>:194:                                    ; preds = %194, %192
  %195 = phi i64 [ 0, %192 ], [ %218, %194 ]
  %196 = phi i64 [ %193, %192 ], [ %219, %194 ]
  %197 = xor i64 %195, 4294967295
  %198 = add nuw i64 %197, %184
  %199 = shl i64 %198, 32
  %200 = ashr exact i64 %199, 32
  %201 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %200
  %202 = load double, double* %201, align 8, !tbaa !7
  %203 = fmul double %189, %202
  %204 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %195
  %205 = load double, double* %204, align 16, !tbaa !7
  %206 = fsub double %205, %203
  store double %206, double* %204, align 16, !tbaa !7
  %207 = or i64 %195, 1
  %208 = xor i64 %195, 4294967294
  %209 = add nuw i64 %208, %184
  %210 = shl i64 %209, 32
  %211 = ashr exact i64 %210, 32
  %212 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %211
  %213 = load double, double* %212, align 8, !tbaa !7
  %214 = fmul double %189, %213
  %215 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %207
  %216 = load double, double* %215, align 8, !tbaa !7
  %217 = fsub double %216, %214
  store double %217, double* %215, align 8, !tbaa !7
  %218 = add nuw nsw i64 %195, 2
  %219 = add i64 %196, -2
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %194

; <label>:221:                                    ; preds = %194, %183
  %222 = phi i64 [ 0, %183 ], [ %218, %194 ]
  %223 = icmp eq i64 %190, 0
  br i1 %223, label %235, label %224

; <label>:224:                                    ; preds = %221
  %225 = xor i64 %222, 4294967295
  %226 = add nuw i64 %225, %184
  %227 = shl i64 %226, 32
  %228 = ashr exact i64 %227, 32
  %229 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %228
  %230 = load double, double* %229, align 8, !tbaa !7
  %231 = fmul double %189, %230
  %232 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %222
  %233 = load double, double* %232, align 8, !tbaa !7
  %234 = fsub double %233, %231
  store double %234, double* %232, align 8, !tbaa !7
  br label %235

; <label>:235:                                    ; preds = %221, %224
  %236 = add nuw nsw i64 %187, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %20, i8* nonnull align 16 %84, i64 %236, i1 false) #7
  %237 = add nuw nsw i64 %184, 1
  %238 = add nuw nsw i64 %185, 1
  %239 = icmp eq i64 %238, %162
  br i1 %239, label %240, label %183

; <label>:240:                                    ; preds = %235, %182
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %84) #7
  br i1 %165, label %241, label %257

; <label>:241:                                    ; preds = %257, %240
  %242 = phi i64 [ 0, %240 ], [ %279, %257 ]
  br i1 %167, label %253, label %243

; <label>:243:                                    ; preds = %241
  %244 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %242
  %245 = load double, double* %244, align 8, !tbaa !7
  %246 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %242
  %247 = load double, double* %246, align 8, !tbaa !7
  %248 = fsub double %245, %247
  %249 = fdiv double %248, 1.000000e-03
  %250 = mul nsw i64 %242, %163
  %251 = add nsw i64 %250, %169
  %252 = getelementptr inbounds double, double* %18, i64 %251
  store double %249, double* %252, align 8, !tbaa !7
  br label %253

; <label>:253:                                    ; preds = %241, %243
  %254 = fadd double %172, -1.000000e-03
  store double %254, double* %170, align 8, !tbaa !7
  %255 = add nuw nsw i64 %169, 1
  %256 = icmp eq i64 %255, %82
  br i1 %256, label %282, label %168

; <label>:257:                                    ; preds = %240, %257
  %258 = phi i64 [ %279, %257 ], [ 0, %240 ]
  %259 = phi i64 [ %280, %257 ], [ %166, %240 ]
  %260 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %258
  %261 = load double, double* %260, align 16, !tbaa !7
  %262 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %258
  %263 = load double, double* %262, align 16, !tbaa !7
  %264 = fsub double %261, %263
  %265 = fdiv double %264, 1.000000e-03
  %266 = mul nsw i64 %258, %163
  %267 = add nsw i64 %266, %169
  %268 = getelementptr inbounds double, double* %18, i64 %267
  store double %265, double* %268, align 8, !tbaa !7
  %269 = or i64 %258, 1
  %270 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %269
  %271 = load double, double* %270, align 8, !tbaa !7
  %272 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %269
  %273 = load double, double* %272, align 8, !tbaa !7
  %274 = fsub double %271, %273
  %275 = fdiv double %274, 1.000000e-03
  %276 = mul nsw i64 %269, %163
  %277 = add nsw i64 %276, %169
  %278 = getelementptr inbounds double, double* %18, i64 %277
  store double %275, double* %278, align 8, !tbaa !7
  %279 = add nuw nsw i64 %258, 2
  %280 = add i64 %259, -2
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %241, label %257

; <label>:282:                                    ; preds = %253, %79
  %283 = icmp sgt i32 %13, 0
  br i1 %283, label %284, label %573

; <label>:284:                                    ; preds = %282
  %285 = add nsw i32 %11, %9
  %286 = sext i32 %285 to i64
  %287 = getelementptr double, double* %16, i64 %286
  %288 = bitcast double* %287 to i8*
  %289 = zext i32 %13 to i64
  %290 = shl nuw nsw i64 %289, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 %288, i64 %290, i1 false)
  %291 = bitcast [100 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %291) #7
  %292 = icmp sgt i32 %13, 100
  br i1 %292, label %293, label %300

; <label>:293:                                    ; preds = %284
  %294 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.21, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %294) #8
  unreachable

; <label>:295:                                    ; preds = %300
  %296 = icmp sgt i32 %13, 1
  br i1 %296, label %297, label %366

; <label>:297:                                    ; preds = %295
  %298 = add i32 %13, -1
  %299 = zext i32 %298 to i64
  br label %309

; <label>:300:                                    ; preds = %284, %300
  %301 = phi i64 [ %307, %300 ], [ 0, %284 ]
  %302 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %301
  %303 = load double, double* %302, align 8, !tbaa !7
  %304 = tail call double @tanh(double %303) #9
  %305 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %301
  store double %304, double* %305, align 8, !tbaa !7
  %306 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %301
  store double %304, double* %306, align 8, !tbaa !7
  %307 = add nuw nsw i64 %301, 1
  %308 = icmp eq i64 %307, %289
  br i1 %308, label %295, label %300

; <label>:309:                                    ; preds = %361, %297
  %310 = phi i64 [ 1, %297 ], [ %363, %361 ]
  %311 = phi i64 [ 0, %297 ], [ %364, %361 ]
  %312 = add nuw i64 %311, 1
  %313 = shl i64 %311, 3
  %314 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %310
  %315 = load double, double* %314, align 8, !tbaa !7
  %316 = and i64 %312, 1
  %317 = icmp eq i64 %311, 0
  br i1 %317, label %347, label %318

; <label>:318:                                    ; preds = %309
  %319 = sub i64 %312, %316
  br label %320

; <label>:320:                                    ; preds = %320, %318
  %321 = phi i64 [ 0, %318 ], [ %344, %320 ]
  %322 = phi i64 [ %319, %318 ], [ %345, %320 ]
  %323 = xor i64 %321, 4294967295
  %324 = add nuw i64 %323, %310
  %325 = shl i64 %324, 32
  %326 = ashr exact i64 %325, 32
  %327 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %326
  %328 = load double, double* %327, align 8, !tbaa !7
  %329 = fmul double %315, %328
  %330 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %321
  %331 = load double, double* %330, align 16, !tbaa !7
  %332 = fsub double %331, %329
  store double %332, double* %330, align 16, !tbaa !7
  %333 = or i64 %321, 1
  %334 = xor i64 %321, 4294967294
  %335 = add nuw i64 %334, %310
  %336 = shl i64 %335, 32
  %337 = ashr exact i64 %336, 32
  %338 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %337
  %339 = load double, double* %338, align 8, !tbaa !7
  %340 = fmul double %315, %339
  %341 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %333
  %342 = load double, double* %341, align 8, !tbaa !7
  %343 = fsub double %342, %340
  store double %343, double* %341, align 8, !tbaa !7
  %344 = add nuw nsw i64 %321, 2
  %345 = add i64 %322, -2
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %320

; <label>:347:                                    ; preds = %320, %309
  %348 = phi i64 [ 0, %309 ], [ %344, %320 ]
  %349 = icmp eq i64 %316, 0
  br i1 %349, label %361, label %350

; <label>:350:                                    ; preds = %347
  %351 = xor i64 %348, 4294967295
  %352 = add nuw i64 %351, %310
  %353 = shl i64 %352, 32
  %354 = ashr exact i64 %353, 32
  %355 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %354
  %356 = load double, double* %355, align 8, !tbaa !7
  %357 = fmul double %315, %356
  %358 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %348
  %359 = load double, double* %358, align 8, !tbaa !7
  %360 = fsub double %359, %357
  store double %360, double* %358, align 8, !tbaa !7
  br label %361

; <label>:361:                                    ; preds = %347, %350
  %362 = add nuw nsw i64 %313, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* nonnull align 16 %291, i64 %362, i1 false) #7
  %363 = add nuw nsw i64 %310, 1
  %364 = add nuw nsw i64 %311, 1
  %365 = icmp eq i64 %364, %299
  br i1 %365, label %366, label %309

; <label>:366:                                    ; preds = %361, %295
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %291) #7
  %367 = icmp eq i32 %13, 1
  %368 = add i32 %13, -1
  %369 = zext i32 %368 to i64
  br i1 %367, label %548, label %370

; <label>:370:                                    ; preds = %366
  %371 = add nsw i64 %289, -1
  %372 = add i32 %9, %11
  %373 = shl i32 %372, 1
  %374 = and i64 %289, 4294967294
  %375 = add nsw i64 %374, -2
  %376 = lshr exact i64 %375, 1
  %377 = add nuw i64 %376, 1
  %378 = icmp ult i32 %13, 2
  %379 = icmp ne i32 %14, 1
  %380 = trunc i64 %371 to i32
  %381 = icmp ugt i64 %371, 4294967295
  %382 = and i64 %289, 4294967294
  %383 = and i64 %377, 1
  %384 = icmp eq i64 %375, 0
  %385 = sub i64 %377, %383
  %386 = icmp eq i64 %383, 0
  %387 = icmp eq i64 %382, %289
  br label %388

; <label>:388:                                    ; preds = %370, %461
  %389 = phi i64 [ %463, %461 ], [ 0, %370 ]
  %390 = trunc i64 %389 to i32
  %391 = add i32 %373, %390
  %392 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %389
  %393 = load double, double* %392, align 8, !tbaa !7
  %394 = fadd double %393, 1.000000e-03
  store double %394, double* %392, align 8, !tbaa !7
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %291) #7
  br label %395

; <label>:395:                                    ; preds = %395, %388
  %396 = phi i64 [ 0, %388 ], [ %402, %395 ]
  %397 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %396
  %398 = load double, double* %397, align 8, !tbaa !7
  %399 = tail call double @tanh(double %398) #9
  %400 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %396
  store double %399, double* %400, align 8, !tbaa !7
  %401 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %396
  store double %399, double* %401, align 8, !tbaa !7
  %402 = add nuw nsw i64 %396, 1
  %403 = icmp eq i64 %402, %289
  br i1 %403, label %404, label %395

; <label>:404:                                    ; preds = %395, %456
  %405 = phi i64 [ %458, %456 ], [ 1, %395 ]
  %406 = phi i64 [ %459, %456 ], [ 0, %395 ]
  %407 = add nuw i64 %406, 1
  %408 = shl i64 %406, 3
  %409 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %405
  %410 = load double, double* %409, align 8, !tbaa !7
  %411 = and i64 %407, 1
  %412 = icmp eq i64 %406, 0
  br i1 %412, label %442, label %413

; <label>:413:                                    ; preds = %404
  %414 = sub i64 %407, %411
  br label %415

; <label>:415:                                    ; preds = %415, %413
  %416 = phi i64 [ 0, %413 ], [ %439, %415 ]
  %417 = phi i64 [ %414, %413 ], [ %440, %415 ]
  %418 = xor i64 %416, 4294967295
  %419 = add nuw i64 %418, %405
  %420 = shl i64 %419, 32
  %421 = ashr exact i64 %420, 32
  %422 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %421
  %423 = load double, double* %422, align 8, !tbaa !7
  %424 = fmul double %410, %423
  %425 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %416
  %426 = load double, double* %425, align 16, !tbaa !7
  %427 = fsub double %426, %424
  store double %427, double* %425, align 16, !tbaa !7
  %428 = or i64 %416, 1
  %429 = xor i64 %416, 4294967294
  %430 = add nuw i64 %429, %405
  %431 = shl i64 %430, 32
  %432 = ashr exact i64 %431, 32
  %433 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %432
  %434 = load double, double* %433, align 8, !tbaa !7
  %435 = fmul double %410, %434
  %436 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %428
  %437 = load double, double* %436, align 8, !tbaa !7
  %438 = fsub double %437, %435
  store double %438, double* %436, align 8, !tbaa !7
  %439 = add nuw nsw i64 %416, 2
  %440 = add i64 %417, -2
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %442, label %415

; <label>:442:                                    ; preds = %415, %404
  %443 = phi i64 [ 0, %404 ], [ %439, %415 ]
  %444 = icmp eq i64 %411, 0
  br i1 %444, label %456, label %445

; <label>:445:                                    ; preds = %442
  %446 = xor i64 %443, 4294967295
  %447 = add nuw i64 %446, %405
  %448 = shl i64 %447, 32
  %449 = ashr exact i64 %448, 32
  %450 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %449
  %451 = load double, double* %450, align 8, !tbaa !7
  %452 = fmul double %410, %451
  %453 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %443
  %454 = load double, double* %453, align 8, !tbaa !7
  %455 = fsub double %454, %452
  store double %455, double* %453, align 8, !tbaa !7
  br label %456

; <label>:456:                                    ; preds = %442, %445
  %457 = add nuw nsw i64 %408, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %20, i8* nonnull align 16 %291, i64 %457, i1 false) #7
  %458 = add nuw nsw i64 %405, 1
  %459 = add nuw nsw i64 %406, 1
  %460 = icmp eq i64 %459, %369
  br i1 %460, label %481, label %404

; <label>:461:                                    ; preds = %465, %547
  %462 = fadd double %394, -1.000000e-03
  store double %462, double* %392, align 8, !tbaa !7
  %463 = add nuw nsw i64 %389, 1
  %464 = icmp eq i64 %463, %289
  br i1 %464, label %573, label %388

; <label>:465:                                    ; preds = %484, %465
  %466 = phi i64 [ %479, %465 ], [ %485, %484 ]
  %467 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %466
  %468 = load double, double* %467, align 8, !tbaa !7
  %469 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %466
  %470 = load double, double* %469, align 8, !tbaa !7
  %471 = fsub double %468, %470
  %472 = fdiv double %471, 1.000000e-03
  %473 = trunc i64 %466 to i32
  %474 = add nsw i32 %285, %473
  %475 = mul nsw i32 %474, %14
  %476 = add nsw i32 %483, %475
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds double, double* %18, i64 %477
  store double %472, double* %478, align 8, !tbaa !7
  %479 = add nuw nsw i64 %466, 1
  %480 = icmp eq i64 %479, %289
  br i1 %480, label %461, label %465, !llvm.loop !169

; <label>:481:                                    ; preds = %456
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %291) #7
  %482 = trunc i64 %389 to i32
  %483 = add nsw i32 %285, %482
  br i1 %378, label %484, label %486

; <label>:484:                                    ; preds = %547, %486, %481
  %485 = phi i64 [ 0, %486 ], [ 0, %481 ], [ %382, %547 ]
  br label %465

; <label>:486:                                    ; preds = %481
  %487 = add i32 %391, %380
  %488 = icmp slt i32 %487, %391
  %489 = or i1 %488, %381
  %490 = or i1 %379, %489
  br i1 %490, label %484, label %491

; <label>:491:                                    ; preds = %486
  br i1 %384, label %529, label %492

; <label>:492:                                    ; preds = %491, %492
  %493 = phi i64 [ %526, %492 ], [ 0, %491 ]
  %494 = phi i64 [ %527, %492 ], [ %385, %491 ]
  %495 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %493
  %496 = bitcast double* %495 to <2 x double>*
  %497 = load <2 x double>, <2 x double>* %496, align 16, !tbaa !7
  %498 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %493
  %499 = bitcast double* %498 to <2 x double>*
  %500 = load <2 x double>, <2 x double>* %499, align 16, !tbaa !7
  %501 = fsub <2 x double> %497, %500
  %502 = fdiv <2 x double> %501, <double 1.000000e-03, double 1.000000e-03>
  %503 = trunc i64 %493 to i32
  %504 = add nsw i32 %285, %503
  %505 = mul nsw i32 %504, %14
  %506 = add nsw i32 %483, %505
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds double, double* %18, i64 %507
  %509 = bitcast double* %508 to <2 x double>*
  store <2 x double> %502, <2 x double>* %509, align 8, !tbaa !7
  %510 = or i64 %493, 2
  %511 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %510
  %512 = bitcast double* %511 to <2 x double>*
  %513 = load <2 x double>, <2 x double>* %512, align 16, !tbaa !7
  %514 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %510
  %515 = bitcast double* %514 to <2 x double>*
  %516 = load <2 x double>, <2 x double>* %515, align 16, !tbaa !7
  %517 = fsub <2 x double> %513, %516
  %518 = fdiv <2 x double> %517, <double 1.000000e-03, double 1.000000e-03>
  %519 = trunc i64 %510 to i32
  %520 = add nsw i32 %285, %519
  %521 = mul nsw i32 %520, %14
  %522 = add nsw i32 %483, %521
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds double, double* %18, i64 %523
  %525 = bitcast double* %524 to <2 x double>*
  store <2 x double> %518, <2 x double>* %525, align 8, !tbaa !7
  %526 = add i64 %493, 4
  %527 = add i64 %494, -2
  %528 = icmp eq i64 %527, 0
  br i1 %528, label %529, label %492, !llvm.loop !170

; <label>:529:                                    ; preds = %492, %491
  %530 = phi i64 [ 0, %491 ], [ %526, %492 ]
  br i1 %386, label %547, label %531

; <label>:531:                                    ; preds = %529
  %532 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %530
  %533 = bitcast double* %532 to <2 x double>*
  %534 = load <2 x double>, <2 x double>* %533, align 16, !tbaa !7
  %535 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 %530
  %536 = bitcast double* %535 to <2 x double>*
  %537 = load <2 x double>, <2 x double>* %536, align 16, !tbaa !7
  %538 = fsub <2 x double> %534, %537
  %539 = fdiv <2 x double> %538, <double 1.000000e-03, double 1.000000e-03>
  %540 = trunc i64 %530 to i32
  %541 = add nsw i32 %285, %540
  %542 = mul nsw i32 %541, %14
  %543 = add nsw i32 %483, %542
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds double, double* %18, i64 %544
  %546 = bitcast double* %545 to <2 x double>*
  store <2 x double> %539, <2 x double>* %546, align 8, !tbaa !7
  br label %547

; <label>:547:                                    ; preds = %529, %531
  br i1 %387, label %461, label %484

; <label>:548:                                    ; preds = %366
  %549 = sext i32 %14 to i64
  %550 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 0
  %551 = load double, double* %550, align 16, !tbaa !7
  %552 = fadd double %551, 1.000000e-03
  store double %552, double* %550, align 16, !tbaa !7
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %291) #7
  br label %553

; <label>:553:                                    ; preds = %553, %548
  %554 = phi i64 [ 0, %548 ], [ %560, %553 ]
  %555 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 %554
  %556 = load double, double* %555, align 8, !tbaa !7
  %557 = tail call double @tanh(double %556) #9
  %558 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 %554
  store double %557, double* %558, align 8, !tbaa !7
  %559 = getelementptr inbounds [100 x double], [100 x double]* %3, i64 0, i64 %554
  store double %557, double* %559, align 8, !tbaa !7
  %560 = add nuw nsw i64 %554, 1
  %561 = icmp eq i64 %560, %289
  br i1 %561, label %562, label %553

; <label>:562:                                    ; preds = %553
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %291) #7
  %563 = getelementptr inbounds [100 x double], [100 x double]* %7, i64 0, i64 0
  %564 = load double, double* %563, align 16, !tbaa !7
  %565 = getelementptr inbounds [100 x double], [100 x double]* %6, i64 0, i64 0
  %566 = load double, double* %565, align 16, !tbaa !7
  %567 = fsub double %564, %566
  %568 = fdiv double %567, 1.000000e-03
  %569 = mul nsw i64 %286, %549
  %570 = add nsw i64 %569, %286
  %571 = getelementptr inbounds double, double* %18, i64 %570
  store double %568, double* %571, align 8, !tbaa !7
  %572 = fadd double %552, -1.000000e-03
  store double %572, double* %550, align 16, !tbaa !7
  br label %573

; <label>:573:                                    ; preds = %461, %562, %282
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %20) #7
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %19) #7
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %5) #7
  ret %struct.SEXPREC* %15
}

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @ARIMA_Like(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %5 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0)) #7
  %6 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0)) #7
  %7 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0)) #7
  %8 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  %9 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #7
  %10 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)) #7
  %11 = tail call i32 @TYPEOF(%struct.SEXPREC* %5) #7
  %12 = icmp eq i32 %11, 14
  br i1 %12, label %13, label %28

; <label>:13:                                     ; preds = %4
  %14 = tail call i32 @TYPEOF(%struct.SEXPREC* %6) #7
  %15 = icmp eq i32 %14, 14
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %13
  %17 = tail call i32 @TYPEOF(%struct.SEXPREC* %7) #7
  %18 = icmp eq i32 %17, 14
  br i1 %18, label %19, label %28

; <label>:19:                                     ; preds = %16
  %20 = tail call i32 @TYPEOF(%struct.SEXPREC* %8) #7
  %21 = icmp eq i32 %20, 14
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %19
  %23 = tail call i32 @TYPEOF(%struct.SEXPREC* %9) #7
  %24 = icmp eq i32 %23, 14
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %22
  %26 = tail call i32 @TYPEOF(%struct.SEXPREC* %10) #7
  %27 = icmp eq i32 %26, 14
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %25, %22, %19, %16, %13, %4
  %29 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %29) #8
  unreachable

; <label>:30:                                     ; preds = %25
  %31 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NilValue, align 8, !tbaa !3
  %32 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %33 = tail call i32 @LENGTH(%struct.SEXPREC* %8) #7
  %34 = tail call i32 @LENGTH(%struct.SEXPREC* %5) #7
  %35 = tail call i32 @LENGTH(%struct.SEXPREC* %6) #7
  %36 = tail call i32 @LENGTH(%struct.SEXPREC* %7) #7
  %37 = sub i32 %33, %36
  %38 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %39 = tail call double* @REAL(%struct.SEXPREC* %8) #7
  %40 = bitcast double* %39 to i8*
  %41 = tail call double* @REAL(%struct.SEXPREC* %9) #7
  %42 = tail call double* @REAL(%struct.SEXPREC* %10) #7
  %43 = bitcast double* %42 to i8*
  %44 = tail call double* @REAL(%struct.SEXPREC* %5) #7
  %45 = tail call double* @REAL(%struct.SEXPREC* %6) #7
  %46 = tail call double* @REAL(%struct.SEXPREC* %7) #7
  %47 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %3) #7
  %48 = sext i32 %33 to i64
  %49 = tail call i8* @R_alloc(i64 %48, i32 8) #7
  %50 = bitcast i8* %49 to double*
  %51 = tail call i8* @R_alloc(i64 %48, i32 8) #7
  %52 = bitcast i8* %51 to double*
  %53 = icmp sgt i32 %36, 0
  br i1 %53, label %54, label %59

; <label>:54:                                     ; preds = %30
  %55 = mul nsw i32 %33, %33
  %56 = zext i32 %55 to i64
  %57 = tail call i8* @R_alloc(i64 %56, i32 8) #7
  %58 = bitcast i8* %57 to double*
  br label %59

; <label>:59:                                     ; preds = %54, %30
  %60 = phi i8* [ %57, %54 ], [ null, %30 ]
  %61 = phi double* [ %58, %54 ], [ null, %30 ]
  %62 = icmp ne i32 %47, 0
  br i1 %62, label %63, label %68

; <label>:63:                                     ; preds = %59
  %64 = sext i32 %32 to i64
  %65 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %64) #7
  %66 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %65) #7
  %67 = tail call double* @REAL(%struct.SEXPREC* %65) #7
  br label %68

; <label>:68:                                     ; preds = %63, %59
  %69 = phi %struct.SEXPREC* [ %65, %63 ], [ %31, %59 ]
  %70 = phi double* [ %67, %63 ], [ null, %59 ]
  %71 = icmp sgt i32 %32, 0
  br i1 %71, label %72, label %309

; <label>:72:                                     ; preds = %68
  %73 = icmp sgt i32 %37, 0
  %74 = add nsw i32 %37, -1
  %75 = add nsw i32 %37, 1
  %76 = icmp slt i32 %75, %33
  %77 = sext i32 %37 to i64
  %78 = getelementptr inbounds double, double* %50, i64 %77
  %79 = icmp eq i32 %36, 0
  %80 = icmp sgt i32 %33, 0
  %81 = icmp sgt i32 %36, 1
  %82 = mul nsw i32 %37, %33
  %83 = icmp slt i32 %35, 0
  %84 = mul i32 %33, %33
  %85 = icmp eq i32 %84, 0
  %86 = sext i32 %74 to i64
  %87 = sext i32 %34 to i64
  %88 = add i32 %33, 1
  %89 = sub i32 %88, %36
  %90 = sext i32 %89 to i64
  %91 = zext i32 %33 to i64
  %92 = shl nuw nsw i64 %91, 3
  %93 = sext i32 %82 to i64
  %94 = add i32 %35, 1
  %95 = sext i32 %35 to i64
  %96 = zext i32 %37 to i64
  %97 = zext i32 %36 to i64
  %98 = zext i32 %37 to i64
  %99 = zext i32 %36 to i64
  %100 = zext i32 %37 to i64
  %101 = zext i32 %36 to i64
  %102 = zext i32 %94 to i64
  %103 = zext i32 %37 to i64
  %104 = zext i32 %37 to i64
  %105 = zext i32 %84 to i64
  %106 = zext i32 %32 to i64
  %107 = getelementptr double, double* %39, i64 %91
  %108 = bitcast double* %107 to i8*
  %109 = shl nuw nsw i64 %91, 3
  %110 = getelementptr i8, i8* %49, i64 %109
  %111 = getelementptr i8, i8* %51, i64 %109
  %112 = getelementptr i8, i8* %51, i64 %109
  %113 = getelementptr double, double* %42, i64 %91
  %114 = bitcast double* %113 to i8*
  %115 = getelementptr double, double* %41, i64 %105
  %116 = getelementptr double, double* %42, i64 %105
  %117 = getelementptr double, double* %39, i64 %91
  %118 = bitcast double* %117 to i8*
  %119 = shl nuw nsw i64 %91, 3
  %120 = getelementptr i8, i8* %49, i64 %119
  %121 = add i32 %33, 1
  %122 = sub i32 %121, %36
  %123 = mul i32 %33, %122
  %124 = getelementptr double, double* %42, i64 %91
  %125 = mul i32 %33, %37
  %126 = getelementptr double, double* %61, i64 %91
  %127 = getelementptr double, double* %42, i64 %93
  %128 = add nsw i64 %93, %91
  %129 = getelementptr double, double* %42, i64 %128
  %130 = bitcast double* %129 to i8*
  %131 = getelementptr double, double* %61, i64 %91
  %132 = getelementptr double, double* %42, i64 %91
  %133 = getelementptr double, double* %61, i64 %91
  %134 = add i32 %36, -2
  %135 = zext i32 %134 to i64
  %136 = add nuw nsw i64 %135, 1
  %137 = shl nsw i64 %90, 3
  %138 = getelementptr i8, i8* %49, i64 %137
  %139 = zext i32 %134 to i64
  %140 = shl nuw nsw i64 %139, 3
  %141 = add nsw i64 %137, %140
  %142 = add nsw i64 %141, 8
  %143 = getelementptr i8, i8* %49, i64 %142
  %144 = sext i32 %37 to i64
  %145 = getelementptr double, double* %39, i64 %144
  %146 = bitcast double* %145 to i8*
  %147 = add nsw i64 %144, %139
  %148 = add nsw i64 %147, 1
  %149 = getelementptr double, double* %39, i64 %148
  %150 = bitcast double* %149 to i8*
  %151 = add nsw i64 %97, -1
  %152 = add nsw i64 %91, -1
  %153 = and i64 %91, 4294967292
  %154 = add nsw i64 %153, -4
  %155 = lshr exact i64 %154, 2
  %156 = add nuw nsw i64 %155, 1
  %157 = and i64 %105, 4294967292
  %158 = add nsw i64 %157, -4
  %159 = lshr exact i64 %158, 2
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %91, 4294967294
  %162 = add nsw i64 %161, -2
  %163 = lshr exact i64 %162, 1
  %164 = add nuw i64 %163, 1
  %165 = icmp ult i64 %136, 4
  %166 = add i32 %33, -2
  %167 = icmp slt i32 %166, %37
  %168 = or i1 %165, %167
  %169 = icmp ult i8* %138, %150
  %170 = icmp ugt i8* %143, %146
  %171 = and i1 %169, %170
  %172 = add i32 %36, 3
  %173 = and i32 %172, 3
  %174 = zext i32 %173 to i64
  %175 = sub nsw i64 %136, %174
  %176 = add nsw i64 %175, %90
  %177 = trunc i64 %175 to i32
  %178 = add i32 %37, %177
  %179 = icmp eq i32 %173, 0
  %180 = and i64 %97, 1
  %181 = icmp eq i64 %151, 0
  %182 = sub nsw i64 %97, %180
  %183 = icmp eq i64 %180, 0
  %184 = and i64 %91, 3
  %185 = icmp ult i64 %152, 3
  %186 = sub nsw i64 %91, %184
  %187 = icmp eq i64 %184, 0
  %188 = and i64 %91, 1
  %189 = icmp eq i64 %152, 0
  %190 = sub nsw i64 %91, %188
  %191 = icmp eq i64 %188, 0
  %192 = and i64 %91, 1
  %193 = icmp eq i64 %152, 0
  %194 = sub nsw i64 %91, %192
  %195 = icmp eq i64 %192, 0
  %196 = and i64 %97, 1
  %197 = icmp eq i64 %151, 0
  %198 = sub nsw i64 %97, %196
  %199 = icmp eq i64 %196, 0
  %200 = and i1 %81, %80
  %201 = and i64 %91, 1
  %202 = icmp eq i64 %152, 0
  %203 = sub nsw i64 %91, %201
  %204 = icmp eq i64 %201, 0
  %205 = icmp ult i32 %33, 4
  %206 = and i64 %91, 4294967292
  %207 = and i64 %156, 1
  %208 = icmp eq i64 %154, 0
  %209 = sub nsw i64 %156, %207
  %210 = icmp eq i64 %207, 0
  %211 = icmp eq i64 %206, %91
  %212 = and i64 %91, 1
  %213 = icmp eq i64 %212, 0
  %214 = sub nsw i64 0, %91
  %215 = icmp ult i32 %33, 4
  %216 = icmp ult double* %127, %131
  %217 = icmp ult i8* %60, %130
  %218 = and i1 %216, %217
  %219 = and i64 %91, 4294967292
  %220 = and i64 %156, 3
  %221 = icmp ult i64 %154, 12
  %222 = sub nsw i64 %156, %220
  %223 = icmp eq i64 %220, 0
  %224 = icmp eq i64 %219, %91
  %225 = and i64 %91, 3
  %226 = icmp eq i64 %225, 0
  %227 = and i64 %97, 1
  %228 = icmp eq i64 %151, 0
  %229 = sub nsw i64 %97, %227
  %230 = icmp eq i64 %227, 0
  %231 = and i1 %81, %80
  %232 = icmp ult i32 %33, 4
  %233 = and i64 %91, 4294967292
  %234 = and i64 %156, 1
  %235 = icmp eq i64 %154, 0
  %236 = sub nsw i64 %156, %234
  %237 = icmp eq i64 %234, 0
  %238 = icmp eq i64 %233, %91
  %239 = and i64 %91, 3
  %240 = icmp eq i64 %239, 0
  %241 = and i64 %102, 1
  %242 = icmp eq i32 %35, 0
  %243 = sub nsw i64 %102, %241
  %244 = icmp eq i64 %241, 0
  %245 = icmp ult i32 %33, 4
  %246 = icmp ugt i8* %120, %40
  %247 = icmp ult i8* %49, %118
  %248 = and i1 %246, %247
  %249 = and i64 %91, 4294967292
  %250 = and i64 %156, 3
  %251 = icmp ult i64 %154, 12
  %252 = sub nsw i64 %156, %250
  %253 = icmp eq i64 %250, 0
  %254 = icmp eq i64 %249, %91
  %255 = icmp ult i32 %84, 4
  %256 = icmp ult double* %41, %116
  %257 = icmp ult double* %42, %115
  %258 = and i1 %256, %257
  %259 = and i64 %105, 4294967292
  %260 = and i64 %160, 3
  %261 = icmp ult i64 %158, 12
  %262 = sub nsw i64 %160, %260
  %263 = icmp eq i64 %260, 0
  %264 = icmp eq i64 %259, %105
  %265 = and i64 %97, 1
  %266 = icmp eq i64 %151, 0
  %267 = sub nsw i64 %97, %265
  %268 = icmp eq i64 %265, 0
  %269 = icmp ult i32 %33, 4
  %270 = icmp ult i8* %51, %114
  %271 = icmp ugt i8* %112, %43
  %272 = and i1 %270, %271
  %273 = and i64 %91, 4294967292
  %274 = and i64 %156, 3
  %275 = icmp ult i64 %154, 12
  %276 = sub nsw i64 %156, %274
  %277 = icmp eq i64 %274, 0
  %278 = icmp eq i64 %273, %91
  %279 = and i64 %97, 1
  %280 = icmp eq i64 %151, 0
  %281 = sub nsw i64 %97, %279
  %282 = icmp eq i64 %279, 0
  %283 = and i64 %97, 1
  %284 = icmp eq i64 %151, 0
  %285 = sub nsw i64 %97, %283
  %286 = icmp eq i64 %283, 0
  %287 = icmp eq i32 %33, 1
  %288 = icmp ugt i8* %110, %40
  %289 = icmp ult i8* %49, %108
  %290 = and i1 %288, %289
  %291 = icmp ugt i8* %111, %40
  %292 = icmp ult i8* %51, %108
  %293 = and i1 %291, %292
  %294 = or i1 %290, %293
  %295 = and i64 %91, 4294967294
  %296 = and i64 %164, 1
  %297 = icmp eq i64 %162, 0
  %298 = sub i64 %164, %296
  %299 = icmp eq i64 %296, 0
  %300 = icmp eq i64 %295, %91
  %301 = and i64 %91, 1
  %302 = icmp eq i64 %301, 0
  %303 = sub nsw i64 0, %91
  br label %304

; <label>:304:                                    ; preds = %2042, %72
  %305 = phi i64 [ 0, %72 ], [ %2046, %2042 ]
  %306 = phi i32 [ 0, %72 ], [ %2045, %2042 ]
  %307 = phi double [ 0.000000e+00, %72 ], [ %2044, %2042 ]
  %308 = phi double [ 0.000000e+00, %72 ], [ %2043, %2042 ]
  br i1 %73, label %365, label %313

; <label>:309:                                    ; preds = %2042, %68
  %310 = phi double [ 0.000000e+00, %68 ], [ %2043, %2042 ]
  %311 = phi double [ 0.000000e+00, %68 ], [ %2044, %2042 ]
  %312 = phi i32 [ 0, %68 ], [ %2045, %2042 ]
  br i1 %62, label %2048, label %2060

; <label>:313:                                    ; preds = %381, %304
  br i1 %53, label %314, label %468

; <label>:314:                                    ; preds = %313
  br i1 %76, label %315, label %386

; <label>:315:                                    ; preds = %314
  %316 = or i1 %168, %171
  br i1 %316, label %317, label %346

; <label>:317:                                    ; preds = %315, %364
  %318 = phi i64 [ %90, %315 ], [ %176, %364 ]
  %319 = phi i32 [ %37, %315 ], [ %178, %364 ]
  %320 = trunc i64 %318 to i32
  %321 = sub i32 %33, %320
  %322 = xor i32 %320, -1
  %323 = add i32 %33, %322
  %324 = and i32 %321, 3
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %342, label %326

; <label>:326:                                    ; preds = %317, %326
  %327 = phi i64 [ %336, %326 ], [ %318, %317 ]
  %328 = phi i32 [ %337, %326 ], [ %319, %317 ]
  %329 = phi i32 [ %338, %326 ], [ %324, %317 ]
  %330 = sext i32 %328 to i64
  %331 = getelementptr inbounds double, double* %39, i64 %330
  %332 = bitcast double* %331 to i64*
  %333 = load i64, i64* %332, align 8, !tbaa !7
  %334 = getelementptr inbounds double, double* %50, i64 %327
  %335 = bitcast double* %334 to i64*
  store i64 %333, i64* %335, align 8, !tbaa !7
  %336 = add nsw i64 %327, 1
  %337 = trunc i64 %327 to i32
  %338 = add i32 %329, -1
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %326, !llvm.loop !171

; <label>:340:                                    ; preds = %326
  %341 = trunc i64 %327 to i32
  br label %342

; <label>:342:                                    ; preds = %317, %340
  %343 = phi i64 [ %318, %317 ], [ %336, %340 ]
  %344 = phi i32 [ %319, %317 ], [ %341, %340 ]
  %345 = icmp ult i32 %323, 3
  br i1 %345, label %386, label %388

; <label>:346:                                    ; preds = %315, %346
  %347 = phi i64 [ %362, %346 ], [ 0, %315 ]
  %348 = add i64 %347, %90
  %349 = trunc i64 %347 to i32
  %350 = add i32 %37, %349
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds double, double* %39, i64 %351
  %353 = bitcast double* %352 to <2 x i64>*
  %354 = load <2 x i64>, <2 x i64>* %353, align 8, !tbaa !7, !alias.scope !172
  %355 = getelementptr inbounds double, double* %352, i64 2
  %356 = bitcast double* %355 to <2 x i64>*
  %357 = load <2 x i64>, <2 x i64>* %356, align 8, !tbaa !7, !alias.scope !172
  %358 = getelementptr inbounds double, double* %50, i64 %348
  %359 = bitcast double* %358 to <2 x i64>*
  store <2 x i64> %354, <2 x i64>* %359, align 8, !tbaa !7, !alias.scope !175, !noalias !172
  %360 = getelementptr inbounds double, double* %358, i64 2
  %361 = bitcast double* %360 to <2 x i64>*
  store <2 x i64> %357, <2 x i64>* %361, align 8, !tbaa !7, !alias.scope !175, !noalias !172
  %362 = add i64 %347, 4
  %363 = icmp eq i64 %362, %175
  br i1 %363, label %364, label %346, !llvm.loop !177

; <label>:364:                                    ; preds = %346
  br i1 %179, label %386, label %317

; <label>:365:                                    ; preds = %304, %381
  %366 = phi i64 [ %384, %381 ], [ 0, %304 ]
  %367 = icmp slt i64 %366, %86
  br i1 %367, label %368, label %372

; <label>:368:                                    ; preds = %365
  %369 = add nuw nsw i64 %366, 1
  %370 = getelementptr inbounds double, double* %39, i64 %369
  %371 = load double, double* %370, align 8, !tbaa !7
  br label %372

; <label>:372:                                    ; preds = %365, %368
  %373 = phi double [ %371, %368 ], [ 0.000000e+00, %365 ]
  %374 = icmp slt i64 %366, %87
  br i1 %374, label %375, label %381

; <label>:375:                                    ; preds = %372
  %376 = getelementptr inbounds double, double* %44, i64 %366
  %377 = load double, double* %376, align 8, !tbaa !7
  %378 = load double, double* %39, align 8, !tbaa !7
  %379 = fmul double %377, %378
  %380 = fadd double %373, %379
  br label %381

; <label>:381:                                    ; preds = %375, %372
  %382 = phi double [ %380, %375 ], [ %373, %372 ]
  %383 = getelementptr inbounds double, double* %50, i64 %366
  store double %382, double* %383, align 8, !tbaa !7
  %384 = add nuw nsw i64 %366, 1
  %385 = icmp eq i64 %384, %96
  br i1 %385, label %313, label %365

; <label>:386:                                    ; preds = %342, %388, %364, %314
  %387 = load double, double* %39, align 8, !tbaa !7
  br i1 %181, label %425, label %441

; <label>:388:                                    ; preds = %342, %388
  %389 = phi i64 [ %421, %388 ], [ %343, %342 ]
  %390 = phi i32 [ %422, %388 ], [ %344, %342 ]
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds double, double* %39, i64 %391
  %393 = bitcast double* %392 to i64*
  %394 = load i64, i64* %393, align 8, !tbaa !7
  %395 = getelementptr inbounds double, double* %50, i64 %389
  %396 = bitcast double* %395 to i64*
  store i64 %394, i64* %396, align 8, !tbaa !7
  %397 = add nsw i64 %389, 1
  %398 = shl i64 %389, 32
  %399 = ashr exact i64 %398, 32
  %400 = getelementptr inbounds double, double* %39, i64 %399
  %401 = bitcast double* %400 to i64*
  %402 = load i64, i64* %401, align 8, !tbaa !7
  %403 = getelementptr inbounds double, double* %50, i64 %397
  %404 = bitcast double* %403 to i64*
  store i64 %402, i64* %404, align 8, !tbaa !7
  %405 = add nsw i64 %389, 2
  %406 = shl i64 %397, 32
  %407 = ashr exact i64 %406, 32
  %408 = getelementptr inbounds double, double* %39, i64 %407
  %409 = bitcast double* %408 to i64*
  %410 = load i64, i64* %409, align 8, !tbaa !7
  %411 = getelementptr inbounds double, double* %50, i64 %405
  %412 = bitcast double* %411 to i64*
  store i64 %410, i64* %412, align 8, !tbaa !7
  %413 = add nsw i64 %389, 3
  %414 = shl i64 %405, 32
  %415 = ashr exact i64 %414, 32
  %416 = getelementptr inbounds double, double* %39, i64 %415
  %417 = bitcast double* %416 to i64*
  %418 = load i64, i64* %417, align 8, !tbaa !7
  %419 = getelementptr inbounds double, double* %50, i64 %413
  %420 = bitcast double* %419 to i64*
  store i64 %418, i64* %420, align 8, !tbaa !7
  %421 = add nsw i64 %389, 4
  %422 = trunc i64 %413 to i32
  %423 = trunc i64 %421 to i32
  %424 = icmp eq i32 %33, %423
  br i1 %424, label %386, label %388, !llvm.loop !178

; <label>:425:                                    ; preds = %441, %386
  %426 = phi double [ undef, %386 ], [ %463, %441 ]
  %427 = phi i64 [ 0, %386 ], [ %464, %441 ]
  %428 = phi i32 [ 0, %386 ], [ %465, %441 ]
  %429 = phi double [ %387, %386 ], [ %463, %441 ]
  br i1 %183, label %439, label %430

; <label>:430:                                    ; preds = %425
  %431 = getelementptr inbounds double, double* %46, i64 %427
  %432 = load double, double* %431, align 8, !tbaa !7
  %433 = add nsw i32 %428, %37
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds double, double* %39, i64 %434
  %436 = load double, double* %435, align 8, !tbaa !7
  %437 = fmul double %432, %436
  %438 = fadd double %429, %437
  br label %439

; <label>:439:                                    ; preds = %425, %430
  %440 = phi double [ %426, %425 ], [ %438, %430 ]
  store double %440, double* %78, align 8, !tbaa !7
  br label %468

; <label>:441:                                    ; preds = %386, %441
  %442 = phi i64 [ %464, %441 ], [ 0, %386 ]
  %443 = phi i32 [ %465, %441 ], [ 0, %386 ]
  %444 = phi double [ %463, %441 ], [ %387, %386 ]
  %445 = phi i64 [ %466, %441 ], [ %182, %386 ]
  %446 = getelementptr inbounds double, double* %46, i64 %442
  %447 = load double, double* %446, align 8, !tbaa !7
  %448 = add nsw i32 %443, %37
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds double, double* %39, i64 %449
  %451 = load double, double* %450, align 8, !tbaa !7
  %452 = fmul double %447, %451
  %453 = fadd double %444, %452
  %454 = or i64 %442, 1
  %455 = or i32 %443, 1
  %456 = getelementptr inbounds double, double* %46, i64 %454
  %457 = load double, double* %456, align 8, !tbaa !7
  %458 = add nsw i32 %455, %37
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds double, double* %39, i64 %459
  %461 = load double, double* %460, align 8, !tbaa !7
  %462 = fmul double %457, %461
  %463 = fadd double %453, %462
  %464 = add nuw nsw i64 %442, 2
  %465 = add nuw nsw i32 %443, 2
  %466 = add i64 %445, -2
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %425, label %441

; <label>:468:                                    ; preds = %439, %313
  %469 = tail call i32 @Rf_asInteger(%struct.SEXPREC* %2) #7
  %470 = sext i32 %469 to i64
  %471 = icmp sgt i64 %305, %470
  br i1 %471, label %472, label %1324

; <label>:472:                                    ; preds = %468
  br i1 %79, label %568, label %473

; <label>:473:                                    ; preds = %472
  br i1 %73, label %474, label %652

; <label>:474:                                    ; preds = %473
  br i1 %80, label %475, label %725

; <label>:475:                                    ; preds = %474, %523
  %476 = phi i64 [ %480, %523 ], [ 0, %474 ]
  %477 = icmp slt i64 %476, %87
  %478 = getelementptr inbounds double, double* %44, i64 %476
  %479 = icmp slt i64 %476, %86
  %480 = add nuw nsw i64 %476, 1
  br i1 %477, label %525, label %544

; <label>:481:                                    ; preds = %545, %481
  %482 = phi i64 [ %499, %481 ], [ 0, %545 ]
  %483 = phi i64 [ %500, %481 ], [ %186, %545 ]
  %484 = mul nsw i64 %482, %48
  %485 = add nsw i64 %484, %476
  %486 = getelementptr inbounds double, double* %61, i64 %485
  store double 0.000000e+00, double* %486, align 8, !tbaa !7
  %487 = or i64 %482, 1
  %488 = mul nsw i64 %487, %48
  %489 = add nsw i64 %488, %476
  %490 = getelementptr inbounds double, double* %61, i64 %489
  store double 0.000000e+00, double* %490, align 8, !tbaa !7
  %491 = or i64 %482, 2
  %492 = mul nsw i64 %491, %48
  %493 = add nsw i64 %492, %476
  %494 = getelementptr inbounds double, double* %61, i64 %493
  store double 0.000000e+00, double* %494, align 8, !tbaa !7
  %495 = or i64 %482, 3
  %496 = mul nsw i64 %495, %48
  %497 = add nsw i64 %496, %476
  %498 = getelementptr inbounds double, double* %61, i64 %497
  store double 0.000000e+00, double* %498, align 8, !tbaa !7
  %499 = add nuw nsw i64 %482, 4
  %500 = add i64 %483, -4
  %501 = icmp eq i64 %500, 0
  br i1 %501, label %512, label %481

; <label>:502:                                    ; preds = %547, %546
  %503 = phi i64 [ 0, %546 ], [ %565, %547 ]
  br i1 %191, label %523, label %504

; <label>:504:                                    ; preds = %502
  %505 = mul nsw i64 %503, %48
  %506 = add nsw i64 %480, %505
  %507 = getelementptr inbounds double, double* %41, i64 %506
  %508 = load double, double* %507, align 8, !tbaa !7
  %509 = fadd double %508, 0.000000e+00
  %510 = add nsw i64 %505, %476
  %511 = getelementptr inbounds double, double* %61, i64 %510
  store double %509, double* %511, align 8, !tbaa !7
  br label %523

; <label>:512:                                    ; preds = %481, %545
  %513 = phi i64 [ 0, %545 ], [ %499, %481 ]
  br i1 %187, label %523, label %514

; <label>:514:                                    ; preds = %512, %514
  %515 = phi i64 [ %520, %514 ], [ %513, %512 ]
  %516 = phi i64 [ %521, %514 ], [ %184, %512 ]
  %517 = mul nsw i64 %515, %48
  %518 = add nsw i64 %517, %476
  %519 = getelementptr inbounds double, double* %61, i64 %518
  store double 0.000000e+00, double* %519, align 8, !tbaa !7
  %520 = add nuw nsw i64 %515, 1
  %521 = add i64 %516, -1
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %523, label %514, !llvm.loop !179

; <label>:523:                                    ; preds = %512, %514, %504, %502, %538
  %524 = icmp eq i64 %480, %98
  br i1 %524, label %652, label %475

; <label>:525:                                    ; preds = %475, %538
  %526 = phi i64 [ %542, %538 ], [ 0, %475 ]
  %527 = load double, double* %478, align 8, !tbaa !7
  %528 = mul nsw i64 %526, %48
  %529 = getelementptr inbounds double, double* %41, i64 %528
  %530 = load double, double* %529, align 8, !tbaa !7
  %531 = fmul double %527, %530
  %532 = fadd double %531, 0.000000e+00
  br i1 %479, label %533, label %538

; <label>:533:                                    ; preds = %525
  %534 = add nsw i64 %480, %528
  %535 = getelementptr inbounds double, double* %41, i64 %534
  %536 = load double, double* %535, align 8, !tbaa !7
  %537 = fadd double %532, %536
  br label %538

; <label>:538:                                    ; preds = %533, %525
  %539 = phi double [ %537, %533 ], [ %532, %525 ]
  %540 = add nsw i64 %528, %476
  %541 = getelementptr inbounds double, double* %61, i64 %540
  store double %539, double* %541, align 8, !tbaa !7
  %542 = add nuw nsw i64 %526, 1
  %543 = icmp eq i64 %542, %91
  br i1 %543, label %523, label %525

; <label>:544:                                    ; preds = %475
  br i1 %479, label %546, label %545

; <label>:545:                                    ; preds = %544
  br i1 %185, label %512, label %481

; <label>:546:                                    ; preds = %544
  br i1 %189, label %502, label %547

; <label>:547:                                    ; preds = %546, %547
  %548 = phi i64 [ %565, %547 ], [ 0, %546 ]
  %549 = phi i64 [ %566, %547 ], [ %190, %546 ]
  %550 = mul nsw i64 %548, %48
  %551 = add nsw i64 %480, %550
  %552 = getelementptr inbounds double, double* %41, i64 %551
  %553 = load double, double* %552, align 8, !tbaa !7
  %554 = fadd double %553, 0.000000e+00
  %555 = add nsw i64 %550, %476
  %556 = getelementptr inbounds double, double* %61, i64 %555
  store double %554, double* %556, align 8, !tbaa !7
  %557 = or i64 %548, 1
  %558 = mul nsw i64 %557, %48
  %559 = add nsw i64 %480, %558
  %560 = getelementptr inbounds double, double* %41, i64 %559
  %561 = load double, double* %560, align 8, !tbaa !7
  %562 = fadd double %561, 0.000000e+00
  %563 = add nsw i64 %558, %476
  %564 = getelementptr inbounds double, double* %61, i64 %563
  store double %562, double* %564, align 8, !tbaa !7
  %565 = add nuw nsw i64 %548, 2
  %566 = add i64 %549, -2
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %502, label %547

; <label>:568:                                    ; preds = %472
  br i1 %73, label %569, label %1324

; <label>:569:                                    ; preds = %568, %587
  %570 = phi i64 [ %583, %587 ], [ 0, %568 ]
  %571 = icmp eq i64 %570, 0
  br i1 %571, label %578, label %572

; <label>:572:                                    ; preds = %569
  %573 = icmp sgt i64 %570, %95
  br i1 %573, label %578, label %574

; <label>:574:                                    ; preds = %572
  %575 = add nsw i64 %570, -1
  %576 = getelementptr inbounds double, double* %45, i64 %575
  %577 = load double, double* %576, align 8, !tbaa !7
  br label %578

; <label>:578:                                    ; preds = %574, %572, %569
  %579 = phi double [ %577, %574 ], [ 0.000000e+00, %572 ], [ 1.000000e+00, %569 ]
  %580 = icmp slt i64 %570, %87
  %581 = getelementptr inbounds double, double* %44, i64 %570
  %582 = icmp slt i64 %570, %86
  %583 = add nuw nsw i64 %570, 1
  %584 = getelementptr inbounds double, double* %41, i64 %583
  %585 = trunc i64 %583 to i32
  %586 = trunc i64 %570 to i32
  br label %589

; <label>:587:                                    ; preds = %643
  %588 = icmp eq i64 %583, %104
  br i1 %588, label %1324, label %569

; <label>:589:                                    ; preds = %643, %578
  %590 = phi i64 [ 0, %578 ], [ %649, %643 ]
  %591 = phi i32 [ 0, %578 ], [ %650, %643 ]
  %592 = icmp eq i64 %590, 0
  br i1 %592, label %600, label %593

; <label>:593:                                    ; preds = %589
  %594 = icmp sgt i64 %590, %95
  br i1 %594, label %600, label %595

; <label>:595:                                    ; preds = %593
  %596 = add nsw i64 %590, -1
  %597 = getelementptr inbounds double, double* %45, i64 %596
  %598 = load double, double* %597, align 8, !tbaa !7
  %599 = fmul double %579, %598
  br label %600

; <label>:600:                                    ; preds = %589, %593, %595
  %601 = phi double [ %599, %595 ], [ 0.000000e+00, %593 ], [ %579, %589 ]
  %602 = icmp slt i64 %590, %87
  %603 = and i1 %580, %602
  br i1 %603, label %604, label %612

; <label>:604:                                    ; preds = %600
  %605 = load double, double* %581, align 8, !tbaa !7
  %606 = getelementptr inbounds double, double* %44, i64 %590
  %607 = load double, double* %606, align 8, !tbaa !7
  %608 = fmul double %605, %607
  %609 = load double, double* %41, align 8, !tbaa !7
  %610 = fmul double %608, %609
  %611 = fadd double %601, %610
  br label %612

; <label>:612:                                    ; preds = %604, %600
  %613 = phi double [ %611, %604 ], [ %601, %600 ]
  %614 = icmp slt i64 %590, %86
  %615 = and i1 %582, %614
  br i1 %615, label %616, label %624

; <label>:616:                                    ; preds = %612
  %617 = add nuw nsw i32 %591, 1
  %618 = mul nsw i32 %617, %37
  %619 = add nsw i32 %618, %585
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds double, double* %41, i64 %620
  %622 = load double, double* %621, align 8, !tbaa !7
  %623 = fadd double %613, %622
  br label %624

; <label>:624:                                    ; preds = %616, %612
  %625 = phi double [ %623, %616 ], [ %613, %612 ]
  %626 = and i1 %580, %614
  br i1 %626, label %627, label %634

; <label>:627:                                    ; preds = %624
  %628 = load double, double* %581, align 8, !tbaa !7
  %629 = add nuw nsw i64 %590, 1
  %630 = getelementptr inbounds double, double* %41, i64 %629
  %631 = load double, double* %630, align 8, !tbaa !7
  %632 = fmul double %628, %631
  %633 = fadd double %625, %632
  br label %634

; <label>:634:                                    ; preds = %627, %624
  %635 = phi double [ %633, %627 ], [ %625, %624 ]
  %636 = and i1 %582, %602
  br i1 %636, label %637, label %643

; <label>:637:                                    ; preds = %634
  %638 = getelementptr inbounds double, double* %44, i64 %590
  %639 = load double, double* %638, align 8, !tbaa !7
  %640 = load double, double* %584, align 8, !tbaa !7
  %641 = fmul double %639, %640
  %642 = fadd double %635, %641
  br label %643

; <label>:643:                                    ; preds = %634, %637
  %644 = phi double [ %642, %637 ], [ %635, %634 ]
  %645 = mul nsw i32 %591, %37
  %646 = add nsw i32 %645, %586
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds double, double* %42, i64 %647
  store double %644, double* %648, align 8, !tbaa !7
  %649 = add nuw nsw i64 %590, 1
  %650 = add nuw nsw i32 %591, 1
  %651 = icmp eq i64 %649, %103
  br i1 %651, label %587, label %589

; <label>:652:                                    ; preds = %523, %473
  br i1 %80, label %653, label %725

; <label>:653:                                    ; preds = %652
  br i1 %53, label %655, label %654

; <label>:654:                                    ; preds = %653
  br i1 %193, label %712, label %778

; <label>:655:                                    ; preds = %653, %704
  %656 = phi i64 [ %709, %704 ], [ 0, %653 ]
  %657 = phi i32 [ %710, %704 ], [ 0, %653 ]
  %658 = mul nsw i64 %656, %48
  %659 = mul nsw i32 %657, %33
  %660 = getelementptr inbounds double, double* %41, i64 %658
  %661 = load double, double* %660, align 8, !tbaa !7
  %662 = trunc i64 %658 to i32
  %663 = add i32 %37, %662
  br i1 %197, label %690, label %664

; <label>:664:                                    ; preds = %655, %664
  %665 = phi i64 [ %687, %664 ], [ 0, %655 ]
  %666 = phi double [ %686, %664 ], [ %661, %655 ]
  %667 = phi i64 [ %688, %664 ], [ %198, %655 ]
  %668 = getelementptr inbounds double, double* %46, i64 %665
  %669 = load double, double* %668, align 8, !tbaa !7
  %670 = trunc i64 %665 to i32
  %671 = add i32 %663, %670
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds double, double* %41, i64 %672
  %674 = load double, double* %673, align 8, !tbaa !7
  %675 = fmul double %669, %674
  %676 = fadd double %666, %675
  %677 = or i64 %665, 1
  %678 = getelementptr inbounds double, double* %46, i64 %677
  %679 = load double, double* %678, align 8, !tbaa !7
  %680 = trunc i64 %677 to i32
  %681 = add i32 %663, %680
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds double, double* %41, i64 %682
  %684 = load double, double* %683, align 8, !tbaa !7
  %685 = fmul double %679, %684
  %686 = fadd double %676, %685
  %687 = add nuw nsw i64 %665, 2
  %688 = add i64 %667, -2
  %689 = icmp eq i64 %688, 0
  br i1 %689, label %690, label %664

; <label>:690:                                    ; preds = %664, %655
  %691 = phi double [ undef, %655 ], [ %686, %664 ]
  %692 = phi i64 [ 0, %655 ], [ %687, %664 ]
  %693 = phi double [ %661, %655 ], [ %686, %664 ]
  br i1 %199, label %704, label %694

; <label>:694:                                    ; preds = %690
  %695 = getelementptr inbounds double, double* %46, i64 %692
  %696 = load double, double* %695, align 8, !tbaa !7
  %697 = trunc i64 %692 to i32
  %698 = add i32 %663, %697
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds double, double* %41, i64 %699
  %701 = load double, double* %700, align 8, !tbaa !7
  %702 = fmul double %696, %701
  %703 = fadd double %693, %702
  br label %704

; <label>:704:                                    ; preds = %690, %694
  %705 = phi double [ %691, %690 ], [ %703, %694 ]
  %706 = add nsw i32 %659, %37
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds double, double* %61, i64 %707
  store double %705, double* %708, align 8, !tbaa !7
  %709 = add nuw nsw i64 %656, 1
  %710 = add nuw nsw i32 %657, 1
  %711 = icmp eq i64 %709, %91
  br i1 %711, label %725, label %655

; <label>:712:                                    ; preds = %778, %654
  %713 = phi i64 [ 0, %654 ], [ %802, %778 ]
  %714 = phi i32 [ 0, %654 ], [ %803, %778 ]
  br i1 %195, label %725, label %715

; <label>:715:                                    ; preds = %712
  %716 = mul nsw i64 %713, %48
  %717 = mul nsw i32 %714, %33
  %718 = getelementptr inbounds double, double* %41, i64 %716
  %719 = bitcast double* %718 to i64*
  %720 = load i64, i64* %719, align 8, !tbaa !7
  %721 = add nsw i32 %717, %37
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds double, double* %61, i64 %722
  %724 = bitcast double* %723 to i64*
  store i64 %720, i64* %724, align 8, !tbaa !7
  br label %725

; <label>:725:                                    ; preds = %715, %712, %704, %474, %652
  br i1 %200, label %726, label %806

; <label>:726:                                    ; preds = %725, %774
  %727 = phi i64 [ %775, %774 ], [ 1, %725 ]
  %728 = phi i32 [ %776, %774 ], [ 1, %725 ]
  %729 = add nsw i32 %728, %37
  %730 = sext i32 %729 to i64
  br i1 %202, label %760, label %731

; <label>:731:                                    ; preds = %726, %731
  %732 = phi i64 [ %757, %731 ], [ 0, %726 ]
  %733 = phi i64 [ %758, %731 ], [ %203, %726 ]
  %734 = mul nsw i64 %732, %48
  %735 = trunc i64 %734 to i32
  %736 = add i32 %729, %735
  %737 = add i32 %736, -1
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds double, double* %41, i64 %738
  %740 = bitcast double* %739 to i64*
  %741 = load i64, i64* %740, align 8, !tbaa !7
  %742 = add nsw i64 %734, %730
  %743 = getelementptr inbounds double, double* %61, i64 %742
  %744 = bitcast double* %743 to i64*
  store i64 %741, i64* %744, align 8, !tbaa !7
  %745 = or i64 %732, 1
  %746 = mul nsw i64 %745, %48
  %747 = trunc i64 %746 to i32
  %748 = add i32 %729, %747
  %749 = add i32 %748, -1
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds double, double* %41, i64 %750
  %752 = bitcast double* %751 to i64*
  %753 = load i64, i64* %752, align 8, !tbaa !7
  %754 = add nsw i64 %746, %730
  %755 = getelementptr inbounds double, double* %61, i64 %754
  %756 = bitcast double* %755 to i64*
  store i64 %753, i64* %756, align 8, !tbaa !7
  %757 = add nuw nsw i64 %732, 2
  %758 = add i64 %733, -2
  %759 = icmp eq i64 %758, 0
  br i1 %759, label %760, label %731

; <label>:760:                                    ; preds = %731, %726
  %761 = phi i64 [ 0, %726 ], [ %757, %731 ]
  br i1 %204, label %774, label %762

; <label>:762:                                    ; preds = %760
  %763 = mul nsw i64 %761, %48
  %764 = trunc i64 %763 to i32
  %765 = add i32 %729, %764
  %766 = add i32 %765, -1
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds double, double* %41, i64 %767
  %769 = bitcast double* %768 to i64*
  %770 = load i64, i64* %769, align 8, !tbaa !7
  %771 = add nsw i64 %763, %730
  %772 = getelementptr inbounds double, double* %61, i64 %771
  %773 = bitcast double* %772 to i64*
  store i64 %770, i64* %773, align 8, !tbaa !7
  br label %774

; <label>:774:                                    ; preds = %760, %762
  %775 = add nuw nsw i64 %727, 1
  %776 = add nuw nsw i32 %728, 1
  %777 = icmp eq i64 %775, %99
  br i1 %777, label %806, label %726

; <label>:778:                                    ; preds = %654, %778
  %779 = phi i64 [ %802, %778 ], [ 0, %654 ]
  %780 = phi i32 [ %803, %778 ], [ 0, %654 ]
  %781 = phi i64 [ %804, %778 ], [ %194, %654 ]
  %782 = mul nsw i64 %779, %48
  %783 = mul nsw i32 %780, %33
  %784 = getelementptr inbounds double, double* %41, i64 %782
  %785 = bitcast double* %784 to i64*
  %786 = load i64, i64* %785, align 8, !tbaa !7
  %787 = add nsw i32 %783, %37
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds double, double* %61, i64 %788
  %790 = bitcast double* %789 to i64*
  store i64 %786, i64* %790, align 8, !tbaa !7
  %791 = or i64 %779, 1
  %792 = or i32 %780, 1
  %793 = mul nsw i64 %791, %48
  %794 = mul nsw i32 %792, %33
  %795 = getelementptr inbounds double, double* %41, i64 %793
  %796 = bitcast double* %795 to i64*
  %797 = load i64, i64* %796, align 8, !tbaa !7
  %798 = add nsw i32 %794, %37
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds double, double* %61, i64 %799
  %801 = bitcast double* %800 to i64*
  store i64 %797, i64* %801, align 8, !tbaa !7
  %802 = add nuw nsw i64 %779, 2
  %803 = add nuw nsw i32 %780, 2
  %804 = add i64 %781, -2
  %805 = icmp eq i64 %804, 0
  br i1 %805, label %712, label %778

; <label>:806:                                    ; preds = %774, %725
  br i1 %73, label %961, label %807

; <label>:807:                                    ; preds = %1098, %806
  br i1 %80, label %808, label %1101

; <label>:808:                                    ; preds = %807
  br i1 %53, label %904, label %809

; <label>:809:                                    ; preds = %808
  %810 = or i1 %215, %218
  br i1 %810, label %811, label %830

; <label>:811:                                    ; preds = %809, %903
  %812 = phi i64 [ 0, %809 ], [ %219, %903 ]
  %813 = xor i64 %812, -1
  %814 = add nsw i64 %813, %91
  br i1 %226, label %827, label %815

; <label>:815:                                    ; preds = %811, %815
  %816 = phi i64 [ %824, %815 ], [ %812, %811 ]
  %817 = phi i64 [ %825, %815 ], [ %225, %811 ]
  %818 = getelementptr inbounds double, double* %61, i64 %816
  %819 = bitcast double* %818 to i64*
  %820 = load i64, i64* %819, align 8, !tbaa !7
  %821 = add nsw i64 %816, %93
  %822 = getelementptr inbounds double, double* %42, i64 %821
  %823 = bitcast double* %822 to i64*
  store i64 %820, i64* %823, align 8, !tbaa !7
  %824 = add nuw nsw i64 %816, 1
  %825 = add i64 %817, -1
  %826 = icmp eq i64 %825, 0
  br i1 %826, label %827, label %815, !llvm.loop !180

; <label>:827:                                    ; preds = %815, %811
  %828 = phi i64 [ %812, %811 ], [ %824, %815 ]
  %829 = icmp ult i64 %814, 3
  br i1 %829, label %1101, label %1233

; <label>:830:                                    ; preds = %809
  br i1 %221, label %884, label %831

; <label>:831:                                    ; preds = %830, %831
  %832 = phi i64 [ %881, %831 ], [ 0, %830 ]
  %833 = phi i64 [ %882, %831 ], [ %222, %830 ]
  %834 = getelementptr inbounds double, double* %61, i64 %832
  %835 = bitcast double* %834 to <2 x i64>*
  %836 = load <2 x i64>, <2 x i64>* %835, align 8, !tbaa !7, !alias.scope !181
  %837 = getelementptr inbounds double, double* %834, i64 2
  %838 = bitcast double* %837 to <2 x i64>*
  %839 = load <2 x i64>, <2 x i64>* %838, align 8, !tbaa !7, !alias.scope !181
  %840 = add nsw i64 %832, %93
  %841 = getelementptr inbounds double, double* %42, i64 %840
  %842 = bitcast double* %841 to <2 x i64>*
  store <2 x i64> %836, <2 x i64>* %842, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %843 = getelementptr inbounds double, double* %841, i64 2
  %844 = bitcast double* %843 to <2 x i64>*
  store <2 x i64> %839, <2 x i64>* %844, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %845 = or i64 %832, 4
  %846 = getelementptr inbounds double, double* %61, i64 %845
  %847 = bitcast double* %846 to <2 x i64>*
  %848 = load <2 x i64>, <2 x i64>* %847, align 8, !tbaa !7, !alias.scope !181
  %849 = getelementptr inbounds double, double* %846, i64 2
  %850 = bitcast double* %849 to <2 x i64>*
  %851 = load <2 x i64>, <2 x i64>* %850, align 8, !tbaa !7, !alias.scope !181
  %852 = add nsw i64 %845, %93
  %853 = getelementptr inbounds double, double* %42, i64 %852
  %854 = bitcast double* %853 to <2 x i64>*
  store <2 x i64> %848, <2 x i64>* %854, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %855 = getelementptr inbounds double, double* %853, i64 2
  %856 = bitcast double* %855 to <2 x i64>*
  store <2 x i64> %851, <2 x i64>* %856, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %857 = or i64 %832, 8
  %858 = getelementptr inbounds double, double* %61, i64 %857
  %859 = bitcast double* %858 to <2 x i64>*
  %860 = load <2 x i64>, <2 x i64>* %859, align 8, !tbaa !7, !alias.scope !181
  %861 = getelementptr inbounds double, double* %858, i64 2
  %862 = bitcast double* %861 to <2 x i64>*
  %863 = load <2 x i64>, <2 x i64>* %862, align 8, !tbaa !7, !alias.scope !181
  %864 = add nsw i64 %857, %93
  %865 = getelementptr inbounds double, double* %42, i64 %864
  %866 = bitcast double* %865 to <2 x i64>*
  store <2 x i64> %860, <2 x i64>* %866, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %867 = getelementptr inbounds double, double* %865, i64 2
  %868 = bitcast double* %867 to <2 x i64>*
  store <2 x i64> %863, <2 x i64>* %868, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %869 = or i64 %832, 12
  %870 = getelementptr inbounds double, double* %61, i64 %869
  %871 = bitcast double* %870 to <2 x i64>*
  %872 = load <2 x i64>, <2 x i64>* %871, align 8, !tbaa !7, !alias.scope !181
  %873 = getelementptr inbounds double, double* %870, i64 2
  %874 = bitcast double* %873 to <2 x i64>*
  %875 = load <2 x i64>, <2 x i64>* %874, align 8, !tbaa !7, !alias.scope !181
  %876 = add nsw i64 %869, %93
  %877 = getelementptr inbounds double, double* %42, i64 %876
  %878 = bitcast double* %877 to <2 x i64>*
  store <2 x i64> %872, <2 x i64>* %878, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %879 = getelementptr inbounds double, double* %877, i64 2
  %880 = bitcast double* %879 to <2 x i64>*
  store <2 x i64> %875, <2 x i64>* %880, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %881 = add i64 %832, 16
  %882 = add i64 %833, -4
  %883 = icmp eq i64 %882, 0
  br i1 %883, label %884, label %831, !llvm.loop !186

; <label>:884:                                    ; preds = %831, %830
  %885 = phi i64 [ 0, %830 ], [ %881, %831 ]
  br i1 %223, label %903, label %886

; <label>:886:                                    ; preds = %884, %886
  %887 = phi i64 [ %900, %886 ], [ %885, %884 ]
  %888 = phi i64 [ %901, %886 ], [ %220, %884 ]
  %889 = getelementptr inbounds double, double* %61, i64 %887
  %890 = bitcast double* %889 to <2 x i64>*
  %891 = load <2 x i64>, <2 x i64>* %890, align 8, !tbaa !7, !alias.scope !181
  %892 = getelementptr inbounds double, double* %889, i64 2
  %893 = bitcast double* %892 to <2 x i64>*
  %894 = load <2 x i64>, <2 x i64>* %893, align 8, !tbaa !7, !alias.scope !181
  %895 = add nsw i64 %887, %93
  %896 = getelementptr inbounds double, double* %42, i64 %895
  %897 = bitcast double* %896 to <2 x i64>*
  store <2 x i64> %891, <2 x i64>* %897, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %898 = getelementptr inbounds double, double* %896, i64 2
  %899 = bitcast double* %898 to <2 x i64>*
  store <2 x i64> %894, <2 x i64>* %899, align 8, !tbaa !7, !alias.scope !184, !noalias !181
  %900 = add i64 %887, 4
  %901 = add i64 %888, -1
  %902 = icmp eq i64 %901, 0
  br i1 %902, label %903, label %886, !llvm.loop !187

; <label>:903:                                    ; preds = %886, %884
  br i1 %224, label %1101, label %811

; <label>:904:                                    ; preds = %808, %955
  %905 = phi i64 [ %959, %955 ], [ 0, %808 ]
  %906 = getelementptr inbounds double, double* %61, i64 %905
  %907 = load double, double* %906, align 8, !tbaa !7
  %908 = trunc i64 %905 to i32
  br i1 %228, label %939, label %909

; <label>:909:                                    ; preds = %904, %909
  %910 = phi i64 [ %936, %909 ], [ 0, %904 ]
  %911 = phi double [ %935, %909 ], [ %907, %904 ]
  %912 = phi i64 [ %937, %909 ], [ %229, %904 ]
  %913 = getelementptr inbounds double, double* %46, i64 %910
  %914 = load double, double* %913, align 8, !tbaa !7
  %915 = trunc i64 %910 to i32
  %916 = add nsw i32 %37, %915
  %917 = mul nsw i32 %916, %33
  %918 = add nsw i32 %917, %908
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds double, double* %61, i64 %919
  %921 = load double, double* %920, align 8, !tbaa !7
  %922 = fmul double %914, %921
  %923 = fadd double %911, %922
  %924 = or i64 %910, 1
  %925 = getelementptr inbounds double, double* %46, i64 %924
  %926 = load double, double* %925, align 8, !tbaa !7
  %927 = trunc i64 %924 to i32
  %928 = add nsw i32 %37, %927
  %929 = mul nsw i32 %928, %33
  %930 = add nsw i32 %929, %908
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds double, double* %61, i64 %931
  %933 = load double, double* %932, align 8, !tbaa !7
  %934 = fmul double %926, %933
  %935 = fadd double %923, %934
  %936 = add nuw nsw i64 %910, 2
  %937 = add i64 %912, -2
  %938 = icmp eq i64 %937, 0
  br i1 %938, label %939, label %909

; <label>:939:                                    ; preds = %909, %904
  %940 = phi double [ undef, %904 ], [ %935, %909 ]
  %941 = phi i64 [ 0, %904 ], [ %936, %909 ]
  %942 = phi double [ %907, %904 ], [ %935, %909 ]
  br i1 %230, label %955, label %943

; <label>:943:                                    ; preds = %939
  %944 = getelementptr inbounds double, double* %46, i64 %941
  %945 = load double, double* %944, align 8, !tbaa !7
  %946 = trunc i64 %941 to i32
  %947 = add nsw i32 %37, %946
  %948 = mul nsw i32 %947, %33
  %949 = add nsw i32 %948, %908
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds double, double* %61, i64 %950
  %952 = load double, double* %951, align 8, !tbaa !7
  %953 = fmul double %945, %952
  %954 = fadd double %942, %953
  br label %955

; <label>:955:                                    ; preds = %939, %943
  %956 = phi double [ %940, %939 ], [ %954, %943 ]
  %957 = add nsw i64 %905, %93
  %958 = getelementptr inbounds double, double* %42, i64 %957
  store double %956, double* %958, align 8, !tbaa !7
  %959 = add nuw nsw i64 %905, 1
  %960 = icmp eq i64 %959, %91
  br i1 %960, label %1101, label %904

; <label>:961:                                    ; preds = %806, %1098
  %962 = phi i64 [ %1099, %1098 ], [ 0, %806 ]
  %963 = trunc i64 %962 to i32
  %964 = mul i32 %33, %963
  %965 = sext i32 %964 to i64
  %966 = getelementptr double, double* %42, i64 %965
  %967 = bitcast double* %966 to i8*
  br i1 %80, label %970, label %968

; <label>:968:                                    ; preds = %961
  %969 = add nuw nsw i64 %962, 1
  br label %1098

; <label>:970:                                    ; preds = %961
  %971 = icmp slt i64 %962, %87
  %972 = getelementptr inbounds double, double* %44, i64 %962
  %973 = icmp slt i64 %962, %86
  %974 = add nuw nsw i64 %962, 1
  %975 = mul nsw i64 %974, %48
  %976 = mul nsw i64 %962, %48
  br i1 %971, label %977, label %999

; <label>:977:                                    ; preds = %970, %991
  %978 = phi i64 [ %997, %991 ], [ 0, %970 ]
  %979 = load double, double* %972, align 8, !tbaa !7
  %980 = getelementptr inbounds double, double* %61, i64 %978
  %981 = load double, double* %980, align 8, !tbaa !7
  %982 = fmul double %979, %981
  %983 = fadd double %982, 0.000000e+00
  br i1 %973, label %984, label %991

; <label>:984:                                    ; preds = %977
  %985 = add i64 %978, %975
  %986 = shl i64 %985, 32
  %987 = ashr exact i64 %986, 32
  %988 = getelementptr inbounds double, double* %61, i64 %987
  %989 = load double, double* %988, align 8, !tbaa !7
  %990 = fadd double %983, %989
  br label %991

; <label>:991:                                    ; preds = %977, %984
  %992 = phi double [ %990, %984 ], [ %983, %977 ]
  %993 = add i64 %978, %976
  %994 = shl i64 %993, 32
  %995 = ashr exact i64 %994, 32
  %996 = getelementptr inbounds double, double* %42, i64 %995
  store double %992, double* %996, align 8, !tbaa !7
  %997 = add nuw nsw i64 %978, 1
  %998 = icmp eq i64 %997, %91
  br i1 %998, label %1098, label %977

; <label>:999:                                    ; preds = %970
  br i1 %973, label %1000, label %1080

; <label>:1000:                                   ; preds = %999
  br i1 %205, label %1001, label %1015

; <label>:1001:                                   ; preds = %1079, %1015, %1000
  %1002 = phi i64 [ 0, %1015 ], [ 0, %1000 ], [ %206, %1079 ]
  %1003 = xor i64 %1002, -1
  br i1 %213, label %1012, label %1004

; <label>:1004:                                   ; preds = %1001
  %1005 = add nsw i64 %1002, %975
  %1006 = getelementptr inbounds double, double* %61, i64 %1005
  %1007 = load double, double* %1006, align 8, !tbaa !7
  %1008 = fadd double %1007, 0.000000e+00
  %1009 = add nsw i64 %1002, %976
  %1010 = getelementptr inbounds double, double* %42, i64 %1009
  store double %1008, double* %1010, align 8, !tbaa !7
  %1011 = or i64 %1002, 1
  br label %1012

; <label>:1012:                                   ; preds = %1004, %1001
  %1013 = phi i64 [ %1011, %1004 ], [ %1002, %1001 ]
  %1014 = icmp eq i64 %1003, %214
  br i1 %1014, label %1098, label %1081

; <label>:1015:                                   ; preds = %1000
  %1016 = mul i64 %962, %48
  %1017 = getelementptr double, double* %42, i64 %1016
  %1018 = getelementptr double, double* %132, i64 %1016
  %1019 = add i64 %962, 1
  %1020 = mul i64 %1019, %48
  %1021 = getelementptr double, double* %61, i64 %1020
  %1022 = getelementptr double, double* %133, i64 %1020
  %1023 = icmp ult double* %1017, %1022
  %1024 = icmp ult double* %1021, %1018
  %1025 = and i1 %1023, %1024
  br i1 %1025, label %1001, label %1026

; <label>:1026:                                   ; preds = %1015
  br i1 %208, label %1062, label %1027

; <label>:1027:                                   ; preds = %1026, %1027
  %1028 = phi i64 [ %1059, %1027 ], [ 0, %1026 ]
  %1029 = phi i64 [ %1060, %1027 ], [ %209, %1026 ]
  %1030 = add nsw i64 %1028, %975
  %1031 = getelementptr inbounds double, double* %61, i64 %1030
  %1032 = bitcast double* %1031 to <2 x double>*
  %1033 = load <2 x double>, <2 x double>* %1032, align 8, !tbaa !7, !alias.scope !188
  %1034 = getelementptr inbounds double, double* %1031, i64 2
  %1035 = bitcast double* %1034 to <2 x double>*
  %1036 = load <2 x double>, <2 x double>* %1035, align 8, !tbaa !7, !alias.scope !188
  %1037 = fadd <2 x double> %1033, zeroinitializer
  %1038 = fadd <2 x double> %1036, zeroinitializer
  %1039 = add nsw i64 %1028, %976
  %1040 = getelementptr inbounds double, double* %42, i64 %1039
  %1041 = bitcast double* %1040 to <2 x double>*
  store <2 x double> %1037, <2 x double>* %1041, align 8, !tbaa !7, !alias.scope !191, !noalias !188
  %1042 = getelementptr inbounds double, double* %1040, i64 2
  %1043 = bitcast double* %1042 to <2 x double>*
  store <2 x double> %1038, <2 x double>* %1043, align 8, !tbaa !7, !alias.scope !191, !noalias !188
  %1044 = or i64 %1028, 4
  %1045 = add nsw i64 %1044, %975
  %1046 = getelementptr inbounds double, double* %61, i64 %1045
  %1047 = bitcast double* %1046 to <2 x double>*
  %1048 = load <2 x double>, <2 x double>* %1047, align 8, !tbaa !7, !alias.scope !188
  %1049 = getelementptr inbounds double, double* %1046, i64 2
  %1050 = bitcast double* %1049 to <2 x double>*
  %1051 = load <2 x double>, <2 x double>* %1050, align 8, !tbaa !7, !alias.scope !188
  %1052 = fadd <2 x double> %1048, zeroinitializer
  %1053 = fadd <2 x double> %1051, zeroinitializer
  %1054 = add nsw i64 %1044, %976
  %1055 = getelementptr inbounds double, double* %42, i64 %1054
  %1056 = bitcast double* %1055 to <2 x double>*
  store <2 x double> %1052, <2 x double>* %1056, align 8, !tbaa !7, !alias.scope !191, !noalias !188
  %1057 = getelementptr inbounds double, double* %1055, i64 2
  %1058 = bitcast double* %1057 to <2 x double>*
  store <2 x double> %1053, <2 x double>* %1058, align 8, !tbaa !7, !alias.scope !191, !noalias !188
  %1059 = add i64 %1028, 8
  %1060 = add i64 %1029, -2
  %1061 = icmp eq i64 %1060, 0
  br i1 %1061, label %1062, label %1027, !llvm.loop !193

; <label>:1062:                                   ; preds = %1027, %1026
  %1063 = phi i64 [ 0, %1026 ], [ %1059, %1027 ]
  br i1 %210, label %1079, label %1064

; <label>:1064:                                   ; preds = %1062
  %1065 = add nsw i64 %1063, %975
  %1066 = getelementptr inbounds double, double* %61, i64 %1065
  %1067 = bitcast double* %1066 to <2 x double>*
  %1068 = load <2 x double>, <2 x double>* %1067, align 8, !tbaa !7, !alias.scope !188
  %1069 = getelementptr inbounds double, double* %1066, i64 2
  %1070 = bitcast double* %1069 to <2 x double>*
  %1071 = load <2 x double>, <2 x double>* %1070, align 8, !tbaa !7, !alias.scope !188
  %1072 = fadd <2 x double> %1068, zeroinitializer
  %1073 = fadd <2 x double> %1071, zeroinitializer
  %1074 = add nsw i64 %1063, %976
  %1075 = getelementptr inbounds double, double* %42, i64 %1074
  %1076 = bitcast double* %1075 to <2 x double>*
  store <2 x double> %1072, <2 x double>* %1076, align 8, !tbaa !7, !alias.scope !191, !noalias !188
  %1077 = getelementptr inbounds double, double* %1075, i64 2
  %1078 = bitcast double* %1077 to <2 x double>*
  store <2 x double> %1073, <2 x double>* %1078, align 8, !tbaa !7, !alias.scope !191, !noalias !188
  br label %1079

; <label>:1079:                                   ; preds = %1062, %1064
  br i1 %211, label %1098, label %1001

; <label>:1080:                                   ; preds = %999
  call void @llvm.memset.p0i8.i64(i8* align 8 %967, i8 0, i64 %92, i1 false)
  br label %1098

; <label>:1081:                                   ; preds = %1012, %1081
  %1082 = phi i64 [ %1096, %1081 ], [ %1013, %1012 ]
  %1083 = add nsw i64 %1082, %975
  %1084 = getelementptr inbounds double, double* %61, i64 %1083
  %1085 = load double, double* %1084, align 8, !tbaa !7
  %1086 = fadd double %1085, 0.000000e+00
  %1087 = add nsw i64 %1082, %976
  %1088 = getelementptr inbounds double, double* %42, i64 %1087
  store double %1086, double* %1088, align 8, !tbaa !7
  %1089 = add nuw nsw i64 %1082, 1
  %1090 = add nsw i64 %1089, %975
  %1091 = getelementptr inbounds double, double* %61, i64 %1090
  %1092 = load double, double* %1091, align 8, !tbaa !7
  %1093 = fadd double %1092, 0.000000e+00
  %1094 = add nsw i64 %1089, %976
  %1095 = getelementptr inbounds double, double* %42, i64 %1094
  store double %1093, double* %1095, align 8, !tbaa !7
  %1096 = add nsw i64 %1082, 2
  %1097 = icmp eq i64 %1096, %91
  br i1 %1097, label %1098, label %1081, !llvm.loop !194

; <label>:1098:                                   ; preds = %1012, %1081, %991, %1079, %968, %1080
  %1099 = phi i64 [ %969, %968 ], [ %974, %1080 ], [ %974, %1079 ], [ %974, %991 ], [ %974, %1081 ], [ %974, %1012 ]
  %1100 = icmp eq i64 %1099, %100
  br i1 %1100, label %807, label %961

; <label>:1101:                                   ; preds = %827, %1233, %955, %903, %807
  br i1 %231, label %1102, label %1264

; <label>:1102:                                   ; preds = %1101, %1228
  %1103 = phi i32 [ %1232, %1228 ], [ 0, %1101 ]
  %1104 = phi i64 [ %1229, %1228 ], [ 1, %1101 ]
  %1105 = phi i32 [ %1230, %1228 ], [ 1, %1101 ]
  %1106 = mul i32 %33, %1103
  %1107 = add i32 %123, %1106
  %1108 = sext i32 %1107 to i64
  %1109 = add i32 %125, %1106
  %1110 = sext i32 %1109 to i64
  %1111 = add nsw i32 %1105, %37
  %1112 = add nsw i32 %1111, -1
  %1113 = mul nsw i32 %1112, %33
  %1114 = mul nsw i32 %1111, %33
  %1115 = sext i32 %1113 to i64
  %1116 = sext i32 %1114 to i64
  br i1 %232, label %1173, label %1117

; <label>:1117:                                   ; preds = %1102
  %1118 = getelementptr double, double* %126, i64 %1110
  %1119 = getelementptr double, double* %61, i64 %1110
  %1120 = getelementptr double, double* %124, i64 %1108
  %1121 = getelementptr double, double* %42, i64 %1108
  %1122 = icmp ult double* %1121, %1118
  %1123 = icmp ult double* %1119, %1120
  %1124 = and i1 %1122, %1123
  br i1 %1124, label %1173, label %1125

; <label>:1125:                                   ; preds = %1117
  br i1 %235, label %1157, label %1126

; <label>:1126:                                   ; preds = %1125, %1126
  %1127 = phi i64 [ %1154, %1126 ], [ 0, %1125 ]
  %1128 = phi i64 [ %1155, %1126 ], [ %236, %1125 ]
  %1129 = add nsw i64 %1127, %1115
  %1130 = getelementptr inbounds double, double* %61, i64 %1129
  %1131 = bitcast double* %1130 to <2 x i64>*
  %1132 = load <2 x i64>, <2 x i64>* %1131, align 8, !tbaa !7, !alias.scope !195
  %1133 = getelementptr inbounds double, double* %1130, i64 2
  %1134 = bitcast double* %1133 to <2 x i64>*
  %1135 = load <2 x i64>, <2 x i64>* %1134, align 8, !tbaa !7, !alias.scope !195
  %1136 = add nsw i64 %1127, %1116
  %1137 = getelementptr inbounds double, double* %42, i64 %1136
  %1138 = bitcast double* %1137 to <2 x i64>*
  store <2 x i64> %1132, <2 x i64>* %1138, align 8, !tbaa !7, !alias.scope !198, !noalias !195
  %1139 = getelementptr inbounds double, double* %1137, i64 2
  %1140 = bitcast double* %1139 to <2 x i64>*
  store <2 x i64> %1135, <2 x i64>* %1140, align 8, !tbaa !7, !alias.scope !198, !noalias !195
  %1141 = or i64 %1127, 4
  %1142 = add nsw i64 %1141, %1115
  %1143 = getelementptr inbounds double, double* %61, i64 %1142
  %1144 = bitcast double* %1143 to <2 x i64>*
  %1145 = load <2 x i64>, <2 x i64>* %1144, align 8, !tbaa !7, !alias.scope !195
  %1146 = getelementptr inbounds double, double* %1143, i64 2
  %1147 = bitcast double* %1146 to <2 x i64>*
  %1148 = load <2 x i64>, <2 x i64>* %1147, align 8, !tbaa !7, !alias.scope !195
  %1149 = add nsw i64 %1141, %1116
  %1150 = getelementptr inbounds double, double* %42, i64 %1149
  %1151 = bitcast double* %1150 to <2 x i64>*
  store <2 x i64> %1145, <2 x i64>* %1151, align 8, !tbaa !7, !alias.scope !198, !noalias !195
  %1152 = getelementptr inbounds double, double* %1150, i64 2
  %1153 = bitcast double* %1152 to <2 x i64>*
  store <2 x i64> %1148, <2 x i64>* %1153, align 8, !tbaa !7, !alias.scope !198, !noalias !195
  %1154 = add i64 %1127, 8
  %1155 = add i64 %1128, -2
  %1156 = icmp eq i64 %1155, 0
  br i1 %1156, label %1157, label %1126, !llvm.loop !200

; <label>:1157:                                   ; preds = %1126, %1125
  %1158 = phi i64 [ 0, %1125 ], [ %1154, %1126 ]
  br i1 %237, label %1172, label %1159

; <label>:1159:                                   ; preds = %1157
  %1160 = add nsw i64 %1158, %1115
  %1161 = getelementptr inbounds double, double* %61, i64 %1160
  %1162 = bitcast double* %1161 to <2 x i64>*
  %1163 = load <2 x i64>, <2 x i64>* %1162, align 8, !tbaa !7, !alias.scope !195
  %1164 = getelementptr inbounds double, double* %1161, i64 2
  %1165 = bitcast double* %1164 to <2 x i64>*
  %1166 = load <2 x i64>, <2 x i64>* %1165, align 8, !tbaa !7, !alias.scope !195
  %1167 = add nsw i64 %1158, %1116
  %1168 = getelementptr inbounds double, double* %42, i64 %1167
  %1169 = bitcast double* %1168 to <2 x i64>*
  store <2 x i64> %1163, <2 x i64>* %1169, align 8, !tbaa !7, !alias.scope !198, !noalias !195
  %1170 = getelementptr inbounds double, double* %1168, i64 2
  %1171 = bitcast double* %1170 to <2 x i64>*
  store <2 x i64> %1166, <2 x i64>* %1171, align 8, !tbaa !7, !alias.scope !198, !noalias !195
  br label %1172

; <label>:1172:                                   ; preds = %1157, %1159
  br i1 %238, label %1228, label %1173

; <label>:1173:                                   ; preds = %1172, %1117, %1102
  %1174 = phi i64 [ 0, %1117 ], [ 0, %1102 ], [ %233, %1172 ]
  %1175 = xor i64 %1174, -1
  %1176 = add nsw i64 %1175, %91
  br i1 %240, label %1190, label %1177

; <label>:1177:                                   ; preds = %1173, %1177
  %1178 = phi i64 [ %1187, %1177 ], [ %1174, %1173 ]
  %1179 = phi i64 [ %1188, %1177 ], [ %239, %1173 ]
  %1180 = add nsw i64 %1178, %1115
  %1181 = getelementptr inbounds double, double* %61, i64 %1180
  %1182 = bitcast double* %1181 to i64*
  %1183 = load i64, i64* %1182, align 8, !tbaa !7
  %1184 = add nsw i64 %1178, %1116
  %1185 = getelementptr inbounds double, double* %42, i64 %1184
  %1186 = bitcast double* %1185 to i64*
  store i64 %1183, i64* %1186, align 8, !tbaa !7
  %1187 = add nuw nsw i64 %1178, 1
  %1188 = add i64 %1179, -1
  %1189 = icmp eq i64 %1188, 0
  br i1 %1189, label %1190, label %1177, !llvm.loop !201

; <label>:1190:                                   ; preds = %1177, %1173
  %1191 = phi i64 [ %1174, %1173 ], [ %1187, %1177 ]
  %1192 = icmp ult i64 %1176, 3
  br i1 %1192, label %1228, label %1193

; <label>:1193:                                   ; preds = %1190, %1193
  %1194 = phi i64 [ %1226, %1193 ], [ %1191, %1190 ]
  %1195 = add nsw i64 %1194, %1115
  %1196 = getelementptr inbounds double, double* %61, i64 %1195
  %1197 = bitcast double* %1196 to i64*
  %1198 = load i64, i64* %1197, align 8, !tbaa !7
  %1199 = add nsw i64 %1194, %1116
  %1200 = getelementptr inbounds double, double* %42, i64 %1199
  %1201 = bitcast double* %1200 to i64*
  store i64 %1198, i64* %1201, align 8, !tbaa !7
  %1202 = add nuw nsw i64 %1194, 1
  %1203 = add nsw i64 %1202, %1115
  %1204 = getelementptr inbounds double, double* %61, i64 %1203
  %1205 = bitcast double* %1204 to i64*
  %1206 = load i64, i64* %1205, align 8, !tbaa !7
  %1207 = add nsw i64 %1202, %1116
  %1208 = getelementptr inbounds double, double* %42, i64 %1207
  %1209 = bitcast double* %1208 to i64*
  store i64 %1206, i64* %1209, align 8, !tbaa !7
  %1210 = add nsw i64 %1194, 2
  %1211 = add nsw i64 %1210, %1115
  %1212 = getelementptr inbounds double, double* %61, i64 %1211
  %1213 = bitcast double* %1212 to i64*
  %1214 = load i64, i64* %1213, align 8, !tbaa !7
  %1215 = add nsw i64 %1210, %1116
  %1216 = getelementptr inbounds double, double* %42, i64 %1215
  %1217 = bitcast double* %1216 to i64*
  store i64 %1214, i64* %1217, align 8, !tbaa !7
  %1218 = add nsw i64 %1194, 3
  %1219 = add nsw i64 %1218, %1115
  %1220 = getelementptr inbounds double, double* %61, i64 %1219
  %1221 = bitcast double* %1220 to i64*
  %1222 = load i64, i64* %1221, align 8, !tbaa !7
  %1223 = add nsw i64 %1218, %1116
  %1224 = getelementptr inbounds double, double* %42, i64 %1223
  %1225 = bitcast double* %1224 to i64*
  store i64 %1222, i64* %1225, align 8, !tbaa !7
  %1226 = add nsw i64 %1194, 4
  %1227 = icmp eq i64 %1226, %91
  br i1 %1227, label %1228, label %1193, !llvm.loop !202

; <label>:1228:                                   ; preds = %1190, %1193, %1172
  %1229 = add nuw nsw i64 %1104, 1
  %1230 = add nuw nsw i32 %1105, 1
  %1231 = icmp eq i64 %1229, %101
  %1232 = add i32 %1103, 1
  br i1 %1231, label %1264, label %1102

; <label>:1233:                                   ; preds = %827, %1233
  %1234 = phi i64 [ %1262, %1233 ], [ %828, %827 ]
  %1235 = getelementptr inbounds double, double* %61, i64 %1234
  %1236 = bitcast double* %1235 to i64*
  %1237 = load i64, i64* %1236, align 8, !tbaa !7
  %1238 = add nsw i64 %1234, %93
  %1239 = getelementptr inbounds double, double* %42, i64 %1238
  %1240 = bitcast double* %1239 to i64*
  store i64 %1237, i64* %1240, align 8, !tbaa !7
  %1241 = add nuw nsw i64 %1234, 1
  %1242 = getelementptr inbounds double, double* %61, i64 %1241
  %1243 = bitcast double* %1242 to i64*
  %1244 = load i64, i64* %1243, align 8, !tbaa !7
  %1245 = add nsw i64 %1241, %93
  %1246 = getelementptr inbounds double, double* %42, i64 %1245
  %1247 = bitcast double* %1246 to i64*
  store i64 %1244, i64* %1247, align 8, !tbaa !7
  %1248 = add nsw i64 %1234, 2
  %1249 = getelementptr inbounds double, double* %61, i64 %1248
  %1250 = bitcast double* %1249 to i64*
  %1251 = load i64, i64* %1250, align 8, !tbaa !7
  %1252 = add nsw i64 %1248, %93
  %1253 = getelementptr inbounds double, double* %42, i64 %1252
  %1254 = bitcast double* %1253 to i64*
  store i64 %1251, i64* %1254, align 8, !tbaa !7
  %1255 = add nsw i64 %1234, 3
  %1256 = getelementptr inbounds double, double* %61, i64 %1255
  %1257 = bitcast double* %1256 to i64*
  %1258 = load i64, i64* %1257, align 8, !tbaa !7
  %1259 = add nsw i64 %1255, %93
  %1260 = getelementptr inbounds double, double* %42, i64 %1259
  %1261 = bitcast double* %1260 to i64*
  store i64 %1258, i64* %1261, align 8, !tbaa !7
  %1262 = add nsw i64 %1234, 4
  %1263 = icmp eq i64 %1262, %91
  br i1 %1263, label %1101, label %1233, !llvm.loop !203

; <label>:1264:                                   ; preds = %1228, %1101
  br i1 %83, label %1324, label %1265

; <label>:1265:                                   ; preds = %1264, %1292
  %1266 = phi i64 [ %1294, %1292 ], [ 0, %1264 ]
  %1267 = icmp eq i64 %1266, 0
  br i1 %1267, label %1272, label %1268

; <label>:1268:                                   ; preds = %1265
  %1269 = add nsw i64 %1266, -1
  %1270 = getelementptr inbounds double, double* %45, i64 %1269
  %1271 = load double, double* %1270, align 8, !tbaa !7
  br label %1272

; <label>:1272:                                   ; preds = %1268, %1265
  %1273 = phi double [ %1271, %1268 ], [ 1.000000e+00, %1265 ]
  br i1 %242, label %1274, label %1296

; <label>:1274:                                   ; preds = %1304, %1272
  %1275 = phi i64 [ undef, %1272 ], [ %1321, %1304 ]
  %1276 = phi i64 [ 0, %1272 ], [ %1321, %1304 ]
  br i1 %244, label %1292, label %1277

; <label>:1277:                                   ; preds = %1274
  %1278 = icmp eq i64 %1276, 0
  br i1 %1278, label %1283, label %1279

; <label>:1279:                                   ; preds = %1277
  %1280 = add nsw i64 %1276, -1
  %1281 = getelementptr inbounds double, double* %45, i64 %1280
  %1282 = load double, double* %1281, align 8, !tbaa !7
  br label %1283

; <label>:1283:                                   ; preds = %1279, %1277
  %1284 = phi double [ %1282, %1279 ], [ 1.000000e+00, %1277 ]
  %1285 = fmul double %1273, %1284
  %1286 = mul nsw i64 %1276, %48
  %1287 = add nsw i64 %1286, %1266
  %1288 = getelementptr inbounds double, double* %42, i64 %1287
  %1289 = load double, double* %1288, align 8, !tbaa !7
  %1290 = fadd double %1289, %1285
  store double %1290, double* %1288, align 8, !tbaa !7
  %1291 = add nuw nsw i64 %1276, 1
  br label %1292

; <label>:1292:                                   ; preds = %1274, %1283
  %1293 = phi i64 [ %1275, %1274 ], [ %1291, %1283 ]
  %1294 = add nuw nsw i64 %1266, 1
  %1295 = icmp eq i64 %1294, %1293
  br i1 %1295, label %1324, label %1265

; <label>:1296:                                   ; preds = %1272, %1304
  %1297 = phi i64 [ %1321, %1304 ], [ 0, %1272 ]
  %1298 = phi i64 [ %1322, %1304 ], [ %243, %1272 ]
  %1299 = icmp eq i64 %1297, 0
  br i1 %1299, label %1304, label %1300

; <label>:1300:                                   ; preds = %1296
  %1301 = add nsw i64 %1297, -1
  %1302 = getelementptr inbounds double, double* %45, i64 %1301
  %1303 = load double, double* %1302, align 8, !tbaa !7
  br label %1304

; <label>:1304:                                   ; preds = %1296, %1300
  %1305 = phi double [ %1303, %1300 ], [ 1.000000e+00, %1296 ]
  %1306 = fmul double %1273, %1305
  %1307 = mul nsw i64 %1297, %48
  %1308 = add nsw i64 %1307, %1266
  %1309 = getelementptr inbounds double, double* %42, i64 %1308
  %1310 = load double, double* %1309, align 8, !tbaa !7
  %1311 = fadd double %1310, %1306
  store double %1311, double* %1309, align 8, !tbaa !7
  %1312 = or i64 %1297, 1
  %1313 = getelementptr inbounds double, double* %45, i64 %1297
  %1314 = load double, double* %1313, align 8, !tbaa !7
  %1315 = fmul double %1273, %1314
  %1316 = mul nsw i64 %1312, %48
  %1317 = add nsw i64 %1316, %1266
  %1318 = getelementptr inbounds double, double* %42, i64 %1317
  %1319 = load double, double* %1318, align 8, !tbaa !7
  %1320 = fadd double %1319, %1315
  store double %1320, double* %1318, align 8, !tbaa !7
  %1321 = add nuw nsw i64 %1297, 2
  %1322 = add i64 %1298, -2
  %1323 = icmp eq i64 %1322, 0
  br i1 %1323, label %1274, label %1296

; <label>:1324:                                   ; preds = %1292, %587, %1264, %568, %468
  %1325 = getelementptr inbounds double, double* %38, i64 %305
  %1326 = load double, double* %1325, align 8, !tbaa !7
  %1327 = fcmp ord double %1326, 0.000000e+00
  br i1 %1327, label %1421, label %1328

; <label>:1328:                                   ; preds = %1324
  br i1 %80, label %1329, label %1842

; <label>:1329:                                   ; preds = %1328
  %1330 = or i1 %245, %248
  br i1 %1330, label %1331, label %1352

; <label>:1331:                                   ; preds = %1329, %1420
  %1332 = phi i64 [ 0, %1329 ], [ %249, %1420 ]
  %1333 = sub nsw i64 %91, %1332
  %1334 = xor i64 %1332, -1
  %1335 = add nsw i64 %1334, %91
  %1336 = and i64 %1333, 7
  %1337 = icmp eq i64 %1336, 0
  br i1 %1337, label %1349, label %1338

; <label>:1338:                                   ; preds = %1331, %1338
  %1339 = phi i64 [ %1346, %1338 ], [ %1332, %1331 ]
  %1340 = phi i64 [ %1347, %1338 ], [ %1336, %1331 ]
  %1341 = getelementptr inbounds double, double* %50, i64 %1339
  %1342 = bitcast double* %1341 to i64*
  %1343 = load i64, i64* %1342, align 8, !tbaa !7
  %1344 = getelementptr inbounds double, double* %39, i64 %1339
  %1345 = bitcast double* %1344 to i64*
  store i64 %1343, i64* %1345, align 8, !tbaa !7
  %1346 = add nuw nsw i64 %1339, 1
  %1347 = add i64 %1340, -1
  %1348 = icmp eq i64 %1347, 0
  br i1 %1348, label %1349, label %1338, !llvm.loop !204

; <label>:1349:                                   ; preds = %1338, %1331
  %1350 = phi i64 [ %1332, %1331 ], [ %1346, %1338 ]
  %1351 = icmp ult i64 %1335, 7
  br i1 %1351, label %1842, label %1935

; <label>:1352:                                   ; preds = %1329
  br i1 %251, label %1402, label %1353

; <label>:1353:                                   ; preds = %1352, %1353
  %1354 = phi i64 [ %1399, %1353 ], [ 0, %1352 ]
  %1355 = phi i64 [ %1400, %1353 ], [ %252, %1352 ]
  %1356 = getelementptr inbounds double, double* %50, i64 %1354
  %1357 = bitcast double* %1356 to <2 x i64>*
  %1358 = load <2 x i64>, <2 x i64>* %1357, align 8, !tbaa !7, !alias.scope !205
  %1359 = getelementptr inbounds double, double* %1356, i64 2
  %1360 = bitcast double* %1359 to <2 x i64>*
  %1361 = load <2 x i64>, <2 x i64>* %1360, align 8, !tbaa !7, !alias.scope !205
  %1362 = getelementptr inbounds double, double* %39, i64 %1354
  %1363 = bitcast double* %1362 to <2 x i64>*
  store <2 x i64> %1358, <2 x i64>* %1363, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1364 = getelementptr inbounds double, double* %1362, i64 2
  %1365 = bitcast double* %1364 to <2 x i64>*
  store <2 x i64> %1361, <2 x i64>* %1365, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1366 = or i64 %1354, 4
  %1367 = getelementptr inbounds double, double* %50, i64 %1366
  %1368 = bitcast double* %1367 to <2 x i64>*
  %1369 = load <2 x i64>, <2 x i64>* %1368, align 8, !tbaa !7, !alias.scope !205
  %1370 = getelementptr inbounds double, double* %1367, i64 2
  %1371 = bitcast double* %1370 to <2 x i64>*
  %1372 = load <2 x i64>, <2 x i64>* %1371, align 8, !tbaa !7, !alias.scope !205
  %1373 = getelementptr inbounds double, double* %39, i64 %1366
  %1374 = bitcast double* %1373 to <2 x i64>*
  store <2 x i64> %1369, <2 x i64>* %1374, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1375 = getelementptr inbounds double, double* %1373, i64 2
  %1376 = bitcast double* %1375 to <2 x i64>*
  store <2 x i64> %1372, <2 x i64>* %1376, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1377 = or i64 %1354, 8
  %1378 = getelementptr inbounds double, double* %50, i64 %1377
  %1379 = bitcast double* %1378 to <2 x i64>*
  %1380 = load <2 x i64>, <2 x i64>* %1379, align 8, !tbaa !7, !alias.scope !205
  %1381 = getelementptr inbounds double, double* %1378, i64 2
  %1382 = bitcast double* %1381 to <2 x i64>*
  %1383 = load <2 x i64>, <2 x i64>* %1382, align 8, !tbaa !7, !alias.scope !205
  %1384 = getelementptr inbounds double, double* %39, i64 %1377
  %1385 = bitcast double* %1384 to <2 x i64>*
  store <2 x i64> %1380, <2 x i64>* %1385, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1386 = getelementptr inbounds double, double* %1384, i64 2
  %1387 = bitcast double* %1386 to <2 x i64>*
  store <2 x i64> %1383, <2 x i64>* %1387, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1388 = or i64 %1354, 12
  %1389 = getelementptr inbounds double, double* %50, i64 %1388
  %1390 = bitcast double* %1389 to <2 x i64>*
  %1391 = load <2 x i64>, <2 x i64>* %1390, align 8, !tbaa !7, !alias.scope !205
  %1392 = getelementptr inbounds double, double* %1389, i64 2
  %1393 = bitcast double* %1392 to <2 x i64>*
  %1394 = load <2 x i64>, <2 x i64>* %1393, align 8, !tbaa !7, !alias.scope !205
  %1395 = getelementptr inbounds double, double* %39, i64 %1388
  %1396 = bitcast double* %1395 to <2 x i64>*
  store <2 x i64> %1391, <2 x i64>* %1396, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1397 = getelementptr inbounds double, double* %1395, i64 2
  %1398 = bitcast double* %1397 to <2 x i64>*
  store <2 x i64> %1394, <2 x i64>* %1398, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1399 = add i64 %1354, 16
  %1400 = add i64 %1355, -4
  %1401 = icmp eq i64 %1400, 0
  br i1 %1401, label %1402, label %1353, !llvm.loop !210

; <label>:1402:                                   ; preds = %1353, %1352
  %1403 = phi i64 [ 0, %1352 ], [ %1399, %1353 ]
  br i1 %253, label %1420, label %1404

; <label>:1404:                                   ; preds = %1402, %1404
  %1405 = phi i64 [ %1417, %1404 ], [ %1403, %1402 ]
  %1406 = phi i64 [ %1418, %1404 ], [ %250, %1402 ]
  %1407 = getelementptr inbounds double, double* %50, i64 %1405
  %1408 = bitcast double* %1407 to <2 x i64>*
  %1409 = load <2 x i64>, <2 x i64>* %1408, align 8, !tbaa !7, !alias.scope !205
  %1410 = getelementptr inbounds double, double* %1407, i64 2
  %1411 = bitcast double* %1410 to <2 x i64>*
  %1412 = load <2 x i64>, <2 x i64>* %1411, align 8, !tbaa !7, !alias.scope !205
  %1413 = getelementptr inbounds double, double* %39, i64 %1405
  %1414 = bitcast double* %1413 to <2 x i64>*
  store <2 x i64> %1409, <2 x i64>* %1414, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1415 = getelementptr inbounds double, double* %1413, i64 2
  %1416 = bitcast double* %1415 to <2 x i64>*
  store <2 x i64> %1412, <2 x i64>* %1416, align 8, !tbaa !7, !alias.scope !208, !noalias !205
  %1417 = add i64 %1405, 4
  %1418 = add i64 %1406, -1
  %1419 = icmp eq i64 %1418, 0
  br i1 %1419, label %1420, label %1404, !llvm.loop !211

; <label>:1420:                                   ; preds = %1404, %1402
  br i1 %254, label %1842, label %1331

; <label>:1421:                                   ; preds = %1324
  %1422 = load double, double* %50, align 8, !tbaa !7
  %1423 = fsub double %1326, %1422
  br i1 %53, label %1424, label %1439

; <label>:1424:                                   ; preds = %1421
  br i1 %266, label %1425, label %1591

; <label>:1425:                                   ; preds = %1591, %1424
  %1426 = phi double [ undef, %1424 ], [ %1613, %1591 ]
  %1427 = phi i64 [ 0, %1424 ], [ %1614, %1591 ]
  %1428 = phi i32 [ 0, %1424 ], [ %1615, %1591 ]
  %1429 = phi double [ %1423, %1424 ], [ %1613, %1591 ]
  br i1 %268, label %1439, label %1430

; <label>:1430:                                   ; preds = %1425
  %1431 = getelementptr inbounds double, double* %46, i64 %1427
  %1432 = load double, double* %1431, align 8, !tbaa !7
  %1433 = add nsw i32 %1428, %37
  %1434 = sext i32 %1433 to i64
  %1435 = getelementptr inbounds double, double* %50, i64 %1434
  %1436 = load double, double* %1435, align 8, !tbaa !7
  %1437 = fmul double %1432, %1436
  %1438 = fsub double %1429, %1437
  br label %1439

; <label>:1439:                                   ; preds = %1430, %1425, %1421
  %1440 = phi double [ %1423, %1421 ], [ %1426, %1425 ], [ %1438, %1430 ]
  br i1 %80, label %1441, label %1618

; <label>:1441:                                   ; preds = %1439
  br i1 %53, label %1534, label %1442

; <label>:1442:                                   ; preds = %1441
  %1443 = or i1 %269, %272
  br i1 %1443, label %1444, label %1465

; <label>:1444:                                   ; preds = %1442, %1533
  %1445 = phi i64 [ 0, %1442 ], [ %273, %1533 ]
  %1446 = sub nsw i64 %91, %1445
  %1447 = xor i64 %1445, -1
  %1448 = add nsw i64 %1447, %91
  %1449 = and i64 %1446, 7
  %1450 = icmp eq i64 %1449, 0
  br i1 %1450, label %1462, label %1451

; <label>:1451:                                   ; preds = %1444, %1451
  %1452 = phi i64 [ %1459, %1451 ], [ %1445, %1444 ]
  %1453 = phi i64 [ %1460, %1451 ], [ %1449, %1444 ]
  %1454 = getelementptr inbounds double, double* %42, i64 %1452
  %1455 = bitcast double* %1454 to i64*
  %1456 = load i64, i64* %1455, align 8, !tbaa !7
  %1457 = getelementptr inbounds double, double* %52, i64 %1452
  %1458 = bitcast double* %1457 to i64*
  store i64 %1456, i64* %1458, align 8, !tbaa !7
  %1459 = add nuw nsw i64 %1452, 1
  %1460 = add i64 %1453, -1
  %1461 = icmp eq i64 %1460, 0
  br i1 %1461, label %1462, label %1451, !llvm.loop !212

; <label>:1462:                                   ; preds = %1451, %1444
  %1463 = phi i64 [ %1445, %1444 ], [ %1459, %1451 ]
  %1464 = icmp ult i64 %1448, 7
  br i1 %1464, label %1618, label %1621

; <label>:1465:                                   ; preds = %1442
  br i1 %275, label %1515, label %1466

; <label>:1466:                                   ; preds = %1465, %1466
  %1467 = phi i64 [ %1512, %1466 ], [ 0, %1465 ]
  %1468 = phi i64 [ %1513, %1466 ], [ %276, %1465 ]
  %1469 = getelementptr inbounds double, double* %42, i64 %1467
  %1470 = bitcast double* %1469 to <2 x i64>*
  %1471 = load <2 x i64>, <2 x i64>* %1470, align 8, !tbaa !7, !alias.scope !213
  %1472 = getelementptr inbounds double, double* %1469, i64 2
  %1473 = bitcast double* %1472 to <2 x i64>*
  %1474 = load <2 x i64>, <2 x i64>* %1473, align 8, !tbaa !7, !alias.scope !213
  %1475 = getelementptr inbounds double, double* %52, i64 %1467
  %1476 = bitcast double* %1475 to <2 x i64>*
  store <2 x i64> %1471, <2 x i64>* %1476, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1477 = getelementptr inbounds double, double* %1475, i64 2
  %1478 = bitcast double* %1477 to <2 x i64>*
  store <2 x i64> %1474, <2 x i64>* %1478, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1479 = or i64 %1467, 4
  %1480 = getelementptr inbounds double, double* %42, i64 %1479
  %1481 = bitcast double* %1480 to <2 x i64>*
  %1482 = load <2 x i64>, <2 x i64>* %1481, align 8, !tbaa !7, !alias.scope !213
  %1483 = getelementptr inbounds double, double* %1480, i64 2
  %1484 = bitcast double* %1483 to <2 x i64>*
  %1485 = load <2 x i64>, <2 x i64>* %1484, align 8, !tbaa !7, !alias.scope !213
  %1486 = getelementptr inbounds double, double* %52, i64 %1479
  %1487 = bitcast double* %1486 to <2 x i64>*
  store <2 x i64> %1482, <2 x i64>* %1487, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1488 = getelementptr inbounds double, double* %1486, i64 2
  %1489 = bitcast double* %1488 to <2 x i64>*
  store <2 x i64> %1485, <2 x i64>* %1489, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1490 = or i64 %1467, 8
  %1491 = getelementptr inbounds double, double* %42, i64 %1490
  %1492 = bitcast double* %1491 to <2 x i64>*
  %1493 = load <2 x i64>, <2 x i64>* %1492, align 8, !tbaa !7, !alias.scope !213
  %1494 = getelementptr inbounds double, double* %1491, i64 2
  %1495 = bitcast double* %1494 to <2 x i64>*
  %1496 = load <2 x i64>, <2 x i64>* %1495, align 8, !tbaa !7, !alias.scope !213
  %1497 = getelementptr inbounds double, double* %52, i64 %1490
  %1498 = bitcast double* %1497 to <2 x i64>*
  store <2 x i64> %1493, <2 x i64>* %1498, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1499 = getelementptr inbounds double, double* %1497, i64 2
  %1500 = bitcast double* %1499 to <2 x i64>*
  store <2 x i64> %1496, <2 x i64>* %1500, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1501 = or i64 %1467, 12
  %1502 = getelementptr inbounds double, double* %42, i64 %1501
  %1503 = bitcast double* %1502 to <2 x i64>*
  %1504 = load <2 x i64>, <2 x i64>* %1503, align 8, !tbaa !7, !alias.scope !213
  %1505 = getelementptr inbounds double, double* %1502, i64 2
  %1506 = bitcast double* %1505 to <2 x i64>*
  %1507 = load <2 x i64>, <2 x i64>* %1506, align 8, !tbaa !7, !alias.scope !213
  %1508 = getelementptr inbounds double, double* %52, i64 %1501
  %1509 = bitcast double* %1508 to <2 x i64>*
  store <2 x i64> %1504, <2 x i64>* %1509, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1510 = getelementptr inbounds double, double* %1508, i64 2
  %1511 = bitcast double* %1510 to <2 x i64>*
  store <2 x i64> %1507, <2 x i64>* %1511, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1512 = add i64 %1467, 16
  %1513 = add i64 %1468, -4
  %1514 = icmp eq i64 %1513, 0
  br i1 %1514, label %1515, label %1466, !llvm.loop !218

; <label>:1515:                                   ; preds = %1466, %1465
  %1516 = phi i64 [ 0, %1465 ], [ %1512, %1466 ]
  br i1 %277, label %1533, label %1517

; <label>:1517:                                   ; preds = %1515, %1517
  %1518 = phi i64 [ %1530, %1517 ], [ %1516, %1515 ]
  %1519 = phi i64 [ %1531, %1517 ], [ %274, %1515 ]
  %1520 = getelementptr inbounds double, double* %42, i64 %1518
  %1521 = bitcast double* %1520 to <2 x i64>*
  %1522 = load <2 x i64>, <2 x i64>* %1521, align 8, !tbaa !7, !alias.scope !213
  %1523 = getelementptr inbounds double, double* %1520, i64 2
  %1524 = bitcast double* %1523 to <2 x i64>*
  %1525 = load <2 x i64>, <2 x i64>* %1524, align 8, !tbaa !7, !alias.scope !213
  %1526 = getelementptr inbounds double, double* %52, i64 %1518
  %1527 = bitcast double* %1526 to <2 x i64>*
  store <2 x i64> %1522, <2 x i64>* %1527, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1528 = getelementptr inbounds double, double* %1526, i64 2
  %1529 = bitcast double* %1528 to <2 x i64>*
  store <2 x i64> %1525, <2 x i64>* %1529, align 8, !tbaa !7, !alias.scope !216, !noalias !213
  %1530 = add i64 %1518, 4
  %1531 = add i64 %1519, -1
  %1532 = icmp eq i64 %1531, 0
  br i1 %1532, label %1533, label %1517, !llvm.loop !219

; <label>:1533:                                   ; preds = %1517, %1515
  br i1 %278, label %1618, label %1444

; <label>:1534:                                   ; preds = %1441, %1586
  %1535 = phi i64 [ %1589, %1586 ], [ 0, %1441 ]
  %1536 = getelementptr inbounds double, double* %42, i64 %1535
  %1537 = load double, double* %1536, align 8, !tbaa !7
  %1538 = trunc i64 %1535 to i32
  br i1 %280, label %1570, label %1539

; <label>:1539:                                   ; preds = %1534, %1539
  %1540 = phi i64 [ %1566, %1539 ], [ 0, %1534 ]
  %1541 = phi i32 [ %1567, %1539 ], [ 0, %1534 ]
  %1542 = phi double [ %1565, %1539 ], [ %1537, %1534 ]
  %1543 = phi i64 [ %1568, %1539 ], [ %281, %1534 ]
  %1544 = add nsw i32 %1541, %37
  %1545 = mul nsw i32 %1544, %33
  %1546 = add nsw i32 %1545, %1538
  %1547 = sext i32 %1546 to i64
  %1548 = getelementptr inbounds double, double* %42, i64 %1547
  %1549 = load double, double* %1548, align 8, !tbaa !7
  %1550 = getelementptr inbounds double, double* %46, i64 %1540
  %1551 = load double, double* %1550, align 8, !tbaa !7
  %1552 = fmul double %1549, %1551
  %1553 = fadd double %1542, %1552
  %1554 = or i64 %1540, 1
  %1555 = or i32 %1541, 1
  %1556 = add nsw i32 %1555, %37
  %1557 = mul nsw i32 %1556, %33
  %1558 = add nsw i32 %1557, %1538
  %1559 = sext i32 %1558 to i64
  %1560 = getelementptr inbounds double, double* %42, i64 %1559
  %1561 = load double, double* %1560, align 8, !tbaa !7
  %1562 = getelementptr inbounds double, double* %46, i64 %1554
  %1563 = load double, double* %1562, align 8, !tbaa !7
  %1564 = fmul double %1561, %1563
  %1565 = fadd double %1553, %1564
  %1566 = add nuw nsw i64 %1540, 2
  %1567 = add nuw nsw i32 %1541, 2
  %1568 = add i64 %1543, -2
  %1569 = icmp eq i64 %1568, 0
  br i1 %1569, label %1570, label %1539

; <label>:1570:                                   ; preds = %1539, %1534
  %1571 = phi double [ undef, %1534 ], [ %1565, %1539 ]
  %1572 = phi i64 [ 0, %1534 ], [ %1566, %1539 ]
  %1573 = phi i32 [ 0, %1534 ], [ %1567, %1539 ]
  %1574 = phi double [ %1537, %1534 ], [ %1565, %1539 ]
  br i1 %282, label %1586, label %1575

; <label>:1575:                                   ; preds = %1570
  %1576 = add nsw i32 %1573, %37
  %1577 = mul nsw i32 %1576, %33
  %1578 = add nsw i32 %1577, %1538
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds double, double* %42, i64 %1579
  %1581 = load double, double* %1580, align 8, !tbaa !7
  %1582 = getelementptr inbounds double, double* %46, i64 %1572
  %1583 = load double, double* %1582, align 8, !tbaa !7
  %1584 = fmul double %1581, %1583
  %1585 = fadd double %1574, %1584
  br label %1586

; <label>:1586:                                   ; preds = %1570, %1575
  %1587 = phi double [ %1571, %1570 ], [ %1585, %1575 ]
  %1588 = getelementptr inbounds double, double* %52, i64 %1535
  store double %1587, double* %1588, align 8, !tbaa !7
  %1589 = add nuw nsw i64 %1535, 1
  %1590 = icmp eq i64 %1589, %91
  br i1 %1590, label %1618, label %1534

; <label>:1591:                                   ; preds = %1424, %1591
  %1592 = phi i64 [ %1614, %1591 ], [ 0, %1424 ]
  %1593 = phi i32 [ %1615, %1591 ], [ 0, %1424 ]
  %1594 = phi double [ %1613, %1591 ], [ %1423, %1424 ]
  %1595 = phi i64 [ %1616, %1591 ], [ %267, %1424 ]
  %1596 = getelementptr inbounds double, double* %46, i64 %1592
  %1597 = load double, double* %1596, align 8, !tbaa !7
  %1598 = add nsw i32 %1593, %37
  %1599 = sext i32 %1598 to i64
  %1600 = getelementptr inbounds double, double* %50, i64 %1599
  %1601 = load double, double* %1600, align 8, !tbaa !7
  %1602 = fmul double %1597, %1601
  %1603 = fsub double %1594, %1602
  %1604 = or i64 %1592, 1
  %1605 = or i32 %1593, 1
  %1606 = getelementptr inbounds double, double* %46, i64 %1604
  %1607 = load double, double* %1606, align 8, !tbaa !7
  %1608 = add nsw i32 %1605, %37
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds double, double* %50, i64 %1609
  %1611 = load double, double* %1610, align 8, !tbaa !7
  %1612 = fmul double %1607, %1611
  %1613 = fsub double %1603, %1612
  %1614 = add nuw nsw i64 %1592, 2
  %1615 = add nuw nsw i32 %1593, 2
  %1616 = add i64 %1595, -2
  %1617 = icmp eq i64 %1616, 0
  br i1 %1617, label %1425, label %1591

; <label>:1618:                                   ; preds = %1462, %1621, %1586, %1533, %1439
  %1619 = load double, double* %52, align 8, !tbaa !7
  br i1 %53, label %1620, label %1686

; <label>:1620:                                   ; preds = %1618
  br i1 %284, label %1672, label %1689

; <label>:1621:                                   ; preds = %1462, %1621
  %1622 = phi i64 [ %1670, %1621 ], [ %1463, %1462 ]
  %1623 = getelementptr inbounds double, double* %42, i64 %1622
  %1624 = bitcast double* %1623 to i64*
  %1625 = load i64, i64* %1624, align 8, !tbaa !7
  %1626 = getelementptr inbounds double, double* %52, i64 %1622
  %1627 = bitcast double* %1626 to i64*
  store i64 %1625, i64* %1627, align 8, !tbaa !7
  %1628 = add nuw nsw i64 %1622, 1
  %1629 = getelementptr inbounds double, double* %42, i64 %1628
  %1630 = bitcast double* %1629 to i64*
  %1631 = load i64, i64* %1630, align 8, !tbaa !7
  %1632 = getelementptr inbounds double, double* %52, i64 %1628
  %1633 = bitcast double* %1632 to i64*
  store i64 %1631, i64* %1633, align 8, !tbaa !7
  %1634 = add nsw i64 %1622, 2
  %1635 = getelementptr inbounds double, double* %42, i64 %1634
  %1636 = bitcast double* %1635 to i64*
  %1637 = load i64, i64* %1636, align 8, !tbaa !7
  %1638 = getelementptr inbounds double, double* %52, i64 %1634
  %1639 = bitcast double* %1638 to i64*
  store i64 %1637, i64* %1639, align 8, !tbaa !7
  %1640 = add nsw i64 %1622, 3
  %1641 = getelementptr inbounds double, double* %42, i64 %1640
  %1642 = bitcast double* %1641 to i64*
  %1643 = load i64, i64* %1642, align 8, !tbaa !7
  %1644 = getelementptr inbounds double, double* %52, i64 %1640
  %1645 = bitcast double* %1644 to i64*
  store i64 %1643, i64* %1645, align 8, !tbaa !7
  %1646 = add nsw i64 %1622, 4
  %1647 = getelementptr inbounds double, double* %42, i64 %1646
  %1648 = bitcast double* %1647 to i64*
  %1649 = load i64, i64* %1648, align 8, !tbaa !7
  %1650 = getelementptr inbounds double, double* %52, i64 %1646
  %1651 = bitcast double* %1650 to i64*
  store i64 %1649, i64* %1651, align 8, !tbaa !7
  %1652 = add nsw i64 %1622, 5
  %1653 = getelementptr inbounds double, double* %42, i64 %1652
  %1654 = bitcast double* %1653 to i64*
  %1655 = load i64, i64* %1654, align 8, !tbaa !7
  %1656 = getelementptr inbounds double, double* %52, i64 %1652
  %1657 = bitcast double* %1656 to i64*
  store i64 %1655, i64* %1657, align 8, !tbaa !7
  %1658 = add nsw i64 %1622, 6
  %1659 = getelementptr inbounds double, double* %42, i64 %1658
  %1660 = bitcast double* %1659 to i64*
  %1661 = load i64, i64* %1660, align 8, !tbaa !7
  %1662 = getelementptr inbounds double, double* %52, i64 %1658
  %1663 = bitcast double* %1662 to i64*
  store i64 %1661, i64* %1663, align 8, !tbaa !7
  %1664 = add nsw i64 %1622, 7
  %1665 = getelementptr inbounds double, double* %42, i64 %1664
  %1666 = bitcast double* %1665 to i64*
  %1667 = load i64, i64* %1666, align 8, !tbaa !7
  %1668 = getelementptr inbounds double, double* %52, i64 %1664
  %1669 = bitcast double* %1668 to i64*
  store i64 %1667, i64* %1669, align 8, !tbaa !7
  %1670 = add nsw i64 %1622, 8
  %1671 = icmp eq i64 %1670, %91
  br i1 %1671, label %1618, label %1621, !llvm.loop !220

; <label>:1672:                                   ; preds = %1689, %1620
  %1673 = phi double [ undef, %1620 ], [ %1711, %1689 ]
  %1674 = phi i64 [ 0, %1620 ], [ %1712, %1689 ]
  %1675 = phi i32 [ 0, %1620 ], [ %1713, %1689 ]
  %1676 = phi double [ %1619, %1620 ], [ %1711, %1689 ]
  br i1 %286, label %1686, label %1677

; <label>:1677:                                   ; preds = %1672
  %1678 = getelementptr inbounds double, double* %46, i64 %1674
  %1679 = load double, double* %1678, align 8, !tbaa !7
  %1680 = add nsw i32 %1675, %37
  %1681 = sext i32 %1680 to i64
  %1682 = getelementptr inbounds double, double* %52, i64 %1681
  %1683 = load double, double* %1682, align 8, !tbaa !7
  %1684 = fmul double %1679, %1683
  %1685 = fadd double %1676, %1684
  br label %1686

; <label>:1686:                                   ; preds = %1677, %1672, %1618
  %1687 = phi double [ %1619, %1618 ], [ %1673, %1672 ], [ %1685, %1677 ]
  %1688 = fcmp olt double %1687, 1.000000e+04
  br i1 %1688, label %1716, label %1723

; <label>:1689:                                   ; preds = %1620, %1689
  %1690 = phi i64 [ %1712, %1689 ], [ 0, %1620 ]
  %1691 = phi i32 [ %1713, %1689 ], [ 0, %1620 ]
  %1692 = phi double [ %1711, %1689 ], [ %1619, %1620 ]
  %1693 = phi i64 [ %1714, %1689 ], [ %285, %1620 ]
  %1694 = getelementptr inbounds double, double* %46, i64 %1690
  %1695 = load double, double* %1694, align 8, !tbaa !7
  %1696 = add nsw i32 %1691, %37
  %1697 = sext i32 %1696 to i64
  %1698 = getelementptr inbounds double, double* %52, i64 %1697
  %1699 = load double, double* %1698, align 8, !tbaa !7
  %1700 = fmul double %1695, %1699
  %1701 = fadd double %1692, %1700
  %1702 = or i64 %1690, 1
  %1703 = or i32 %1691, 1
  %1704 = getelementptr inbounds double, double* %46, i64 %1702
  %1705 = load double, double* %1704, align 8, !tbaa !7
  %1706 = add nsw i32 %1703, %37
  %1707 = sext i32 %1706 to i64
  %1708 = getelementptr inbounds double, double* %52, i64 %1707
  %1709 = load double, double* %1708, align 8, !tbaa !7
  %1710 = fmul double %1705, %1709
  %1711 = fadd double %1701, %1710
  %1712 = add nuw nsw i64 %1690, 2
  %1713 = add nuw nsw i32 %1691, 2
  %1714 = add i64 %1693, -2
  %1715 = icmp eq i64 %1714, 0
  br i1 %1715, label %1672, label %1689

; <label>:1716:                                   ; preds = %1686
  %1717 = add nsw i32 %306, 1
  %1718 = fmul double %1440, %1440
  %1719 = fdiv double %1718, %1687
  %1720 = fadd double %308, %1719
  %1721 = tail call double @llvm.log.f64(double %1687)
  %1722 = fadd double %307, %1721
  br label %1723

; <label>:1723:                                   ; preds = %1716, %1686
  %1724 = phi double [ %1720, %1716 ], [ %308, %1686 ]
  %1725 = phi double [ %1722, %1716 ], [ %307, %1686 ]
  %1726 = phi i32 [ %1717, %1716 ], [ %306, %1686 ]
  br i1 %62, label %1727, label %1731

; <label>:1727:                                   ; preds = %1723
  %1728 = tail call double @llvm.sqrt.f64(double %1687)
  %1729 = fdiv double %1440, %1728
  %1730 = getelementptr inbounds double, double* %70, i64 %305
  store double %1729, double* %1730, align 8, !tbaa !7
  br label %1731

; <label>:1731:                                   ; preds = %1727, %1723
  br i1 %80, label %1732, label %2042

; <label>:1732:                                   ; preds = %1731
  %1733 = or i1 %287, %294
  br i1 %1733, label %1734, label %1750

; <label>:1734:                                   ; preds = %1732, %1798
  %1735 = phi i64 [ 0, %1732 ], [ %295, %1798 ]
  %1736 = xor i64 %1735, -1
  br i1 %302, label %1747, label %1737

; <label>:1737:                                   ; preds = %1734
  %1738 = getelementptr inbounds double, double* %50, i64 %1735
  %1739 = load double, double* %1738, align 8, !tbaa !7
  %1740 = getelementptr inbounds double, double* %52, i64 %1735
  %1741 = load double, double* %1740, align 8, !tbaa !7
  %1742 = fmul double %1440, %1741
  %1743 = fdiv double %1742, %1687
  %1744 = fadd double %1739, %1743
  %1745 = getelementptr inbounds double, double* %39, i64 %1735
  store double %1744, double* %1745, align 8, !tbaa !7
  %1746 = or i64 %1735, 1
  br label %1747

; <label>:1747:                                   ; preds = %1737, %1734
  %1748 = phi i64 [ %1746, %1737 ], [ %1735, %1734 ]
  %1749 = icmp eq i64 %1736, %303
  br i1 %1749, label %1799, label %1821

; <label>:1750:                                   ; preds = %1732
  %1751 = insertelement <2 x double> undef, double %1440, i32 0
  %1752 = shufflevector <2 x double> %1751, <2 x double> undef, <2 x i32> zeroinitializer
  %1753 = insertelement <2 x double> undef, double %1687, i32 0
  %1754 = shufflevector <2 x double> %1753, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %297, label %1784, label %1755

; <label>:1755:                                   ; preds = %1750, %1755
  %1756 = phi i64 [ %1781, %1755 ], [ 0, %1750 ]
  %1757 = phi i64 [ %1782, %1755 ], [ %298, %1750 ]
  %1758 = getelementptr inbounds double, double* %50, i64 %1756
  %1759 = bitcast double* %1758 to <2 x double>*
  %1760 = load <2 x double>, <2 x double>* %1759, align 8, !tbaa !7, !alias.scope !221
  %1761 = getelementptr inbounds double, double* %52, i64 %1756
  %1762 = bitcast double* %1761 to <2 x double>*
  %1763 = load <2 x double>, <2 x double>* %1762, align 8, !tbaa !7, !alias.scope !224
  %1764 = fmul <2 x double> %1752, %1763
  %1765 = fdiv <2 x double> %1764, %1754
  %1766 = fadd <2 x double> %1760, %1765
  %1767 = getelementptr inbounds double, double* %39, i64 %1756
  %1768 = bitcast double* %1767 to <2 x double>*
  store <2 x double> %1766, <2 x double>* %1768, align 8, !tbaa !7, !alias.scope !226, !noalias !228
  %1769 = or i64 %1756, 2
  %1770 = getelementptr inbounds double, double* %50, i64 %1769
  %1771 = bitcast double* %1770 to <2 x double>*
  %1772 = load <2 x double>, <2 x double>* %1771, align 8, !tbaa !7, !alias.scope !221
  %1773 = getelementptr inbounds double, double* %52, i64 %1769
  %1774 = bitcast double* %1773 to <2 x double>*
  %1775 = load <2 x double>, <2 x double>* %1774, align 8, !tbaa !7, !alias.scope !224
  %1776 = fmul <2 x double> %1752, %1775
  %1777 = fdiv <2 x double> %1776, %1754
  %1778 = fadd <2 x double> %1772, %1777
  %1779 = getelementptr inbounds double, double* %39, i64 %1769
  %1780 = bitcast double* %1779 to <2 x double>*
  store <2 x double> %1778, <2 x double>* %1780, align 8, !tbaa !7, !alias.scope !226, !noalias !228
  %1781 = add i64 %1756, 4
  %1782 = add i64 %1757, -2
  %1783 = icmp eq i64 %1782, 0
  br i1 %1783, label %1784, label %1755, !llvm.loop !229

; <label>:1784:                                   ; preds = %1755, %1750
  %1785 = phi i64 [ 0, %1750 ], [ %1781, %1755 ]
  br i1 %299, label %1798, label %1786

; <label>:1786:                                   ; preds = %1784
  %1787 = getelementptr inbounds double, double* %50, i64 %1785
  %1788 = bitcast double* %1787 to <2 x double>*
  %1789 = load <2 x double>, <2 x double>* %1788, align 8, !tbaa !7, !alias.scope !221
  %1790 = getelementptr inbounds double, double* %52, i64 %1785
  %1791 = bitcast double* %1790 to <2 x double>*
  %1792 = load <2 x double>, <2 x double>* %1791, align 8, !tbaa !7, !alias.scope !224
  %1793 = fmul <2 x double> %1752, %1792
  %1794 = fdiv <2 x double> %1793, %1754
  %1795 = fadd <2 x double> %1789, %1794
  %1796 = getelementptr inbounds double, double* %39, i64 %1785
  %1797 = bitcast double* %1796 to <2 x double>*
  store <2 x double> %1795, <2 x double>* %1797, align 8, !tbaa !7, !alias.scope !226, !noalias !228
  br label %1798

; <label>:1798:                                   ; preds = %1784, %1786
  br i1 %300, label %1799, label %1734

; <label>:1799:                                   ; preds = %1747, %1821, %1798
  br i1 %80, label %1800, label %2042

; <label>:1800:                                   ; preds = %1799, %1818
  %1801 = phi i64 [ %1819, %1818 ], [ 0, %1799 ]
  %1802 = getelementptr inbounds double, double* %52, i64 %1801
  br label %1803

; <label>:1803:                                   ; preds = %1803, %1800
  %1804 = phi i64 [ 0, %1800 ], [ %1816, %1803 ]
  %1805 = mul nsw i64 %1804, %48
  %1806 = add nsw i64 %1805, %1801
  %1807 = getelementptr inbounds double, double* %42, i64 %1806
  %1808 = load double, double* %1807, align 8, !tbaa !7
  %1809 = load double, double* %1802, align 8, !tbaa !7
  %1810 = getelementptr inbounds double, double* %52, i64 %1804
  %1811 = load double, double* %1810, align 8, !tbaa !7
  %1812 = fmul double %1809, %1811
  %1813 = fdiv double %1812, %1687
  %1814 = fsub double %1808, %1813
  %1815 = getelementptr inbounds double, double* %41, i64 %1806
  store double %1814, double* %1815, align 8, !tbaa !7
  %1816 = add nuw nsw i64 %1804, 1
  %1817 = icmp eq i64 %1816, %91
  br i1 %1817, label %1818, label %1803

; <label>:1818:                                   ; preds = %1803
  %1819 = add nuw nsw i64 %1801, 1
  %1820 = icmp eq i64 %1819, %91
  br i1 %1820, label %2042, label %1800

; <label>:1821:                                   ; preds = %1747, %1821
  %1822 = phi i64 [ %1840, %1821 ], [ %1748, %1747 ]
  %1823 = getelementptr inbounds double, double* %50, i64 %1822
  %1824 = load double, double* %1823, align 8, !tbaa !7
  %1825 = getelementptr inbounds double, double* %52, i64 %1822
  %1826 = load double, double* %1825, align 8, !tbaa !7
  %1827 = fmul double %1440, %1826
  %1828 = fdiv double %1827, %1687
  %1829 = fadd double %1824, %1828
  %1830 = getelementptr inbounds double, double* %39, i64 %1822
  store double %1829, double* %1830, align 8, !tbaa !7
  %1831 = add nuw nsw i64 %1822, 1
  %1832 = getelementptr inbounds double, double* %50, i64 %1831
  %1833 = load double, double* %1832, align 8, !tbaa !7
  %1834 = getelementptr inbounds double, double* %52, i64 %1831
  %1835 = load double, double* %1834, align 8, !tbaa !7
  %1836 = fmul double %1440, %1835
  %1837 = fdiv double %1836, %1687
  %1838 = fadd double %1833, %1837
  %1839 = getelementptr inbounds double, double* %39, i64 %1831
  store double %1838, double* %1839, align 8, !tbaa !7
  %1840 = add nsw i64 %1822, 2
  %1841 = icmp eq i64 %1840, %91
  br i1 %1841, label %1799, label %1821, !llvm.loop !230

; <label>:1842:                                   ; preds = %1349, %1935, %1420, %1328
  br i1 %85, label %1986, label %1843

; <label>:1843:                                   ; preds = %1842
  %1844 = or i1 %255, %258
  br i1 %1844, label %1845, label %1866

; <label>:1845:                                   ; preds = %1843, %1934
  %1846 = phi i64 [ 0, %1843 ], [ %259, %1934 ]
  %1847 = sub nsw i64 %105, %1846
  %1848 = xor i64 %1846, -1
  %1849 = add nsw i64 %1848, %105
  %1850 = and i64 %1847, 7
  %1851 = icmp eq i64 %1850, 0
  br i1 %1851, label %1863, label %1852

; <label>:1852:                                   ; preds = %1845, %1852
  %1853 = phi i64 [ %1860, %1852 ], [ %1846, %1845 ]
  %1854 = phi i64 [ %1861, %1852 ], [ %1850, %1845 ]
  %1855 = getelementptr inbounds double, double* %42, i64 %1853
  %1856 = bitcast double* %1855 to i64*
  %1857 = load i64, i64* %1856, align 8, !tbaa !7
  %1858 = getelementptr inbounds double, double* %41, i64 %1853
  %1859 = bitcast double* %1858 to i64*
  store i64 %1857, i64* %1859, align 8, !tbaa !7
  %1860 = add nuw nsw i64 %1853, 1
  %1861 = add i64 %1854, -1
  %1862 = icmp eq i64 %1861, 0
  br i1 %1862, label %1863, label %1852, !llvm.loop !231

; <label>:1863:                                   ; preds = %1852, %1845
  %1864 = phi i64 [ %1846, %1845 ], [ %1860, %1852 ]
  %1865 = icmp ult i64 %1849, 7
  br i1 %1865, label %1986, label %1987

; <label>:1866:                                   ; preds = %1843
  br i1 %261, label %1916, label %1867

; <label>:1867:                                   ; preds = %1866, %1867
  %1868 = phi i64 [ %1913, %1867 ], [ 0, %1866 ]
  %1869 = phi i64 [ %1914, %1867 ], [ %262, %1866 ]
  %1870 = getelementptr inbounds double, double* %42, i64 %1868
  %1871 = bitcast double* %1870 to <2 x i64>*
  %1872 = load <2 x i64>, <2 x i64>* %1871, align 8, !tbaa !7, !alias.scope !232
  %1873 = getelementptr inbounds double, double* %1870, i64 2
  %1874 = bitcast double* %1873 to <2 x i64>*
  %1875 = load <2 x i64>, <2 x i64>* %1874, align 8, !tbaa !7, !alias.scope !232
  %1876 = getelementptr inbounds double, double* %41, i64 %1868
  %1877 = bitcast double* %1876 to <2 x i64>*
  store <2 x i64> %1872, <2 x i64>* %1877, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1878 = getelementptr inbounds double, double* %1876, i64 2
  %1879 = bitcast double* %1878 to <2 x i64>*
  store <2 x i64> %1875, <2 x i64>* %1879, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1880 = or i64 %1868, 4
  %1881 = getelementptr inbounds double, double* %42, i64 %1880
  %1882 = bitcast double* %1881 to <2 x i64>*
  %1883 = load <2 x i64>, <2 x i64>* %1882, align 8, !tbaa !7, !alias.scope !232
  %1884 = getelementptr inbounds double, double* %1881, i64 2
  %1885 = bitcast double* %1884 to <2 x i64>*
  %1886 = load <2 x i64>, <2 x i64>* %1885, align 8, !tbaa !7, !alias.scope !232
  %1887 = getelementptr inbounds double, double* %41, i64 %1880
  %1888 = bitcast double* %1887 to <2 x i64>*
  store <2 x i64> %1883, <2 x i64>* %1888, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1889 = getelementptr inbounds double, double* %1887, i64 2
  %1890 = bitcast double* %1889 to <2 x i64>*
  store <2 x i64> %1886, <2 x i64>* %1890, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1891 = or i64 %1868, 8
  %1892 = getelementptr inbounds double, double* %42, i64 %1891
  %1893 = bitcast double* %1892 to <2 x i64>*
  %1894 = load <2 x i64>, <2 x i64>* %1893, align 8, !tbaa !7, !alias.scope !232
  %1895 = getelementptr inbounds double, double* %1892, i64 2
  %1896 = bitcast double* %1895 to <2 x i64>*
  %1897 = load <2 x i64>, <2 x i64>* %1896, align 8, !tbaa !7, !alias.scope !232
  %1898 = getelementptr inbounds double, double* %41, i64 %1891
  %1899 = bitcast double* %1898 to <2 x i64>*
  store <2 x i64> %1894, <2 x i64>* %1899, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1900 = getelementptr inbounds double, double* %1898, i64 2
  %1901 = bitcast double* %1900 to <2 x i64>*
  store <2 x i64> %1897, <2 x i64>* %1901, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1902 = or i64 %1868, 12
  %1903 = getelementptr inbounds double, double* %42, i64 %1902
  %1904 = bitcast double* %1903 to <2 x i64>*
  %1905 = load <2 x i64>, <2 x i64>* %1904, align 8, !tbaa !7, !alias.scope !232
  %1906 = getelementptr inbounds double, double* %1903, i64 2
  %1907 = bitcast double* %1906 to <2 x i64>*
  %1908 = load <2 x i64>, <2 x i64>* %1907, align 8, !tbaa !7, !alias.scope !232
  %1909 = getelementptr inbounds double, double* %41, i64 %1902
  %1910 = bitcast double* %1909 to <2 x i64>*
  store <2 x i64> %1905, <2 x i64>* %1910, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1911 = getelementptr inbounds double, double* %1909, i64 2
  %1912 = bitcast double* %1911 to <2 x i64>*
  store <2 x i64> %1908, <2 x i64>* %1912, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1913 = add i64 %1868, 16
  %1914 = add i64 %1869, -4
  %1915 = icmp eq i64 %1914, 0
  br i1 %1915, label %1916, label %1867, !llvm.loop !237

; <label>:1916:                                   ; preds = %1867, %1866
  %1917 = phi i64 [ 0, %1866 ], [ %1913, %1867 ]
  br i1 %263, label %1934, label %1918

; <label>:1918:                                   ; preds = %1916, %1918
  %1919 = phi i64 [ %1931, %1918 ], [ %1917, %1916 ]
  %1920 = phi i64 [ %1932, %1918 ], [ %260, %1916 ]
  %1921 = getelementptr inbounds double, double* %42, i64 %1919
  %1922 = bitcast double* %1921 to <2 x i64>*
  %1923 = load <2 x i64>, <2 x i64>* %1922, align 8, !tbaa !7, !alias.scope !232
  %1924 = getelementptr inbounds double, double* %1921, i64 2
  %1925 = bitcast double* %1924 to <2 x i64>*
  %1926 = load <2 x i64>, <2 x i64>* %1925, align 8, !tbaa !7, !alias.scope !232
  %1927 = getelementptr inbounds double, double* %41, i64 %1919
  %1928 = bitcast double* %1927 to <2 x i64>*
  store <2 x i64> %1923, <2 x i64>* %1928, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1929 = getelementptr inbounds double, double* %1927, i64 2
  %1930 = bitcast double* %1929 to <2 x i64>*
  store <2 x i64> %1926, <2 x i64>* %1930, align 8, !tbaa !7, !alias.scope !235, !noalias !232
  %1931 = add i64 %1919, 4
  %1932 = add i64 %1920, -1
  %1933 = icmp eq i64 %1932, 0
  br i1 %1933, label %1934, label %1918, !llvm.loop !238

; <label>:1934:                                   ; preds = %1918, %1916
  br i1 %264, label %1986, label %1845

; <label>:1935:                                   ; preds = %1349, %1935
  %1936 = phi i64 [ %1984, %1935 ], [ %1350, %1349 ]
  %1937 = getelementptr inbounds double, double* %50, i64 %1936
  %1938 = bitcast double* %1937 to i64*
  %1939 = load i64, i64* %1938, align 8, !tbaa !7
  %1940 = getelementptr inbounds double, double* %39, i64 %1936
  %1941 = bitcast double* %1940 to i64*
  store i64 %1939, i64* %1941, align 8, !tbaa !7
  %1942 = add nuw nsw i64 %1936, 1
  %1943 = getelementptr inbounds double, double* %50, i64 %1942
  %1944 = bitcast double* %1943 to i64*
  %1945 = load i64, i64* %1944, align 8, !tbaa !7
  %1946 = getelementptr inbounds double, double* %39, i64 %1942
  %1947 = bitcast double* %1946 to i64*
  store i64 %1945, i64* %1947, align 8, !tbaa !7
  %1948 = add nsw i64 %1936, 2
  %1949 = getelementptr inbounds double, double* %50, i64 %1948
  %1950 = bitcast double* %1949 to i64*
  %1951 = load i64, i64* %1950, align 8, !tbaa !7
  %1952 = getelementptr inbounds double, double* %39, i64 %1948
  %1953 = bitcast double* %1952 to i64*
  store i64 %1951, i64* %1953, align 8, !tbaa !7
  %1954 = add nsw i64 %1936, 3
  %1955 = getelementptr inbounds double, double* %50, i64 %1954
  %1956 = bitcast double* %1955 to i64*
  %1957 = load i64, i64* %1956, align 8, !tbaa !7
  %1958 = getelementptr inbounds double, double* %39, i64 %1954
  %1959 = bitcast double* %1958 to i64*
  store i64 %1957, i64* %1959, align 8, !tbaa !7
  %1960 = add nsw i64 %1936, 4
  %1961 = getelementptr inbounds double, double* %50, i64 %1960
  %1962 = bitcast double* %1961 to i64*
  %1963 = load i64, i64* %1962, align 8, !tbaa !7
  %1964 = getelementptr inbounds double, double* %39, i64 %1960
  %1965 = bitcast double* %1964 to i64*
  store i64 %1963, i64* %1965, align 8, !tbaa !7
  %1966 = add nsw i64 %1936, 5
  %1967 = getelementptr inbounds double, double* %50, i64 %1966
  %1968 = bitcast double* %1967 to i64*
  %1969 = load i64, i64* %1968, align 8, !tbaa !7
  %1970 = getelementptr inbounds double, double* %39, i64 %1966
  %1971 = bitcast double* %1970 to i64*
  store i64 %1969, i64* %1971, align 8, !tbaa !7
  %1972 = add nsw i64 %1936, 6
  %1973 = getelementptr inbounds double, double* %50, i64 %1972
  %1974 = bitcast double* %1973 to i64*
  %1975 = load i64, i64* %1974, align 8, !tbaa !7
  %1976 = getelementptr inbounds double, double* %39, i64 %1972
  %1977 = bitcast double* %1976 to i64*
  store i64 %1975, i64* %1977, align 8, !tbaa !7
  %1978 = add nsw i64 %1936, 7
  %1979 = getelementptr inbounds double, double* %50, i64 %1978
  %1980 = bitcast double* %1979 to i64*
  %1981 = load i64, i64* %1980, align 8, !tbaa !7
  %1982 = getelementptr inbounds double, double* %39, i64 %1978
  %1983 = bitcast double* %1982 to i64*
  store i64 %1981, i64* %1983, align 8, !tbaa !7
  %1984 = add nsw i64 %1936, 8
  %1985 = icmp eq i64 %1984, %91
  br i1 %1985, label %1842, label %1935, !llvm.loop !239

; <label>:1986:                                   ; preds = %1863, %1987, %1934, %1842
  br i1 %62, label %2038, label %2042

; <label>:1987:                                   ; preds = %1863, %1987
  %1988 = phi i64 [ %2036, %1987 ], [ %1864, %1863 ]
  %1989 = getelementptr inbounds double, double* %42, i64 %1988
  %1990 = bitcast double* %1989 to i64*
  %1991 = load i64, i64* %1990, align 8, !tbaa !7
  %1992 = getelementptr inbounds double, double* %41, i64 %1988
  %1993 = bitcast double* %1992 to i64*
  store i64 %1991, i64* %1993, align 8, !tbaa !7
  %1994 = add nuw nsw i64 %1988, 1
  %1995 = getelementptr inbounds double, double* %42, i64 %1994
  %1996 = bitcast double* %1995 to i64*
  %1997 = load i64, i64* %1996, align 8, !tbaa !7
  %1998 = getelementptr inbounds double, double* %41, i64 %1994
  %1999 = bitcast double* %1998 to i64*
  store i64 %1997, i64* %1999, align 8, !tbaa !7
  %2000 = add nsw i64 %1988, 2
  %2001 = getelementptr inbounds double, double* %42, i64 %2000
  %2002 = bitcast double* %2001 to i64*
  %2003 = load i64, i64* %2002, align 8, !tbaa !7
  %2004 = getelementptr inbounds double, double* %41, i64 %2000
  %2005 = bitcast double* %2004 to i64*
  store i64 %2003, i64* %2005, align 8, !tbaa !7
  %2006 = add nsw i64 %1988, 3
  %2007 = getelementptr inbounds double, double* %42, i64 %2006
  %2008 = bitcast double* %2007 to i64*
  %2009 = load i64, i64* %2008, align 8, !tbaa !7
  %2010 = getelementptr inbounds double, double* %41, i64 %2006
  %2011 = bitcast double* %2010 to i64*
  store i64 %2009, i64* %2011, align 8, !tbaa !7
  %2012 = add nsw i64 %1988, 4
  %2013 = getelementptr inbounds double, double* %42, i64 %2012
  %2014 = bitcast double* %2013 to i64*
  %2015 = load i64, i64* %2014, align 8, !tbaa !7
  %2016 = getelementptr inbounds double, double* %41, i64 %2012
  %2017 = bitcast double* %2016 to i64*
  store i64 %2015, i64* %2017, align 8, !tbaa !7
  %2018 = add nsw i64 %1988, 5
  %2019 = getelementptr inbounds double, double* %42, i64 %2018
  %2020 = bitcast double* %2019 to i64*
  %2021 = load i64, i64* %2020, align 8, !tbaa !7
  %2022 = getelementptr inbounds double, double* %41, i64 %2018
  %2023 = bitcast double* %2022 to i64*
  store i64 %2021, i64* %2023, align 8, !tbaa !7
  %2024 = add nsw i64 %1988, 6
  %2025 = getelementptr inbounds double, double* %42, i64 %2024
  %2026 = bitcast double* %2025 to i64*
  %2027 = load i64, i64* %2026, align 8, !tbaa !7
  %2028 = getelementptr inbounds double, double* %41, i64 %2024
  %2029 = bitcast double* %2028 to i64*
  store i64 %2027, i64* %2029, align 8, !tbaa !7
  %2030 = add nsw i64 %1988, 7
  %2031 = getelementptr inbounds double, double* %42, i64 %2030
  %2032 = bitcast double* %2031 to i64*
  %2033 = load i64, i64* %2032, align 8, !tbaa !7
  %2034 = getelementptr inbounds double, double* %41, i64 %2030
  %2035 = bitcast double* %2034 to i64*
  store i64 %2033, i64* %2035, align 8, !tbaa !7
  %2036 = add nsw i64 %1988, 8
  %2037 = icmp eq i64 %2036, %105
  br i1 %2037, label %1986, label %1987, !llvm.loop !240

; <label>:2038:                                   ; preds = %1986
  %2039 = load i64, i64* bitcast (double* @R_NaReal to i64*), align 8, !tbaa !7
  %2040 = getelementptr inbounds double, double* %70, i64 %305
  %2041 = bitcast double* %2040 to i64*
  store i64 %2039, i64* %2041, align 8, !tbaa !7
  br label %2042

; <label>:2042:                                   ; preds = %1818, %1731, %1799, %2038, %1986
  %2043 = phi double [ %308, %2038 ], [ %308, %1986 ], [ %1724, %1799 ], [ %1724, %1731 ], [ %1724, %1818 ]
  %2044 = phi double [ %307, %2038 ], [ %307, %1986 ], [ %1725, %1799 ], [ %1725, %1731 ], [ %1725, %1818 ]
  %2045 = phi i32 [ %306, %2038 ], [ %306, %1986 ], [ %1726, %1799 ], [ %1726, %1731 ], [ %1726, %1818 ]
  %2046 = add nuw nsw i64 %305, 1
  %2047 = icmp eq i64 %2046, %106
  br i1 %2047, label %309, label %304

; <label>:2048:                                   ; preds = %309
  %2049 = tail call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 3) #7
  %2050 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %2049) #7
  %2051 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 3) #7
  %2052 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %2049, i64 0, %struct.SEXPREC* %2051) #7
  %2053 = tail call double* @REAL(%struct.SEXPREC* %2051) #7
  store double %310, double* %2053, align 8, !tbaa !7
  %2054 = tail call double* @REAL(%struct.SEXPREC* %2051) #7
  %2055 = getelementptr inbounds double, double* %2054, i64 1
  store double %311, double* %2055, align 8, !tbaa !7
  %2056 = sitofp i32 %312 to double
  %2057 = tail call double* @REAL(%struct.SEXPREC* %2051) #7
  %2058 = getelementptr inbounds double, double* %2057, i64 2
  store double %2056, double* %2058, align 8, !tbaa !7
  %2059 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %2049, i64 1, %struct.SEXPREC* %69) #7
  tail call void @Rf_unprotect(i32 2) #7
  br label %2068

; <label>:2060:                                   ; preds = %309
  %2061 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 3) #7
  %2062 = tail call double* @REAL(%struct.SEXPREC* %2061) #7
  store double %310, double* %2062, align 8, !tbaa !7
  %2063 = tail call double* @REAL(%struct.SEXPREC* %2061) #7
  %2064 = getelementptr inbounds double, double* %2063, i64 1
  store double %311, double* %2064, align 8, !tbaa !7
  %2065 = sitofp i32 %312 to double
  %2066 = tail call double* @REAL(%struct.SEXPREC* %2061) #7
  %2067 = getelementptr inbounds double, double* %2066, i64 2
  store double %2065, double* %2067, align 8, !tbaa !7
  br label %2068

; <label>:2068:                                   ; preds = %2060, %2048
  %2069 = phi %struct.SEXPREC* [ %2049, %2048 ], [ %2061, %2060 ]
  ret %struct.SEXPREC* %2069
}

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @ARIMA_CSS(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %7 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %8 = bitcast double* %7 to i8*
  %9 = tail call double* @REAL(%struct.SEXPREC* %2) #7
  %10 = tail call double* @REAL(%struct.SEXPREC* %3) #7
  %11 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %12 = tail call i32* @INTEGER(%struct.SEXPREC* %1) #7
  %13 = tail call i32 @LENGTH(%struct.SEXPREC* %2) #7
  %14 = tail call i32 @LENGTH(%struct.SEXPREC* %3) #7
  %15 = tail call i32 @Rf_asInteger(%struct.SEXPREC* %4) #7
  %16 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %5) #7
  %17 = sext i32 %11 to i64
  %18 = tail call i8* @R_alloc(i64 %17, i32 8) #7
  %19 = bitcast i8* %18 to double*
  %20 = icmp sgt i32 %11, 0
  br i1 %20, label %21, label %132

; <label>:21:                                     ; preds = %6
  %22 = zext i32 %11 to i64
  %23 = icmp ult i32 %11, 4
  br i1 %23, label %24, label %45

; <label>:24:                                     ; preds = %130, %45, %21
  %25 = phi i64 [ 0, %45 ], [ 0, %21 ], [ %54, %130 ]
  %26 = sub nsw i64 %22, %25
  %27 = xor i64 %25, -1
  %28 = add nsw i64 %27, %22
  %29 = and i64 %26, 7
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %42, label %31

; <label>:31:                                     ; preds = %24, %31
  %32 = phi i64 [ %39, %31 ], [ %25, %24 ]
  %33 = phi i64 [ %40, %31 ], [ %29, %24 ]
  %34 = getelementptr inbounds double, double* %7, i64 %32
  %35 = bitcast double* %34 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !7
  %37 = getelementptr inbounds double, double* %19, i64 %32
  %38 = bitcast double* %37 to i64*
  store i64 %36, i64* %38, align 8, !tbaa !7
  %39 = add nuw nsw i64 %32, 1
  %40 = add i64 %33, -1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %31, !llvm.loop !241

; <label>:42:                                     ; preds = %31, %24
  %43 = phi i64 [ %25, %24 ], [ %39, %31 ]
  %44 = icmp ult i64 %28, 7
  br i1 %44, label %132, label %179

; <label>:45:                                     ; preds = %21
  %46 = shl nuw nsw i64 %22, 3
  %47 = getelementptr i8, i8* %18, i64 %46
  %48 = getelementptr double, double* %7, i64 %22
  %49 = bitcast double* %48 to i8*
  %50 = icmp ult i8* %18, %49
  %51 = icmp ugt i8* %47, %8
  %52 = and i1 %50, %51
  br i1 %52, label %24, label %53

; <label>:53:                                     ; preds = %45
  %54 = and i64 %22, 4294967292
  %55 = add nsw i64 %54, -4
  %56 = lshr exact i64 %55, 2
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 12
  br i1 %59, label %111, label %60

; <label>:60:                                     ; preds = %53
  %61 = sub nsw i64 %57, %58
  br label %62

; <label>:62:                                     ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr inbounds double, double* %7, i64 %63
  %66 = bitcast double* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 8, !tbaa !7, !alias.scope !242
  %68 = getelementptr inbounds double, double* %65, i64 2
  %69 = bitcast double* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !tbaa !7, !alias.scope !242
  %71 = getelementptr inbounds double, double* %19, i64 %63
  %72 = bitcast double* %71 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %72, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %73 = getelementptr inbounds double, double* %71, i64 2
  %74 = bitcast double* %73 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %75 = or i64 %63, 4
  %76 = getelementptr inbounds double, double* %7, i64 %75
  %77 = bitcast double* %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !7, !alias.scope !242
  %79 = getelementptr inbounds double, double* %76, i64 2
  %80 = bitcast double* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !7, !alias.scope !242
  %82 = getelementptr inbounds double, double* %19, i64 %75
  %83 = bitcast double* %82 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %83, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %84 = getelementptr inbounds double, double* %82, i64 2
  %85 = bitcast double* %84 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %86 = or i64 %63, 8
  %87 = getelementptr inbounds double, double* %7, i64 %86
  %88 = bitcast double* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !7, !alias.scope !242
  %90 = getelementptr inbounds double, double* %87, i64 2
  %91 = bitcast double* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !tbaa !7, !alias.scope !242
  %93 = getelementptr inbounds double, double* %19, i64 %86
  %94 = bitcast double* %93 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %94, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %95 = getelementptr inbounds double, double* %93, i64 2
  %96 = bitcast double* %95 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %97 = or i64 %63, 12
  %98 = getelementptr inbounds double, double* %7, i64 %97
  %99 = bitcast double* %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8, !tbaa !7, !alias.scope !242
  %101 = getelementptr inbounds double, double* %98, i64 2
  %102 = bitcast double* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !tbaa !7, !alias.scope !242
  %104 = getelementptr inbounds double, double* %19, i64 %97
  %105 = bitcast double* %104 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %105, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %106 = getelementptr inbounds double, double* %104, i64 2
  %107 = bitcast double* %106 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %108 = add i64 %63, 16
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !247

; <label>:111:                                    ; preds = %62, %53
  %112 = phi i64 [ 0, %53 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

; <label>:114:                                    ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr inbounds double, double* %7, i64 %115
  %118 = bitcast double* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !tbaa !7, !alias.scope !242
  %120 = getelementptr inbounds double, double* %117, i64 2
  %121 = bitcast double* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !tbaa !7, !alias.scope !242
  %123 = getelementptr inbounds double, double* %19, i64 %115
  %124 = bitcast double* %123 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %124, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %125 = getelementptr inbounds double, double* %123, i64 2
  %126 = bitcast double* %125 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !tbaa !7, !alias.scope !245, !noalias !242
  %127 = add i64 %115, 4
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !248

; <label>:130:                                    ; preds = %114, %111
  %131 = icmp eq i64 %54, %22
  br i1 %131, label %132, label %24

; <label>:132:                                    ; preds = %42, %179, %130, %6
  %133 = getelementptr inbounds i32, i32* %12, i64 5
  %134 = load i32, i32* %133, align 4, !tbaa !73
  %135 = icmp sgt i32 %134, 0
  %136 = icmp sgt i32 %11, 1
  %137 = and i1 %135, %136
  br i1 %137, label %138, label %230

; <label>:138:                                    ; preds = %132
  %139 = add nsw i64 %17, -1
  %140 = and i64 %139, 1
  %141 = icmp eq i64 %140, 0
  %142 = add nsw i64 %17, -2
  %143 = getelementptr inbounds double, double* %19, i64 %142
  %144 = getelementptr inbounds double, double* %19, i64 %139
  %145 = add nsw i64 %17, -2
  %146 = add nsw i64 %17, -1
  %147 = icmp eq i32 %11, 2
  br label %148

; <label>:148:                                    ; preds = %138, %176
  %149 = phi i32 [ %177, %176 ], [ 0, %138 ]
  br i1 %141, label %154, label %150

; <label>:150:                                    ; preds = %148
  %151 = load double, double* %143, align 8, !tbaa !7
  %152 = load double, double* %144, align 8, !tbaa !7
  %153 = fsub double %152, %151
  store double %153, double* %144, align 8, !tbaa !7
  br label %154

; <label>:154:                                    ; preds = %150, %148
  %155 = phi i64 [ %146, %150 ], [ %17, %148 ]
  %156 = phi i64 [ %145, %150 ], [ %139, %148 ]
  br i1 %147, label %176, label %157

; <label>:157:                                    ; preds = %154, %157
  %158 = phi i64 [ %175, %157 ], [ %155, %154 ]
  %159 = phi i64 [ %173, %157 ], [ %156, %154 ]
  %160 = add nsw i64 %158, -2
  %161 = getelementptr inbounds double, double* %19, i64 %160
  %162 = load double, double* %161, align 8, !tbaa !7
  %163 = getelementptr inbounds double, double* %19, i64 %159
  %164 = load double, double* %163, align 8, !tbaa !7
  %165 = fsub double %164, %162
  store double %165, double* %163, align 8, !tbaa !7
  %166 = add nsw i64 %159, -1
  %167 = add nsw i64 %158, -3
  %168 = getelementptr inbounds double, double* %19, i64 %167
  %169 = load double, double* %168, align 8, !tbaa !7
  %170 = getelementptr inbounds double, double* %19, i64 %166
  %171 = load double, double* %170, align 8, !tbaa !7
  %172 = fsub double %171, %169
  store double %172, double* %170, align 8, !tbaa !7
  %173 = add nsw i64 %159, -2
  %174 = icmp sgt i64 %173, 0
  %175 = add nsw i64 %158, -2
  br i1 %174, label %157, label %176

; <label>:176:                                    ; preds = %157, %154
  %177 = add nuw nsw i32 %149, 1
  %178 = icmp slt i32 %177, %134
  br i1 %178, label %148, label %230

; <label>:179:                                    ; preds = %42, %179
  %180 = phi i64 [ %228, %179 ], [ %43, %42 ]
  %181 = getelementptr inbounds double, double* %7, i64 %180
  %182 = bitcast double* %181 to i64*
  %183 = load i64, i64* %182, align 8, !tbaa !7
  %184 = getelementptr inbounds double, double* %19, i64 %180
  %185 = bitcast double* %184 to i64*
  store i64 %183, i64* %185, align 8, !tbaa !7
  %186 = add nuw nsw i64 %180, 1
  %187 = getelementptr inbounds double, double* %7, i64 %186
  %188 = bitcast double* %187 to i64*
  %189 = load i64, i64* %188, align 8, !tbaa !7
  %190 = getelementptr inbounds double, double* %19, i64 %186
  %191 = bitcast double* %190 to i64*
  store i64 %189, i64* %191, align 8, !tbaa !7
  %192 = add nsw i64 %180, 2
  %193 = getelementptr inbounds double, double* %7, i64 %192
  %194 = bitcast double* %193 to i64*
  %195 = load i64, i64* %194, align 8, !tbaa !7
  %196 = getelementptr inbounds double, double* %19, i64 %192
  %197 = bitcast double* %196 to i64*
  store i64 %195, i64* %197, align 8, !tbaa !7
  %198 = add nsw i64 %180, 3
  %199 = getelementptr inbounds double, double* %7, i64 %198
  %200 = bitcast double* %199 to i64*
  %201 = load i64, i64* %200, align 8, !tbaa !7
  %202 = getelementptr inbounds double, double* %19, i64 %198
  %203 = bitcast double* %202 to i64*
  store i64 %201, i64* %203, align 8, !tbaa !7
  %204 = add nsw i64 %180, 4
  %205 = getelementptr inbounds double, double* %7, i64 %204
  %206 = bitcast double* %205 to i64*
  %207 = load i64, i64* %206, align 8, !tbaa !7
  %208 = getelementptr inbounds double, double* %19, i64 %204
  %209 = bitcast double* %208 to i64*
  store i64 %207, i64* %209, align 8, !tbaa !7
  %210 = add nsw i64 %180, 5
  %211 = getelementptr inbounds double, double* %7, i64 %210
  %212 = bitcast double* %211 to i64*
  %213 = load i64, i64* %212, align 8, !tbaa !7
  %214 = getelementptr inbounds double, double* %19, i64 %210
  %215 = bitcast double* %214 to i64*
  store i64 %213, i64* %215, align 8, !tbaa !7
  %216 = add nsw i64 %180, 6
  %217 = getelementptr inbounds double, double* %7, i64 %216
  %218 = bitcast double* %217 to i64*
  %219 = load i64, i64* %218, align 8, !tbaa !7
  %220 = getelementptr inbounds double, double* %19, i64 %216
  %221 = bitcast double* %220 to i64*
  store i64 %219, i64* %221, align 8, !tbaa !7
  %222 = add nsw i64 %180, 7
  %223 = getelementptr inbounds double, double* %7, i64 %222
  %224 = bitcast double* %223 to i64*
  %225 = load i64, i64* %224, align 8, !tbaa !7
  %226 = getelementptr inbounds double, double* %19, i64 %222
  %227 = bitcast double* %226 to i64*
  store i64 %225, i64* %227, align 8, !tbaa !7
  %228 = add nsw i64 %180, 8
  %229 = icmp eq i64 %228, %22
  br i1 %229, label %132, label %179, !llvm.loop !249

; <label>:230:                                    ; preds = %176, %132
  %231 = getelementptr inbounds i32, i32* %12, i64 4
  %232 = load i32, i32* %231, align 4, !tbaa !73
  %233 = getelementptr inbounds i32, i32* %12, i64 6
  %234 = load i32, i32* %233, align 4, !tbaa !73
  %235 = icmp sgt i32 %234, 0
  %236 = icmp sgt i32 %11, %232
  %237 = and i1 %235, %236
  br i1 %237, label %238, label %381

; <label>:238:                                    ; preds = %230
  %239 = sext i32 %232 to i64
  %240 = sub nsw i64 %17, %239
  %241 = xor i64 %239, -1
  %242 = add nsw i64 %241, %17
  %243 = shl nsw i64 %17, 3
  %244 = add nsw i64 %243, -8
  %245 = getelementptr i8, i8* %18, i64 %244
  %246 = ptrtoint i8* %245 to i64
  %247 = shl nsw i64 %239, 3
  %248 = sub nsw i64 %244, %247
  %249 = getelementptr i8, i8* %18, i64 %248
  %250 = ptrtoint i8* %249 to i64
  %251 = getelementptr i8, i8* %18, i64 %247
  %252 = shl nsw i64 %17, 3
  %253 = getelementptr i8, i8* %18, i64 %252
  %254 = sub nsw i64 %252, %247
  %255 = getelementptr i8, i8* %18, i64 %254
  %256 = sub nsw i64 %17, %239
  %257 = add nsw i64 %256, -4
  %258 = lshr i64 %257, 2
  %259 = add nuw nsw i64 %258, 1
  %260 = icmp ult i64 %240, 4
  %261 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 8)
  %262 = extractvalue { i64, i1 } %261, 0
  %263 = extractvalue { i64, i1 } %261, 1
  %264 = icmp ugt i64 %262, %246
  %265 = or i1 %264, %263
  %266 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %242, i64 8)
  %267 = extractvalue { i64, i1 } %266, 0
  %268 = extractvalue { i64, i1 } %266, 1
  %269 = icmp ugt i64 %267, %250
  %270 = or i1 %269, %268
  %271 = or i1 %265, %270
  %272 = icmp ult i8* %251, %255
  %273 = icmp ult i8* %18, %253
  %274 = and i1 %272, %273
  %275 = and i64 %240, -4
  %276 = sub nsw i64 %17, %275
  %277 = and i64 %259, 1
  %278 = icmp eq i64 %258, 0
  %279 = sub nsw i64 %259, %277
  %280 = icmp eq i64 %277, 0
  %281 = icmp eq i64 %240, %275
  br label %282

; <label>:282:                                    ; preds = %238, %378
  %283 = phi i32 [ %379, %378 ], [ 0, %238 ]
  %284 = or i1 %260, %271
  %285 = or i1 %284, %274
  br i1 %285, label %366, label %286

; <label>:286:                                    ; preds = %282
  br i1 %278, label %339, label %287

; <label>:287:                                    ; preds = %286, %287
  %288 = phi i64 [ %336, %287 ], [ 0, %286 ]
  %289 = phi i64 [ %337, %287 ], [ %279, %286 ]
  %290 = xor i64 %288, -1
  %291 = add i64 %290, %17
  %292 = sub nsw i64 %291, %239
  %293 = getelementptr inbounds double, double* %19, i64 %292
  %294 = getelementptr inbounds double, double* %293, i64 -1
  %295 = bitcast double* %294 to <2 x double>*
  %296 = load <2 x double>, <2 x double>* %295, align 8, !tbaa !7, !alias.scope !250
  %297 = getelementptr inbounds double, double* %293, i64 -2
  %298 = getelementptr inbounds double, double* %297, i64 -1
  %299 = bitcast double* %298 to <2 x double>*
  %300 = load <2 x double>, <2 x double>* %299, align 8, !tbaa !7, !alias.scope !250
  %301 = getelementptr inbounds double, double* %19, i64 %291
  %302 = getelementptr inbounds double, double* %301, i64 -1
  %303 = bitcast double* %302 to <2 x double>*
  %304 = load <2 x double>, <2 x double>* %303, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %305 = getelementptr inbounds double, double* %301, i64 -2
  %306 = getelementptr inbounds double, double* %305, i64 -1
  %307 = bitcast double* %306 to <2 x double>*
  %308 = load <2 x double>, <2 x double>* %307, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %309 = fsub <2 x double> %304, %296
  %310 = fsub <2 x double> %308, %300
  %311 = bitcast double* %302 to <2 x double>*
  store <2 x double> %309, <2 x double>* %311, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %312 = bitcast double* %306 to <2 x double>*
  store <2 x double> %310, <2 x double>* %312, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %313 = sub i64 -5, %288
  %314 = add i64 %313, %17
  %315 = sub nsw i64 %314, %239
  %316 = getelementptr inbounds double, double* %19, i64 %315
  %317 = getelementptr inbounds double, double* %316, i64 -1
  %318 = bitcast double* %317 to <2 x double>*
  %319 = load <2 x double>, <2 x double>* %318, align 8, !tbaa !7, !alias.scope !250
  %320 = getelementptr inbounds double, double* %316, i64 -2
  %321 = getelementptr inbounds double, double* %320, i64 -1
  %322 = bitcast double* %321 to <2 x double>*
  %323 = load <2 x double>, <2 x double>* %322, align 8, !tbaa !7, !alias.scope !250
  %324 = getelementptr inbounds double, double* %19, i64 %314
  %325 = getelementptr inbounds double, double* %324, i64 -1
  %326 = bitcast double* %325 to <2 x double>*
  %327 = load <2 x double>, <2 x double>* %326, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %328 = getelementptr inbounds double, double* %324, i64 -2
  %329 = getelementptr inbounds double, double* %328, i64 -1
  %330 = bitcast double* %329 to <2 x double>*
  %331 = load <2 x double>, <2 x double>* %330, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %332 = fsub <2 x double> %327, %319
  %333 = fsub <2 x double> %331, %323
  %334 = bitcast double* %325 to <2 x double>*
  store <2 x double> %332, <2 x double>* %334, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %335 = bitcast double* %329 to <2 x double>*
  store <2 x double> %333, <2 x double>* %335, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %336 = add i64 %288, 8
  %337 = add i64 %289, -2
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %287, !llvm.loop !255

; <label>:339:                                    ; preds = %287, %286
  %340 = phi i64 [ 0, %286 ], [ %336, %287 ]
  br i1 %280, label %365, label %341

; <label>:341:                                    ; preds = %339
  %342 = xor i64 %340, -1
  %343 = add i64 %342, %17
  %344 = sub nsw i64 %343, %239
  %345 = getelementptr inbounds double, double* %19, i64 %344
  %346 = getelementptr inbounds double, double* %345, i64 -1
  %347 = bitcast double* %346 to <2 x double>*
  %348 = load <2 x double>, <2 x double>* %347, align 8, !tbaa !7, !alias.scope !250
  %349 = getelementptr inbounds double, double* %345, i64 -2
  %350 = getelementptr inbounds double, double* %349, i64 -1
  %351 = bitcast double* %350 to <2 x double>*
  %352 = load <2 x double>, <2 x double>* %351, align 8, !tbaa !7, !alias.scope !250
  %353 = getelementptr inbounds double, double* %19, i64 %343
  %354 = getelementptr inbounds double, double* %353, i64 -1
  %355 = bitcast double* %354 to <2 x double>*
  %356 = load <2 x double>, <2 x double>* %355, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %357 = getelementptr inbounds double, double* %353, i64 -2
  %358 = getelementptr inbounds double, double* %357, i64 -1
  %359 = bitcast double* %358 to <2 x double>*
  %360 = load <2 x double>, <2 x double>* %359, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %361 = fsub <2 x double> %356, %348
  %362 = fsub <2 x double> %360, %352
  %363 = bitcast double* %354 to <2 x double>*
  store <2 x double> %361, <2 x double>* %363, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  %364 = bitcast double* %358 to <2 x double>*
  store <2 x double> %362, <2 x double>* %364, align 8, !tbaa !7, !alias.scope !253, !noalias !250
  br label %365

; <label>:365:                                    ; preds = %339, %341
  br i1 %281, label %378, label %366

; <label>:366:                                    ; preds = %282, %365
  %367 = phi i64 [ %17, %282 ], [ %276, %365 ]
  br label %368

; <label>:368:                                    ; preds = %366, %368
  %369 = phi i64 [ %370, %368 ], [ %367, %366 ]
  %370 = add nsw i64 %369, -1
  %371 = sub nsw i64 %370, %239
  %372 = getelementptr inbounds double, double* %19, i64 %371
  %373 = load double, double* %372, align 8, !tbaa !7
  %374 = getelementptr inbounds double, double* %19, i64 %370
  %375 = load double, double* %374, align 8, !tbaa !7
  %376 = fsub double %375, %373
  store double %376, double* %374, align 8, !tbaa !7
  %377 = icmp sgt i64 %370, %239
  br i1 %377, label %368, label %378, !llvm.loop !256

; <label>:378:                                    ; preds = %368, %365
  %379 = add nuw nsw i32 %283, 1
  %380 = icmp slt i32 %379, %234
  br i1 %380, label %282, label %381

; <label>:381:                                    ; preds = %378, %230
  %382 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %17) #7
  %383 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %382) #7
  %384 = tail call double* @REAL(%struct.SEXPREC* %382) #7
  %385 = icmp ne i32 %16, 0
  %386 = icmp sgt i32 %15, 0
  %387 = and i1 %385, %386
  br i1 %387, label %388, label %392

; <label>:388:                                    ; preds = %381
  %389 = bitcast double* %384 to i8*
  %390 = zext i32 %15 to i64
  %391 = shl nuw nsw i64 %390, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %389, i8 0, i64 %391, i1 false)
  br label %392

; <label>:392:                                    ; preds = %388, %381
  %393 = icmp slt i32 %15, %11
  br i1 %393, label %394, label %525

; <label>:394:                                    ; preds = %392
  %395 = icmp sgt i32 %13, 0
  %396 = sext i32 %15 to i64
  %397 = sext i32 %14 to i64
  br i1 %395, label %398, label %528

; <label>:398:                                    ; preds = %394
  %399 = zext i32 %13 to i64
  %400 = and i64 %399, 1
  %401 = icmp eq i32 %13, 1
  %402 = sub nsw i64 %399, %400
  %403 = icmp eq i64 %400, 0
  br label %404

; <label>:404:                                    ; preds = %435, %398
  %405 = phi i64 [ %396, %398 ], [ %438, %435 ]
  %406 = phi i32 [ 0, %398 ], [ %437, %435 ]
  %407 = phi double [ 0.000000e+00, %398 ], [ %436, %435 ]
  %408 = getelementptr inbounds double, double* %19, i64 %405
  %409 = load double, double* %408, align 8, !tbaa !7
  %410 = trunc i64 %405 to i32
  br i1 %401, label %496, label %468

; <label>:411:                                    ; preds = %440, %519
  %412 = phi double [ undef, %519 ], [ %463, %440 ]
  %413 = phi i64 [ 0, %519 ], [ %464, %440 ]
  %414 = phi i32 [ 0, %519 ], [ %465, %440 ]
  %415 = phi double [ %512, %519 ], [ %463, %440 ]
  %416 = icmp eq i64 %521, 0
  br i1 %416, label %427, label %417

; <label>:417:                                    ; preds = %411
  %418 = getelementptr inbounds double, double* %10, i64 %413
  %419 = load double, double* %418, align 8, !tbaa !7
  %420 = xor i32 %414, -1
  %421 = add i32 %513, %420
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds double, double* %384, i64 %422
  %424 = load double, double* %423, align 8, !tbaa !7
  %425 = fmul double %419, %424
  %426 = fsub double %415, %425
  br label %427

; <label>:427:                                    ; preds = %417, %411, %511
  %428 = phi double [ %512, %511 ], [ %412, %411 ], [ %426, %417 ]
  %429 = getelementptr inbounds double, double* %384, i64 %405
  store double %428, double* %429, align 8, !tbaa !7
  %430 = fcmp ord double %428, 0.000000e+00
  br i1 %430, label %431, label %435

; <label>:431:                                    ; preds = %427
  %432 = add nsw i32 %406, 1
  %433 = fmul double %428, %428
  %434 = fadd double %407, %433
  br label %435

; <label>:435:                                    ; preds = %431, %427
  %436 = phi double [ %407, %427 ], [ %434, %431 ]
  %437 = phi i32 [ %406, %427 ], [ %432, %431 ]
  %438 = add nsw i64 %405, 1
  %439 = icmp eq i64 %438, %17
  br i1 %439, label %525, label %404

; <label>:440:                                    ; preds = %440, %523
  %441 = phi i64 [ 0, %523 ], [ %464, %440 ]
  %442 = phi i32 [ 0, %523 ], [ %465, %440 ]
  %443 = phi double [ %512, %523 ], [ %463, %440 ]
  %444 = phi i64 [ %524, %523 ], [ %466, %440 ]
  %445 = getelementptr inbounds double, double* %10, i64 %441
  %446 = load double, double* %445, align 8, !tbaa !7
  %447 = xor i32 %442, -1
  %448 = add i32 %513, %447
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds double, double* %384, i64 %449
  %451 = load double, double* %450, align 8, !tbaa !7
  %452 = fmul double %446, %451
  %453 = fsub double %443, %452
  %454 = or i64 %441, 1
  %455 = getelementptr inbounds double, double* %10, i64 %454
  %456 = load double, double* %455, align 8, !tbaa !7
  %457 = sub nuw i32 -2, %442
  %458 = add i32 %457, %513
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds double, double* %384, i64 %459
  %461 = load double, double* %460, align 8, !tbaa !7
  %462 = fmul double %456, %461
  %463 = fsub double %453, %462
  %464 = add nuw nsw i64 %441, 2
  %465 = add nuw nsw i32 %442, 2
  %466 = add i64 %444, -2
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %411, label %440

; <label>:468:                                    ; preds = %404, %468
  %469 = phi i64 [ %492, %468 ], [ 0, %404 ]
  %470 = phi i32 [ %493, %468 ], [ 0, %404 ]
  %471 = phi double [ %491, %468 ], [ %409, %404 ]
  %472 = phi i64 [ %494, %468 ], [ %402, %404 ]
  %473 = getelementptr inbounds double, double* %9, i64 %469
  %474 = load double, double* %473, align 8, !tbaa !7
  %475 = xor i32 %470, -1
  %476 = add i32 %410, %475
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds double, double* %19, i64 %477
  %479 = load double, double* %478, align 8, !tbaa !7
  %480 = fmul double %474, %479
  %481 = fsub double %471, %480
  %482 = or i64 %469, 1
  %483 = getelementptr inbounds double, double* %9, i64 %482
  %484 = load double, double* %483, align 8, !tbaa !7
  %485 = sub nuw i32 -2, %470
  %486 = add i32 %485, %410
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds double, double* %19, i64 %487
  %489 = load double, double* %488, align 8, !tbaa !7
  %490 = fmul double %484, %489
  %491 = fsub double %481, %490
  %492 = add nuw nsw i64 %469, 2
  %493 = add nuw nsw i32 %470, 2
  %494 = add i64 %472, -2
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %496, label %468

; <label>:496:                                    ; preds = %468, %404
  %497 = phi double [ undef, %404 ], [ %491, %468 ]
  %498 = phi i64 [ 0, %404 ], [ %492, %468 ]
  %499 = phi i32 [ 0, %404 ], [ %493, %468 ]
  %500 = phi double [ %409, %404 ], [ %491, %468 ]
  br i1 %403, label %511, label %501

; <label>:501:                                    ; preds = %496
  %502 = getelementptr inbounds double, double* %9, i64 %498
  %503 = load double, double* %502, align 8, !tbaa !7
  %504 = xor i32 %499, -1
  %505 = add i32 %410, %504
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds double, double* %19, i64 %506
  %508 = load double, double* %507, align 8, !tbaa !7
  %509 = fmul double %503, %508
  %510 = fsub double %500, %509
  br label %511

; <label>:511:                                    ; preds = %496, %501
  %512 = phi double [ %497, %496 ], [ %510, %501 ]
  %513 = trunc i64 %405 to i32
  %514 = sub nsw i64 %405, %396
  %515 = icmp slt i64 %514, %397
  %516 = trunc i64 %514 to i32
  %517 = select i1 %515, i32 %516, i32 %14
  %518 = icmp sgt i32 %517, 0
  br i1 %518, label %519, label %427

; <label>:519:                                    ; preds = %511
  %520 = sext i32 %517 to i64
  %521 = and i64 %520, 1
  %522 = icmp eq i32 %517, 1
  br i1 %522, label %411, label %523

; <label>:523:                                    ; preds = %519
  %524 = sub nsw i64 %520, %521
  br label %440

; <label>:525:                                    ; preds = %597, %435, %392
  %526 = phi double [ 0.000000e+00, %392 ], [ %436, %435 ], [ %598, %597 ]
  %527 = phi i32 [ 0, %392 ], [ %437, %435 ], [ %599, %597 ]
  br i1 %385, label %602, label %610

; <label>:528:                                    ; preds = %394, %597
  %529 = phi i64 [ %600, %597 ], [ %396, %394 ]
  %530 = phi i32 [ %599, %597 ], [ 0, %394 ]
  %531 = phi double [ %598, %597 ], [ 0.000000e+00, %394 ]
  %532 = getelementptr inbounds double, double* %19, i64 %529
  %533 = load double, double* %532, align 8, !tbaa !7
  %534 = sub nsw i64 %529, %396
  %535 = icmp slt i64 %534, %397
  %536 = trunc i64 %534 to i32
  %537 = select i1 %535, i32 %536, i32 %14
  %538 = icmp sgt i32 %537, 0
  br i1 %538, label %539, label %561

; <label>:539:                                    ; preds = %528
  %540 = sext i32 %537 to i64
  %541 = and i64 %540, 1
  %542 = icmp eq i32 %537, 1
  br i1 %542, label %545, label %543

; <label>:543:                                    ; preds = %539
  %544 = sub nsw i64 %540, %541
  br label %565

; <label>:545:                                    ; preds = %565, %539
  %546 = phi double [ undef, %539 ], [ %589, %565 ]
  %547 = phi i64 [ 0, %539 ], [ %590, %565 ]
  %548 = phi double [ %533, %539 ], [ %589, %565 ]
  %549 = icmp eq i64 %541, 0
  br i1 %549, label %561, label %550

; <label>:550:                                    ; preds = %545
  %551 = getelementptr inbounds double, double* %10, i64 %547
  %552 = load double, double* %551, align 8, !tbaa !7
  %553 = xor i64 %547, 4294967295
  %554 = add i64 %529, %553
  %555 = shl i64 %554, 32
  %556 = ashr exact i64 %555, 32
  %557 = getelementptr inbounds double, double* %384, i64 %556
  %558 = load double, double* %557, align 8, !tbaa !7
  %559 = fmul double %552, %558
  %560 = fsub double %548, %559
  br label %561

; <label>:561:                                    ; preds = %550, %545, %528
  %562 = phi double [ %533, %528 ], [ %546, %545 ], [ %560, %550 ]
  %563 = getelementptr inbounds double, double* %384, i64 %529
  store double %562, double* %563, align 8, !tbaa !7
  %564 = fcmp ord double %562, 0.000000e+00
  br i1 %564, label %593, label %597

; <label>:565:                                    ; preds = %565, %543
  %566 = phi i64 [ 0, %543 ], [ %590, %565 ]
  %567 = phi double [ %533, %543 ], [ %589, %565 ]
  %568 = phi i64 [ %544, %543 ], [ %591, %565 ]
  %569 = getelementptr inbounds double, double* %10, i64 %566
  %570 = load double, double* %569, align 8, !tbaa !7
  %571 = xor i64 %566, 4294967295
  %572 = add i64 %529, %571
  %573 = shl i64 %572, 32
  %574 = ashr exact i64 %573, 32
  %575 = getelementptr inbounds double, double* %384, i64 %574
  %576 = load double, double* %575, align 8, !tbaa !7
  %577 = fmul double %570, %576
  %578 = fsub double %567, %577
  %579 = or i64 %566, 1
  %580 = getelementptr inbounds double, double* %10, i64 %579
  %581 = load double, double* %580, align 8, !tbaa !7
  %582 = xor i64 %566, 4294967294
  %583 = add i64 %529, %582
  %584 = shl i64 %583, 32
  %585 = ashr exact i64 %584, 32
  %586 = getelementptr inbounds double, double* %384, i64 %585
  %587 = load double, double* %586, align 8, !tbaa !7
  %588 = fmul double %581, %587
  %589 = fsub double %578, %588
  %590 = add nuw nsw i64 %566, 2
  %591 = add i64 %568, -2
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %545, label %565

; <label>:593:                                    ; preds = %561
  %594 = add nsw i32 %530, 1
  %595 = fmul double %562, %562
  %596 = fadd double %531, %595
  br label %597

; <label>:597:                                    ; preds = %561, %593
  %598 = phi double [ %531, %561 ], [ %596, %593 ]
  %599 = phi i32 [ %530, %561 ], [ %594, %593 ]
  %600 = add nsw i64 %529, 1
  %601 = icmp eq i64 %600, %17
  br i1 %601, label %525, label %528

; <label>:602:                                    ; preds = %525
  %603 = tail call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 2) #7
  %604 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %603) #7
  %605 = sitofp i32 %527 to double
  %606 = fdiv double %526, %605
  %607 = tail call %struct.SEXPREC* @Rf_ScalarReal(double %606) #7
  %608 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %603, i64 0, %struct.SEXPREC* %607) #7
  %609 = tail call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %603, i64 1, %struct.SEXPREC* %382) #7
  tail call void @Rf_unprotect(i32 2) #7
  br label %614

; <label>:610:                                    ; preds = %525
  tail call void @Rf_unprotect(i32 1) #7
  %611 = sitofp i32 %527 to double
  %612 = fdiv double %526, %611
  %613 = tail call %struct.SEXPREC* @Rf_ScalarReal(double %612) #7
  br label %614

; <label>:614:                                    ; preds = %610, %602
  %615 = phi %struct.SEXPREC* [ %603, %602 ], [ %613, %610 ]
  ret %struct.SEXPREC* %615
}

declare %struct.SEXPREC* @Rf_ScalarReal(double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @TSconv(%struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %3 = tail call %struct.SEXPREC* @Rf_coerceVector(%struct.SEXPREC* %0, i32 14) #7
  %4 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %3) #7
  %5 = tail call %struct.SEXPREC* @Rf_coerceVector(%struct.SEXPREC* %1, i32 14) #7
  %6 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %5) #7
  %7 = tail call i32 @LENGTH(%struct.SEXPREC* %3) #7
  %8 = tail call i32 @LENGTH(%struct.SEXPREC* %5) #7
  %9 = add i32 %7, -1
  %10 = add i32 %9, %8
  %11 = sext i32 %10 to i64
  %12 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %11) #7
  %13 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %12) #7
  %14 = tail call double* @REAL(%struct.SEXPREC* %3) #7
  %15 = tail call double* @REAL(%struct.SEXPREC* %5) #7
  %16 = tail call double* @REAL(%struct.SEXPREC* %12) #7
  %17 = icmp sgt i32 %10, 0
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %2
  %19 = bitcast double* %16 to i8*
  %20 = add i32 %7, %8
  %21 = add i32 %20, -2
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 3
  %24 = add nuw nsw i64 %23, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 %24, i1 false)
  br label %25

; <label>:25:                                     ; preds = %18, %2
  %26 = icmp sgt i32 %7, 0
  %27 = icmp sgt i32 %8, 0
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %127

; <label>:29:                                     ; preds = %25
  %30 = zext i32 %8 to i64
  %31 = zext i32 %7 to i64
  %32 = getelementptr double, double* %15, i64 %30
  %33 = icmp ult i32 %8, 4
  %34 = and i64 %30, 4294967292
  %35 = icmp eq i64 %34, %30
  %36 = and i64 %30, 1
  %37 = icmp eq i64 %36, 0
  %38 = sub nsw i64 0, %30
  br label %39

; <label>:39:                                     ; preds = %124, %29
  %40 = phi i64 [ 0, %29 ], [ %125, %124 ]
  %41 = getelementptr double, double* %16, i64 %40
  %42 = add nuw i64 %40, %30
  %43 = getelementptr double, double* %16, i64 %42
  %44 = getelementptr inbounds double, double* %14, i64 %40
  br i1 %33, label %87, label %45

; <label>:45:                                     ; preds = %39
  %46 = bitcast double* %41 to i8*
  %47 = getelementptr double, double* %14, i64 %40
  %48 = bitcast double* %47 to i8*
  %49 = getelementptr i8, i8* %48, i64 1
  %50 = icmp ugt i8* %49, %46
  %51 = icmp ult double* %44, %43
  %52 = and i1 %50, %51
  %53 = icmp ult double* %41, %32
  %54 = icmp ult double* %15, %43
  %55 = and i1 %53, %54
  %56 = or i1 %52, %55
  br i1 %56, label %87, label %57

; <label>:57:                                     ; preds = %45
  %58 = load double, double* %44, align 8, !tbaa !7, !alias.scope !257
  %59 = insertelement <2 x double> undef, double %58, i32 0
  %60 = shufflevector <2 x double> %59, <2 x double> undef, <2 x i32> zeroinitializer
  %61 = insertelement <2 x double> undef, double %58, i32 0
  %62 = shufflevector <2 x double> %61, <2 x double> undef, <2 x i32> zeroinitializer
  br label %63

; <label>:63:                                     ; preds = %63, %57
  %64 = phi i64 [ 0, %57 ], [ %84, %63 ]
  %65 = getelementptr inbounds double, double* %15, i64 %64
  %66 = bitcast double* %65 to <2 x double>*
  %67 = load <2 x double>, <2 x double>* %66, align 8, !tbaa !7, !alias.scope !260
  %68 = getelementptr inbounds double, double* %65, i64 2
  %69 = bitcast double* %68 to <2 x double>*
  %70 = load <2 x double>, <2 x double>* %69, align 8, !tbaa !7, !alias.scope !260
  %71 = fmul <2 x double> %60, %67
  %72 = fmul <2 x double> %62, %70
  %73 = add nuw nsw i64 %64, %40
  %74 = getelementptr inbounds double, double* %16, i64 %73
  %75 = bitcast double* %74 to <2 x double>*
  %76 = load <2 x double>, <2 x double>* %75, align 8, !tbaa !7, !alias.scope !262, !noalias !264
  %77 = getelementptr inbounds double, double* %74, i64 2
  %78 = bitcast double* %77 to <2 x double>*
  %79 = load <2 x double>, <2 x double>* %78, align 8, !tbaa !7, !alias.scope !262, !noalias !264
  %80 = fadd <2 x double> %76, %71
  %81 = fadd <2 x double> %79, %72
  %82 = bitcast double* %74 to <2 x double>*
  store <2 x double> %80, <2 x double>* %82, align 8, !tbaa !7, !alias.scope !262, !noalias !264
  %83 = bitcast double* %77 to <2 x double>*
  store <2 x double> %81, <2 x double>* %83, align 8, !tbaa !7, !alias.scope !262, !noalias !264
  %84 = add i64 %64, 4
  %85 = icmp eq i64 %84, %34
  br i1 %85, label %86, label %63, !llvm.loop !265

; <label>:86:                                     ; preds = %63
  br i1 %35, label %124, label %87

; <label>:87:                                     ; preds = %86, %45, %39
  %88 = phi i64 [ 0, %45 ], [ 0, %39 ], [ %34, %86 ]
  %89 = xor i64 %88, -1
  br i1 %37, label %100, label %90

; <label>:90:                                     ; preds = %87
  %91 = load double, double* %44, align 8, !tbaa !7
  %92 = getelementptr inbounds double, double* %15, i64 %88
  %93 = load double, double* %92, align 8, !tbaa !7
  %94 = fmul double %91, %93
  %95 = add nuw nsw i64 %88, %40
  %96 = getelementptr inbounds double, double* %16, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !7
  %98 = fadd double %97, %94
  store double %98, double* %96, align 8, !tbaa !7
  %99 = or i64 %88, 1
  br label %100

; <label>:100:                                    ; preds = %90, %87
  %101 = phi i64 [ %99, %90 ], [ %88, %87 ]
  %102 = icmp eq i64 %89, %38
  br i1 %102, label %124, label %103

; <label>:103:                                    ; preds = %100, %103
  %104 = phi i64 [ %122, %103 ], [ %101, %100 ]
  %105 = load double, double* %44, align 8, !tbaa !7
  %106 = getelementptr inbounds double, double* %15, i64 %104
  %107 = load double, double* %106, align 8, !tbaa !7
  %108 = fmul double %105, %107
  %109 = add nuw nsw i64 %104, %40
  %110 = getelementptr inbounds double, double* %16, i64 %109
  %111 = load double, double* %110, align 8, !tbaa !7
  %112 = fadd double %111, %108
  store double %112, double* %110, align 8, !tbaa !7
  %113 = add nuw nsw i64 %104, 1
  %114 = load double, double* %44, align 8, !tbaa !7
  %115 = getelementptr inbounds double, double* %15, i64 %113
  %116 = load double, double* %115, align 8, !tbaa !7
  %117 = fmul double %114, %116
  %118 = add nuw nsw i64 %113, %40
  %119 = getelementptr inbounds double, double* %16, i64 %118
  %120 = load double, double* %119, align 8, !tbaa !7
  %121 = fadd double %120, %117
  store double %121, double* %119, align 8, !tbaa !7
  %122 = add nsw i64 %104, 2
  %123 = icmp eq i64 %122, %30
  br i1 %123, label %124, label %103, !llvm.loop !266

; <label>:124:                                    ; preds = %100, %103, %86
  %125 = add nuw nsw i64 %40, 1
  %126 = icmp eq i64 %125, %31
  br i1 %126, label %127, label %39

; <label>:127:                                    ; preds = %124, %25
  tail call void @Rf_unprotect(i32 3) #7
  ret %struct.SEXPREC* %12
}

declare %struct.SEXPREC* @Rf_coerceVector(%struct.SEXPREC*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @getQ0bis(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %4 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %5 = tail call i32 @LENGTH(%struct.SEXPREC* %1) #7
  %6 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %7 = bitcast double* %6 to i8*
  %8 = tail call double* @REAL(%struct.SEXPREC* %1) #7
  %9 = bitcast double* %8 to i8*
  %10 = add i32 %5, 1
  %11 = icmp slt i32 %4, %10
  %12 = select i1 %11, i32 %10, i32 %4
  %13 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %12, i32 %12) #7
  %14 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %13) #7
  %15 = tail call double* @REAL(%struct.SEXPREC* %13) #7
  %16 = bitcast double* %15 to i8*
  %17 = mul nsw i32 %12, %12
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %16, i1 false, i1 true)
  %21 = tail call i8* @__memset_chk(i8* %16, i32 0, i64 %19, i64 %20) #7
  %22 = sext i32 %10 to i64
  %23 = tail call i8* @R_alloc(i64 %22, i32 8) #7
  %24 = bitcast i8* %23 to double*
  store double 1.000000e+00, double* %24, align 8, !tbaa !7
  %25 = icmp slt i32 %5, 1
  br i1 %25, label %113, label %26

; <label>:26:                                     ; preds = %3
  %27 = zext i32 %10 to i64
  %28 = add nsw i64 %27, -1
  %29 = icmp ult i64 %28, 4
  br i1 %29, label %63, label %30

; <label>:30:                                     ; preds = %26
  %31 = getelementptr i8, i8* %23, i64 8
  %32 = shl nuw nsw i64 %27, 3
  %33 = getelementptr i8, i8* %23, i64 %32
  %34 = add nsw i64 %27, -1
  %35 = getelementptr double, double* %8, i64 %34
  %36 = bitcast double* %35 to i8*
  %37 = icmp ult i8* %31, %36
  %38 = icmp ugt i8* %33, %9
  %39 = and i1 %37, %38
  br i1 %39, label %63, label %40

; <label>:40:                                     ; preds = %30
  %41 = and i32 %5, 3
  %42 = zext i32 %41 to i64
  %43 = sub nsw i64 %28, %42
  %44 = add nsw i64 %43, 1
  br label %45

; <label>:45:                                     ; preds = %45, %40
  %46 = phi i64 [ 0, %40 ], [ %59, %45 ]
  %47 = or i64 %46, 1
  %48 = add nsw i64 %47, -1
  %49 = getelementptr inbounds double, double* %8, i64 %48
  %50 = bitcast double* %49 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 8, !tbaa !7, !alias.scope !267
  %52 = getelementptr inbounds double, double* %49, i64 2
  %53 = bitcast double* %52 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 8, !tbaa !7, !alias.scope !267
  %55 = getelementptr inbounds double, double* %24, i64 %47
  %56 = bitcast double* %55 to <2 x i64>*
  store <2 x i64> %51, <2 x i64>* %56, align 8, !tbaa !7, !alias.scope !270, !noalias !267
  %57 = getelementptr inbounds double, double* %55, i64 2
  %58 = bitcast double* %57 to <2 x i64>*
  store <2 x i64> %54, <2 x i64>* %58, align 8, !tbaa !7, !alias.scope !270, !noalias !267
  %59 = add i64 %46, 4
  %60 = icmp eq i64 %59, %43
  br i1 %60, label %61, label %45, !llvm.loop !272

; <label>:61:                                     ; preds = %45
  %62 = icmp eq i32 %41, 0
  br i1 %62, label %113, label %63

; <label>:63:                                     ; preds = %61, %30, %26
  %64 = phi i64 [ 1, %30 ], [ 1, %26 ], [ %44, %61 ]
  %65 = sub nsw i64 %27, %64
  %66 = xor i64 %64, -1
  %67 = add nsw i64 %66, %27
  %68 = and i64 %65, 3
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %82, label %70

; <label>:70:                                     ; preds = %63, %70
  %71 = phi i64 [ %79, %70 ], [ %64, %63 ]
  %72 = phi i64 [ %80, %70 ], [ %68, %63 ]
  %73 = add nsw i64 %71, -1
  %74 = getelementptr inbounds double, double* %8, i64 %73
  %75 = bitcast double* %74 to i64*
  %76 = load i64, i64* %75, align 8, !tbaa !7
  %77 = getelementptr inbounds double, double* %24, i64 %71
  %78 = bitcast double* %77 to i64*
  store i64 %76, i64* %78, align 8, !tbaa !7
  %79 = add nuw nsw i64 %71, 1
  %80 = add i64 %72, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %70, !llvm.loop !273

; <label>:82:                                     ; preds = %70, %63
  %83 = phi i64 [ %64, %63 ], [ %79, %70 ]
  %84 = icmp ult i64 %67, 3
  br i1 %84, label %113, label %85

; <label>:85:                                     ; preds = %82, %85
  %86 = phi i64 [ %111, %85 ], [ %83, %82 ]
  %87 = add nsw i64 %86, -1
  %88 = getelementptr inbounds double, double* %8, i64 %87
  %89 = bitcast double* %88 to i64*
  %90 = load i64, i64* %89, align 8, !tbaa !7
  %91 = getelementptr inbounds double, double* %24, i64 %86
  %92 = bitcast double* %91 to i64*
  store i64 %90, i64* %92, align 8, !tbaa !7
  %93 = add nuw nsw i64 %86, 1
  %94 = getelementptr inbounds double, double* %8, i64 %86
  %95 = bitcast double* %94 to i64*
  %96 = load i64, i64* %95, align 8, !tbaa !7
  %97 = getelementptr inbounds double, double* %24, i64 %93
  %98 = bitcast double* %97 to i64*
  store i64 %96, i64* %98, align 8, !tbaa !7
  %99 = add nsw i64 %86, 2
  %100 = getelementptr inbounds double, double* %8, i64 %93
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8, !tbaa !7
  %103 = getelementptr inbounds double, double* %24, i64 %99
  %104 = bitcast double* %103 to i64*
  store i64 %102, i64* %104, align 8, !tbaa !7
  %105 = add nsw i64 %86, 3
  %106 = getelementptr inbounds double, double* %8, i64 %99
  %107 = bitcast double* %106 to i64*
  %108 = load i64, i64* %107, align 8, !tbaa !7
  %109 = getelementptr inbounds double, double* %24, i64 %105
  %110 = bitcast double* %109 to i64*
  store i64 %108, i64* %110, align 8, !tbaa !7
  %111 = add nsw i64 %86, 4
  %112 = icmp eq i64 %111, %27
  br i1 %112, label %113, label %85, !llvm.loop !274

; <label>:113:                                    ; preds = %82, %85, %61, %3
  %114 = icmp sgt i32 %4, 0
  br i1 %114, label %115, label %616

; <label>:115:                                    ; preds = %113
  %116 = add nsw i32 %5, %4
  %117 = add i32 %4, 1
  %118 = icmp slt i32 %116, %117
  %119 = select i1 %118, i32 %117, i32 %116
  %120 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %119, i32 %119) #7
  %121 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %120) #7
  %122 = sext i32 %119 to i64
  %123 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %122) #7
  %124 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %123) #7
  %125 = tail call double* @REAL(%struct.SEXPREC* %121) #7
  %126 = tail call double* @REAL(%struct.SEXPREC* %124) #7
  %127 = sext i32 %117 to i64
  %128 = tail call i8* @R_alloc(i64 %127, i32 8) #7
  %129 = bitcast i8* %128 to double*
  store double 1.000000e+00, double* %129, align 8, !tbaa !7
  %130 = zext i32 %117 to i64
  %131 = add nsw i64 %130, -1
  %132 = icmp ult i64 %131, 4
  br i1 %132, label %168, label %133

; <label>:133:                                    ; preds = %115
  %134 = getelementptr i8, i8* %128, i64 8
  %135 = shl nuw nsw i64 %130, 3
  %136 = getelementptr i8, i8* %128, i64 %135
  %137 = add nsw i64 %130, -1
  %138 = getelementptr double, double* %6, i64 %137
  %139 = bitcast double* %138 to i8*
  %140 = icmp ult i8* %134, %139
  %141 = icmp ugt i8* %136, %7
  %142 = and i1 %140, %141
  br i1 %142, label %168, label %143

; <label>:143:                                    ; preds = %133
  %144 = and i32 %4, 3
  %145 = zext i32 %144 to i64
  %146 = sub nsw i64 %131, %145
  %147 = add nsw i64 %146, 1
  br label %148

; <label>:148:                                    ; preds = %148, %143
  %149 = phi i64 [ 0, %143 ], [ %164, %148 ]
  %150 = or i64 %149, 1
  %151 = add nsw i64 %150, -1
  %152 = getelementptr inbounds double, double* %6, i64 %151
  %153 = bitcast double* %152 to <2 x double>*
  %154 = load <2 x double>, <2 x double>* %153, align 8, !tbaa !7, !alias.scope !275
  %155 = getelementptr inbounds double, double* %152, i64 2
  %156 = bitcast double* %155 to <2 x double>*
  %157 = load <2 x double>, <2 x double>* %156, align 8, !tbaa !7, !alias.scope !275
  %158 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %154
  %159 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %157
  %160 = getelementptr inbounds double, double* %129, i64 %150
  %161 = bitcast double* %160 to <2 x double>*
  store <2 x double> %158, <2 x double>* %161, align 8, !tbaa !7, !alias.scope !278, !noalias !275
  %162 = getelementptr inbounds double, double* %160, i64 2
  %163 = bitcast double* %162 to <2 x double>*
  store <2 x double> %159, <2 x double>* %163, align 8, !tbaa !7, !alias.scope !278, !noalias !275
  %164 = add i64 %149, 4
  %165 = icmp eq i64 %164, %146
  br i1 %165, label %166, label %148, !llvm.loop !280

; <label>:166:                                    ; preds = %148
  %167 = icmp eq i32 %144, 0
  br i1 %167, label %213, label %168

; <label>:168:                                    ; preds = %166, %133, %115
  %169 = phi i64 [ 1, %133 ], [ 1, %115 ], [ %147, %166 ]
  %170 = sub nsw i64 %130, %169
  %171 = xor i64 %169, -1
  %172 = add nsw i64 %171, %130
  %173 = and i64 %170, 3
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %186, label %175

; <label>:175:                                    ; preds = %168, %175
  %176 = phi i64 [ %183, %175 ], [ %169, %168 ]
  %177 = phi i64 [ %184, %175 ], [ %173, %168 ]
  %178 = add nsw i64 %176, -1
  %179 = getelementptr inbounds double, double* %6, i64 %178
  %180 = load double, double* %179, align 8, !tbaa !7
  %181 = fsub double -0.000000e+00, %180
  %182 = getelementptr inbounds double, double* %129, i64 %176
  store double %181, double* %182, align 8, !tbaa !7
  %183 = add nuw nsw i64 %176, 1
  %184 = add i64 %177, -1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %175, !llvm.loop !281

; <label>:186:                                    ; preds = %175, %168
  %187 = phi i64 [ %169, %168 ], [ %183, %175 ]
  %188 = icmp ult i64 %172, 3
  br i1 %188, label %213, label %189

; <label>:189:                                    ; preds = %186, %189
  %190 = phi i64 [ %211, %189 ], [ %187, %186 ]
  %191 = add nsw i64 %190, -1
  %192 = getelementptr inbounds double, double* %6, i64 %191
  %193 = load double, double* %192, align 8, !tbaa !7
  %194 = fsub double -0.000000e+00, %193
  %195 = getelementptr inbounds double, double* %129, i64 %190
  store double %194, double* %195, align 8, !tbaa !7
  %196 = add nuw nsw i64 %190, 1
  %197 = getelementptr inbounds double, double* %6, i64 %190
  %198 = load double, double* %197, align 8, !tbaa !7
  %199 = fsub double -0.000000e+00, %198
  %200 = getelementptr inbounds double, double* %129, i64 %196
  store double %199, double* %200, align 8, !tbaa !7
  %201 = add nsw i64 %190, 2
  %202 = getelementptr inbounds double, double* %6, i64 %196
  %203 = load double, double* %202, align 8, !tbaa !7
  %204 = fsub double -0.000000e+00, %203
  %205 = getelementptr inbounds double, double* %129, i64 %201
  store double %204, double* %205, align 8, !tbaa !7
  %206 = add nsw i64 %190, 3
  %207 = getelementptr inbounds double, double* %6, i64 %201
  %208 = load double, double* %207, align 8, !tbaa !7
  %209 = fsub double -0.000000e+00, %208
  %210 = getelementptr inbounds double, double* %129, i64 %206
  store double %209, double* %210, align 8, !tbaa !7
  %211 = add nsw i64 %190, 4
  %212 = icmp eq i64 %211, %130
  br i1 %212, label %213, label %189, !llvm.loop !282

; <label>:213:                                    ; preds = %186, %189, %166
  %214 = bitcast double* %125 to i8*
  %215 = mul nsw i32 %119, %119
  %216 = zext i32 %215 to i64
  %217 = shl nuw nsw i64 %216, 3
  %218 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %214, i1 false, i1 true)
  %219 = tail call i8* @__memset_chk(i8* %214, i32 0, i64 %217, i64 %218) #7
  %220 = icmp sgt i32 %119, 0
  br i1 %220, label %221, label %269

; <label>:221:                                    ; preds = %213
  %222 = sext i32 %4 to i64
  br label %223

; <label>:223:                                    ; preds = %266, %221
  %224 = phi i64 [ 0, %221 ], [ %267, %266 ]
  %225 = mul nsw i64 %224, %122
  br label %253

; <label>:226:                                    ; preds = %266
  %227 = xor i1 %220, true
  %228 = icmp eq i32 %119, 1
  %229 = or i1 %228, %227
  br i1 %229, label %269, label %230

; <label>:230:                                    ; preds = %226, %250
  %231 = phi i64 [ %251, %250 ], [ 0, %226 ]
  %232 = trunc i64 %231 to i32
  br label %233

; <label>:233:                                    ; preds = %230, %238
  %234 = phi i64 [ 1, %230 ], [ %248, %238 ]
  %235 = add nuw nsw i64 %234, %231
  %236 = trunc i64 %235 to i32
  %237 = icmp slt i32 %4, %236
  br i1 %237, label %250, label %238

; <label>:238:                                    ; preds = %233
  %239 = getelementptr inbounds double, double* %129, i64 %235
  %240 = load double, double* %239, align 8, !tbaa !7
  %241 = trunc i64 %234 to i32
  %242 = mul nsw i32 %119, %241
  %243 = add nsw i32 %242, %232
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds double, double* %125, i64 %244
  %246 = load double, double* %245, align 8, !tbaa !7
  %247 = fadd double %240, %246
  store double %247, double* %245, align 8, !tbaa !7
  %248 = add nuw nsw i64 %234, 1
  %249 = icmp slt i64 %248, %122
  br i1 %249, label %233, label %250

; <label>:250:                                    ; preds = %238, %233
  %251 = add nuw nsw i64 %231, 1
  %252 = icmp slt i64 %251, %122
  br i1 %252, label %230, label %270

; <label>:253:                                    ; preds = %223, %257
  %254 = phi i64 [ %224, %223 ], [ %264, %257 ]
  %255 = sub nuw nsw i64 %254, %224
  %256 = icmp sgt i64 %255, %222
  br i1 %256, label %266, label %257

; <label>:257:                                    ; preds = %253
  %258 = getelementptr inbounds double, double* %129, i64 %255
  %259 = load double, double* %258, align 8, !tbaa !7
  %260 = add nsw i64 %254, %225
  %261 = getelementptr inbounds double, double* %125, i64 %260
  %262 = load double, double* %261, align 8, !tbaa !7
  %263 = fadd double %259, %262
  store double %263, double* %261, align 8, !tbaa !7
  %264 = add nuw nsw i64 %254, 1
  %265 = icmp slt i64 %264, %122
  br i1 %265, label %253, label %266

; <label>:266:                                    ; preds = %257, %253
  %267 = add nuw nsw i64 %224, 1
  %268 = icmp slt i64 %267, %122
  br i1 %268, label %223, label %226

; <label>:269:                                    ; preds = %226, %213
  store double 1.000000e+00, double* %126, align 8, !tbaa !7
  br label %278

; <label>:270:                                    ; preds = %250
  store double 1.000000e+00, double* %126, align 8, !tbaa !7
  %271 = icmp sgt i32 %119, 1
  br i1 %271, label %272, label %278

; <label>:272:                                    ; preds = %270
  %273 = getelementptr double, double* %126, i64 1
  %274 = bitcast double* %273 to i8*
  %275 = add i32 %119, -1
  %276 = zext i32 %275 to i64
  %277 = shl nuw nsw i64 %276, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %274, i8 0, i64 %277, i1 false)
  br label %278

; <label>:278:                                    ; preds = %269, %272, %270
  %279 = tail call %struct.SEXPREC* @Rf_install(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0)) #7
  %280 = tail call %struct.SEXPREC* @Rf_lang4(%struct.SEXPREC* %279, %struct.SEXPREC* %121, %struct.SEXPREC* %124, %struct.SEXPREC* %2) #7
  %281 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %280) #7
  %282 = load %struct.SEXPREC*, %struct.SEXPREC** @R_BaseEnv, align 8, !tbaa !3
  %283 = tail call %struct.SEXPREC* @Rf_eval(%struct.SEXPREC* %281, %struct.SEXPREC* %282) #7
  %284 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %283) #7
  %285 = tail call double* @REAL(%struct.SEXPREC* %284) #7
  %286 = icmp sgt i32 %12, 0
  br i1 %286, label %289, label %287

; <label>:287:                                    ; preds = %278
  %288 = sext i32 %5 to i64
  br label %383

; <label>:289:                                    ; preds = %278
  %290 = icmp slt i32 %5, 0
  %291 = sext i32 %5 to i64
  %292 = sext i32 %12 to i64
  %293 = sext i32 %4 to i64
  br label %294

; <label>:294:                                    ; preds = %379, %289
  %295 = phi i32 [ %4, %289 ], [ %382, %379 ]
  %296 = phi i64 [ 0, %289 ], [ %380, %379 ]
  %297 = icmp slt i64 %296, %293
  %298 = mul nsw i64 %296, %292
  %299 = zext i32 %295 to i64
  br label %300

; <label>:300:                                    ; preds = %294, %366
  %301 = phi i32 [ %295, %294 ], [ %369, %366 ]
  %302 = phi i64 [ %296, %294 ], [ %367, %366 ]
  br i1 %297, label %303, label %366

; <label>:303:                                    ; preds = %300
  %304 = icmp slt i64 %302, %293
  %305 = add nsw i64 %302, %298
  %306 = getelementptr inbounds double, double* %15, i64 %305
  %307 = zext i32 %301 to i64
  br label %308

; <label>:308:                                    ; preds = %375, %303
  %309 = phi i64 [ %296, %303 ], [ %377, %375 ]
  %310 = phi i64 [ 0, %303 ], [ %376, %375 ]
  br i1 %290, label %375, label %311

; <label>:311:                                    ; preds = %308
  %312 = getelementptr inbounds double, double* %6, i64 %309
  br i1 %304, label %315, label %313

; <label>:313:                                    ; preds = %311
  %314 = trunc i64 %310 to i32
  br label %370

; <label>:315:                                    ; preds = %311, %362
  %316 = phi i64 [ %363, %362 ], [ %310, %311 ]
  %317 = phi i64 [ %364, %362 ], [ 0, %311 ]
  %318 = shl i64 %317, 32
  %319 = ashr exact i64 %318, 32
  %320 = getelementptr inbounds double, double* %24, i64 %319
  %321 = load double, double* %306, align 8, !tbaa !7
  %322 = trunc i64 %316 to i32
  br label %352

; <label>:323:                                    ; preds = %352, %323
  %324 = phi double [ %353, %352 ], [ %347, %323 ]
  %325 = phi i64 [ %355, %352 ], [ %348, %323 ]
  %326 = phi i64 [ 0, %352 ], [ %350, %323 ]
  %327 = phi i32 [ %357, %352 ], [ %349, %323 ]
  %328 = load double, double* %312, align 8, !tbaa !7
  %329 = load double, double* %356, align 8, !tbaa !7
  %330 = fmul double %328, %329
  %331 = load double, double* %320, align 8, !tbaa !7
  %332 = fmul double %330, %331
  %333 = shl i64 %326, 32
  %334 = ashr exact i64 %333, 32
  %335 = getelementptr inbounds double, double* %24, i64 %334
  %336 = load double, double* %335, align 8, !tbaa !7
  %337 = fmul double %332, %336
  %338 = sub nsw i64 %316, %325
  %339 = icmp slt i64 %338, 0
  %340 = sub i32 %327, %322
  %341 = trunc i64 %338 to i32
  %342 = select i1 %339, i32 %340, i32 %341
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds double, double* %285, i64 %343
  %345 = load double, double* %344, align 8, !tbaa !7
  %346 = fmul double %337, %345
  %347 = fadd double %324, %346
  store double %347, double* %306, align 8, !tbaa !7
  %348 = add nuw nsw i64 %325, 1
  %349 = add nuw nsw i32 %327, 1
  %350 = sub nsw i64 %348, %355
  %351 = icmp sgt i64 %350, %291
  br i1 %351, label %358, label %323

; <label>:352:                                    ; preds = %358, %315
  %353 = phi double [ %321, %315 ], [ %347, %358 ]
  %354 = phi i64 [ %302, %315 ], [ %360, %358 ]
  %355 = phi i64 [ 0, %315 ], [ %359, %358 ]
  %356 = getelementptr inbounds double, double* %6, i64 %354
  %357 = trunc i64 %355 to i32
  br label %323

; <label>:358:                                    ; preds = %323
  %359 = add nuw nsw i64 %355, 1
  %360 = add nuw nsw i64 %354, 1
  %361 = icmp eq i64 %359, %307
  br i1 %361, label %362, label %352

; <label>:362:                                    ; preds = %358
  %363 = add nuw nsw i64 %316, 1
  %364 = sub nsw i64 %363, %310
  %365 = icmp sgt i64 %364, %291
  br i1 %365, label %375, label %315

; <label>:366:                                    ; preds = %375, %300
  %367 = add nuw nsw i64 %302, 1
  %368 = icmp slt i64 %367, %292
  %369 = add i32 %301, -1
  br i1 %368, label %300, label %379

; <label>:370:                                    ; preds = %313, %370
  %371 = phi i32 [ %372, %370 ], [ %314, %313 ]
  %372 = add nuw nsw i32 %371, 1
  %373 = sub nsw i32 %372, %314
  %374 = icmp sgt i32 %373, %5
  br i1 %374, label %375, label %370

; <label>:375:                                    ; preds = %370, %362, %308
  %376 = add nuw nsw i64 %310, 1
  %377 = add nuw nsw i64 %309, 1
  %378 = icmp eq i64 %376, %299
  br i1 %378, label %366, label %308

; <label>:379:                                    ; preds = %366
  %380 = add nuw nsw i64 %296, 1
  %381 = icmp slt i64 %380, %292
  %382 = add i32 %295, -1
  br i1 %381, label %294, label %383

; <label>:383:                                    ; preds = %379, %287
  %384 = phi i64 [ %288, %287 ], [ %291, %379 ]
  tail call void @Rf_unprotect(i32 4) #7
  %385 = tail call i8* @R_alloc(i64 %384, i32 8) #7
  %386 = bitcast i8* %385 to double*
  %387 = icmp sgt i32 %5, 0
  br i1 %387, label %388, label %462

; <label>:388:                                    ; preds = %383
  %389 = sub i32 0, %4
  %390 = zext i32 %5 to i64
  br label %391

; <label>:391:                                    ; preds = %458, %388
  %392 = phi i64 [ 0, %388 ], [ %459, %458 ]
  %393 = phi i32 [ %389, %388 ], [ %460, %458 ]
  %394 = trunc i64 %392 to i32
  %395 = sub i32 %394, %4
  %396 = icmp sgt i32 %395, 0
  %397 = select i1 %396, i32 %395, i32 0
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds double, double* %24, i64 %392
  %400 = bitcast double* %399 to i64*
  %401 = load i64, i64* %400, align 8, !tbaa !7
  %402 = getelementptr inbounds double, double* %386, i64 %392
  %403 = bitcast double* %402 to i64*
  store i64 %401, i64* %403, align 8, !tbaa !7
  %404 = trunc i64 %392 to i32
  %405 = sub nsw i32 %404, %4
  %406 = icmp sgt i32 %405, 0
  %407 = select i1 %406, i32 %405, i32 0
  %408 = zext i32 %407 to i64
  %409 = icmp ugt i64 %392, %408
  br i1 %409, label %410, label %458

; <label>:410:                                    ; preds = %391
  %411 = sub nsw i64 %392, %398
  %412 = bitcast i64 %401 to double
  %413 = icmp sgt i32 %393, 0
  %414 = select i1 %413, i32 %393, i32 0
  %415 = zext i32 %414 to i64
  %416 = and i64 %411, 1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %429, label %418

; <label>:418:                                    ; preds = %410
  %419 = getelementptr inbounds double, double* %386, i64 %415
  %420 = load double, double* %419, align 8, !tbaa !7
  %421 = sub nsw i64 %392, %415
  %422 = shl i64 %421, 32
  %423 = ashr exact i64 %422, 32
  %424 = getelementptr inbounds double, double* %129, i64 %423
  %425 = load double, double* %424, align 8, !tbaa !7
  %426 = fmul double %420, %425
  %427 = fsub double %412, %426
  store double %427, double* %402, align 8, !tbaa !7
  %428 = add nuw nsw i64 %415, 1
  br label %429

; <label>:429:                                    ; preds = %418, %410
  %430 = phi double [ %427, %418 ], [ %412, %410 ]
  %431 = phi i64 [ %428, %418 ], [ %415, %410 ]
  %432 = add nuw nsw i64 %398, 1
  %433 = icmp eq i64 %392, %432
  br i1 %433, label %458, label %434

; <label>:434:                                    ; preds = %429, %434
  %435 = phi double [ %455, %434 ], [ %430, %429 ]
  %436 = phi i64 [ %456, %434 ], [ %431, %429 ]
  %437 = getelementptr inbounds double, double* %386, i64 %436
  %438 = load double, double* %437, align 8, !tbaa !7
  %439 = sub nsw i64 %392, %436
  %440 = shl i64 %439, 32
  %441 = ashr exact i64 %440, 32
  %442 = getelementptr inbounds double, double* %129, i64 %441
  %443 = load double, double* %442, align 8, !tbaa !7
  %444 = fmul double %438, %443
  %445 = fsub double %435, %444
  store double %445, double* %402, align 8, !tbaa !7
  %446 = add nuw nsw i64 %436, 1
  %447 = getelementptr inbounds double, double* %386, i64 %446
  %448 = load double, double* %447, align 8, !tbaa !7
  %449 = sub nsw i64 %392, %446
  %450 = shl i64 %449, 32
  %451 = ashr exact i64 %450, 32
  %452 = getelementptr inbounds double, double* %129, i64 %451
  %453 = load double, double* %452, align 8, !tbaa !7
  %454 = fmul double %448, %453
  %455 = fsub double %445, %454
  store double %455, double* %402, align 8, !tbaa !7
  %456 = add nsw i64 %436, 2
  %457 = icmp ugt i64 %392, %456
  br i1 %457, label %434, label %458

; <label>:458:                                    ; preds = %429, %434, %391
  %459 = add nuw nsw i64 %392, 1
  %460 = add i32 %393, 1
  %461 = icmp eq i64 %459, %390
  br i1 %461, label %462, label %391

; <label>:462:                                    ; preds = %458, %383
  br i1 %286, label %463, label %727

; <label>:463:                                    ; preds = %462
  %464 = sext i32 %4 to i64
  %465 = sext i32 %12 to i64
  br label %466

; <label>:466:                                    ; preds = %612, %463
  %467 = phi i32 [ %4, %463 ], [ %615, %612 ]
  %468 = phi i64 [ 0, %463 ], [ %613, %612 ]
  %469 = icmp slt i64 %468, %464
  %470 = mul nsw i64 %468, %465
  br i1 %469, label %471, label %562

; <label>:471:                                    ; preds = %466
  %472 = zext i32 %467 to i64
  br label %473

; <label>:473:                                    ; preds = %471, %478
  %474 = phi i32 [ %467, %471 ], [ %481, %478 ]
  %475 = phi i64 [ %468, %471 ], [ %479, %478 ]
  %476 = add nsw i64 %475, %470
  %477 = getelementptr inbounds double, double* %15, i64 %476
  br label %512

; <label>:478:                                    ; preds = %542, %554
  %479 = add nuw nsw i64 %475, 1
  %480 = icmp slt i64 %479, %465
  %481 = add i32 %474, -1
  br i1 %480, label %473, label %612

; <label>:482:                                    ; preds = %542, %560
  %483 = phi i64 [ 0, %560 ], [ %487, %542 ]
  %484 = phi i64 [ %475, %560 ], [ %544, %542 ]
  %485 = phi i64 [ 1, %560 ], [ %543, %542 ]
  %486 = phi i32 [ 0, %560 ], [ %488, %542 ]
  %487 = add nuw nsw i64 %483, 1
  %488 = add nuw nsw i32 %486, 1
  %489 = add nuw nsw i64 %487, %468
  %490 = trunc i64 %489 to i32
  %491 = icmp slt i32 %5, %490
  br i1 %491, label %542, label %556

; <label>:492:                                    ; preds = %556, %492
  %493 = phi double [ %559, %556 ], [ %508, %492 ]
  %494 = phi i64 [ %485, %556 ], [ %509, %492 ]
  %495 = phi i64 [ %489, %556 ], [ %510, %492 ]
  %496 = load double, double* %557, align 8, !tbaa !7
  %497 = shl i64 %495, 32
  %498 = ashr exact i64 %497, 32
  %499 = getelementptr inbounds double, double* %24, i64 %498
  %500 = load double, double* %499, align 8, !tbaa !7
  %501 = fmul double %496, %500
  %502 = trunc i64 %494 to i32
  %503 = add i32 %502, %558
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds double, double* %386, i64 %504
  %506 = load double, double* %505, align 8, !tbaa !7
  %507 = fmul double %501, %506
  %508 = fadd double %493, %507
  store double %508, double* %477, align 8, !tbaa !7
  %509 = add nuw nsw i64 %494, 1
  %510 = add nuw nsw i64 %509, %468
  %511 = icmp sgt i64 %510, %384
  br i1 %511, label %542, label %492

; <label>:512:                                    ; preds = %546, %473
  %513 = phi i64 [ 0, %473 ], [ %517, %546 ]
  %514 = phi i64 [ %468, %473 ], [ %548, %546 ]
  %515 = phi i64 [ 1, %473 ], [ %547, %546 ]
  %516 = phi i32 [ 0, %473 ], [ %518, %546 ]
  %517 = add nuw nsw i64 %513, 1
  %518 = add nuw nsw i32 %516, 1
  %519 = add nuw nsw i64 %517, %475
  %520 = trunc i64 %519 to i32
  %521 = icmp slt i32 %5, %520
  br i1 %521, label %546, label %550

; <label>:522:                                    ; preds = %550, %522
  %523 = phi double [ %553, %550 ], [ %538, %522 ]
  %524 = phi i64 [ %515, %550 ], [ %539, %522 ]
  %525 = phi i64 [ %519, %550 ], [ %540, %522 ]
  %526 = load double, double* %551, align 8, !tbaa !7
  %527 = shl i64 %525, 32
  %528 = ashr exact i64 %527, 32
  %529 = getelementptr inbounds double, double* %24, i64 %528
  %530 = load double, double* %529, align 8, !tbaa !7
  %531 = fmul double %526, %530
  %532 = trunc i64 %524 to i32
  %533 = add i32 %532, %552
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds double, double* %386, i64 %534
  %536 = load double, double* %535, align 8, !tbaa !7
  %537 = fmul double %531, %536
  %538 = fadd double %523, %537
  store double %538, double* %477, align 8, !tbaa !7
  %539 = add nuw nsw i64 %524, 1
  %540 = add nuw nsw i64 %539, %475
  %541 = icmp sgt i64 %540, %384
  br i1 %541, label %546, label %522

; <label>:542:                                    ; preds = %492, %482
  %543 = add nuw nsw i64 %485, 1
  %544 = add nuw nsw i64 %484, 1
  %545 = icmp eq i64 %487, %561
  br i1 %545, label %478, label %482

; <label>:546:                                    ; preds = %522, %512
  %547 = add nuw nsw i64 %515, 1
  %548 = add nuw nsw i64 %514, 1
  %549 = icmp eq i64 %517, %472
  br i1 %549, label %554, label %512

; <label>:550:                                    ; preds = %512
  %551 = getelementptr inbounds double, double* %6, i64 %514
  %552 = xor i32 %516, -1
  %553 = load double, double* %477, align 8, !tbaa !7
  br label %522

; <label>:554:                                    ; preds = %546
  %555 = icmp slt i64 %475, %464
  br i1 %555, label %560, label %478

; <label>:556:                                    ; preds = %482
  %557 = getelementptr inbounds double, double* %6, i64 %484
  %558 = xor i32 %486, -1
  %559 = load double, double* %477, align 8, !tbaa !7
  br label %492

; <label>:560:                                    ; preds = %554
  %561 = zext i32 %474 to i64
  br label %482

; <label>:562:                                    ; preds = %466, %608
  %563 = phi i32 [ %611, %608 ], [ %467, %466 ]
  %564 = phi i64 [ %609, %608 ], [ %468, %466 ]
  %565 = icmp slt i64 %564, %464
  br i1 %565, label %566, label %608

; <label>:566:                                    ; preds = %562
  %567 = add nsw i64 %564, %470
  %568 = getelementptr inbounds double, double* %15, i64 %567
  %569 = zext i32 %563 to i64
  br label %574

; <label>:570:                                    ; preds = %588, %574
  %571 = add nuw nsw i64 %577, 1
  %572 = add nuw nsw i64 %576, 1
  %573 = icmp eq i64 %579, %569
  br i1 %573, label %608, label %574

; <label>:574:                                    ; preds = %570, %566
  %575 = phi i64 [ 0, %566 ], [ %579, %570 ]
  %576 = phi i64 [ %564, %566 ], [ %572, %570 ]
  %577 = phi i64 [ 1, %566 ], [ %571, %570 ]
  %578 = phi i32 [ 0, %566 ], [ %580, %570 ]
  %579 = add nuw nsw i64 %575, 1
  %580 = add nuw nsw i32 %578, 1
  %581 = add nuw nsw i64 %579, %468
  %582 = trunc i64 %581 to i32
  %583 = icmp slt i32 %5, %582
  br i1 %583, label %570, label %584

; <label>:584:                                    ; preds = %574
  %585 = getelementptr inbounds double, double* %6, i64 %576
  %586 = xor i32 %578, -1
  %587 = load double, double* %568, align 8, !tbaa !7
  br label %588

; <label>:588:                                    ; preds = %584, %588
  %589 = phi double [ %587, %584 ], [ %604, %588 ]
  %590 = phi i64 [ %577, %584 ], [ %605, %588 ]
  %591 = phi i64 [ %581, %584 ], [ %606, %588 ]
  %592 = load double, double* %585, align 8, !tbaa !7
  %593 = shl i64 %591, 32
  %594 = ashr exact i64 %593, 32
  %595 = getelementptr inbounds double, double* %24, i64 %594
  %596 = load double, double* %595, align 8, !tbaa !7
  %597 = fmul double %592, %596
  %598 = trunc i64 %590 to i32
  %599 = add i32 %598, %586
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds double, double* %386, i64 %600
  %602 = load double, double* %601, align 8, !tbaa !7
  %603 = fmul double %597, %602
  %604 = fadd double %589, %603
  store double %604, double* %568, align 8, !tbaa !7
  %605 = add nuw nsw i64 %590, 1
  %606 = add nuw nsw i64 %605, %468
  %607 = icmp sgt i64 %606, %384
  br i1 %607, label %570, label %588

; <label>:608:                                    ; preds = %570, %562
  %609 = add nuw nsw i64 %564, 1
  %610 = icmp slt i64 %609, %465
  %611 = add i32 %563, -1
  br i1 %610, label %562, label %612

; <label>:612:                                    ; preds = %608, %478
  %613 = add nuw nsw i64 %468, 1
  %614 = icmp slt i64 %613, %465
  %615 = add i32 %467, -1
  br i1 %614, label %466, label %616

; <label>:616:                                    ; preds = %612, %113
  %617 = icmp sgt i32 %12, 0
  br i1 %617, label %618, label %727

; <label>:618:                                    ; preds = %616
  %619 = sext i32 %5 to i64
  %620 = sext i32 %12 to i64
  br label %621

; <label>:621:                                    ; preds = %654, %618
  %622 = phi i64 [ 0, %618 ], [ %655, %654 ]
  %623 = mul nsw i64 %622, %620
  br label %628

; <label>:624:                                    ; preds = %654
  br i1 %617, label %625, label %727

; <label>:625:                                    ; preds = %624
  %626 = sext i32 %12 to i64
  %627 = add nsw i64 %626, -2
  br label %659

; <label>:628:                                    ; preds = %621, %635
  %629 = phi i64 [ %622, %621 ], [ %636, %635 ]
  %630 = icmp sgt i64 %629, %619
  br i1 %630, label %635, label %631

; <label>:631:                                    ; preds = %628
  %632 = add nsw i64 %629, %623
  %633 = getelementptr inbounds double, double* %15, i64 %632
  %634 = load double, double* %633, align 8, !tbaa !7
  br label %638

; <label>:635:                                    ; preds = %638, %628
  %636 = add nuw nsw i64 %629, 1
  %637 = icmp slt i64 %636, %620
  br i1 %637, label %628, label %654

; <label>:638:                                    ; preds = %631, %638
  %639 = phi double [ %634, %631 ], [ %649, %638 ]
  %640 = phi i64 [ 0, %631 ], [ %650, %638 ]
  %641 = phi i64 [ %629, %631 ], [ %651, %638 ]
  %642 = add nuw nsw i64 %640, %622
  %643 = getelementptr inbounds double, double* %24, i64 %642
  %644 = load double, double* %643, align 8, !tbaa !7
  %645 = and i64 %641, 4294967295
  %646 = getelementptr inbounds double, double* %24, i64 %645
  %647 = load double, double* %646, align 8, !tbaa !7
  %648 = fmul double %644, %647
  %649 = fadd double %639, %648
  store double %649, double* %633, align 8, !tbaa !7
  %650 = add nuw i64 %640, 1
  %651 = add nuw nsw i64 %650, %629
  %652 = trunc i64 %651 to i32
  %653 = icmp slt i32 %5, %652
  br i1 %653, label %635, label %638

; <label>:654:                                    ; preds = %635
  %655 = add nuw nsw i64 %622, 1
  %656 = icmp slt i64 %655, %620
  br i1 %656, label %621, label %624

; <label>:657:                                    ; preds = %688, %685
  %658 = add nuw nsw i64 %661, 1
  br i1 %664, label %659, label %727

; <label>:659:                                    ; preds = %625, %657
  %660 = phi i64 [ 0, %625 ], [ %663, %657 ]
  %661 = phi i64 [ 1, %625 ], [ %658, %657 ]
  %662 = sub i64 %627, %660
  %663 = add nuw nsw i64 %660, 1
  %664 = icmp slt i64 %663, %626
  br i1 %664, label %665, label %727

; <label>:665:                                    ; preds = %659
  %666 = xor i64 %660, 3
  %667 = add i64 %666, %626
  %668 = mul nsw i64 %660, %626
  %669 = and i64 %667, 3
  %670 = icmp eq i64 %669, 0
  br i1 %670, label %685, label %671

; <label>:671:                                    ; preds = %665, %671
  %672 = phi i64 [ %682, %671 ], [ %661, %665 ]
  %673 = phi i64 [ %683, %671 ], [ %669, %665 ]
  %674 = add nsw i64 %672, %668
  %675 = getelementptr inbounds double, double* %15, i64 %674
  %676 = bitcast double* %675 to i64*
  %677 = load i64, i64* %676, align 8, !tbaa !7
  %678 = mul nsw i64 %672, %626
  %679 = add nsw i64 %678, %660
  %680 = getelementptr inbounds double, double* %15, i64 %679
  %681 = bitcast double* %680 to i64*
  store i64 %677, i64* %681, align 8, !tbaa !7
  %682 = add nuw nsw i64 %672, 1
  %683 = add i64 %673, -1
  %684 = icmp eq i64 %683, 0
  br i1 %684, label %685, label %671, !llvm.loop !283

; <label>:685:                                    ; preds = %671, %665
  %686 = phi i64 [ %661, %665 ], [ %682, %671 ]
  %687 = icmp ult i64 %662, 3
  br i1 %687, label %657, label %688

; <label>:688:                                    ; preds = %685, %688
  %689 = phi i64 [ %725, %688 ], [ %686, %685 ]
  %690 = add nsw i64 %689, %668
  %691 = getelementptr inbounds double, double* %15, i64 %690
  %692 = bitcast double* %691 to i64*
  %693 = load i64, i64* %692, align 8, !tbaa !7
  %694 = mul nsw i64 %689, %626
  %695 = add nsw i64 %694, %660
  %696 = getelementptr inbounds double, double* %15, i64 %695
  %697 = bitcast double* %696 to i64*
  store i64 %693, i64* %697, align 8, !tbaa !7
  %698 = add nuw nsw i64 %689, 1
  %699 = add nsw i64 %698, %668
  %700 = getelementptr inbounds double, double* %15, i64 %699
  %701 = bitcast double* %700 to i64*
  %702 = load i64, i64* %701, align 8, !tbaa !7
  %703 = mul nsw i64 %698, %626
  %704 = add nsw i64 %703, %660
  %705 = getelementptr inbounds double, double* %15, i64 %704
  %706 = bitcast double* %705 to i64*
  store i64 %702, i64* %706, align 8, !tbaa !7
  %707 = add nsw i64 %689, 2
  %708 = add nsw i64 %707, %668
  %709 = getelementptr inbounds double, double* %15, i64 %708
  %710 = bitcast double* %709 to i64*
  %711 = load i64, i64* %710, align 8, !tbaa !7
  %712 = mul nsw i64 %707, %626
  %713 = add nsw i64 %712, %660
  %714 = getelementptr inbounds double, double* %15, i64 %713
  %715 = bitcast double* %714 to i64*
  store i64 %711, i64* %715, align 8, !tbaa !7
  %716 = add nsw i64 %689, 3
  %717 = add nsw i64 %716, %668
  %718 = getelementptr inbounds double, double* %15, i64 %717
  %719 = bitcast double* %718 to i64*
  %720 = load i64, i64* %719, align 8, !tbaa !7
  %721 = mul nsw i64 %716, %626
  %722 = add nsw i64 %721, %660
  %723 = getelementptr inbounds double, double* %15, i64 %722
  %724 = bitcast double* %723 to i64*
  store i64 %720, i64* %724, align 8, !tbaa !7
  %725 = add nsw i64 %689, 4
  %726 = icmp slt i64 %725, %626
  br i1 %726, label %688, label %657

; <label>:727:                                    ; preds = %657, %659, %616, %462, %624
  tail call void @Rf_unprotect(i32 1) #7
  ret %struct.SEXPREC* %13
}

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1, i1) #4

declare %struct.SEXPREC* @Rf_lang4(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_eval(%struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @getQ0(%struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #0 {
  %3 = tail call i32 @LENGTH(%struct.SEXPREC* %0) #7
  %4 = tail call i32 @LENGTH(%struct.SEXPREC* %1) #7
  %5 = tail call double* @REAL(%struct.SEXPREC* %0) #7
  %6 = tail call double* @REAL(%struct.SEXPREC* %1) #7
  %7 = add nsw i32 %4, 1
  %8 = icmp slt i32 %3, %7
  %9 = select i1 %8, i32 %7, i32 %3
  %10 = add nsw i32 %9, 1
  %11 = mul nsw i32 %10, %9
  %12 = sdiv i32 %11, 2
  %13 = sext i32 %12 to i64
  %14 = add nsw i64 %13, -1
  %15 = mul nsw i64 %14, %13
  %16 = lshr i64 %15, 1
  %17 = icmp sgt i32 %9, 350
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %2
  %19 = tail call i8* @libintl_dgettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.20, i64 0, i64 0)) #7
  tail call void (i8*, ...) @Rf_error(i8* %19) #8
  unreachable

; <label>:20:                                     ; preds = %2
  %21 = tail call i8* @R_alloc(i64 %13, i32 8) #7
  %22 = bitcast i8* %21 to double*
  %23 = tail call i8* @R_alloc(i64 %13, i32 8) #7
  %24 = bitcast i8* %23 to double*
  %25 = tail call i8* @R_alloc(i64 %16, i32 8) #7
  %26 = bitcast i8* %25 to double*
  %27 = tail call i8* @R_alloc(i64 %13, i32 8) #7
  %28 = bitcast i8* %27 to double*
  %29 = tail call i8* @R_alloc(i64 %13, i32 8) #7
  %30 = bitcast i8* %29 to double*
  %31 = sext i32 %9 to i64
  %32 = icmp eq i32 %9, 0
  br i1 %32, label %93, label %33

; <label>:33:                                     ; preds = %20
  %34 = sext i32 %4 to i64
  %35 = sub nsw i64 0, %31
  br label %36

; <label>:36:                                     ; preds = %33, %89
  %37 = phi i64 [ 0, %33 ], [ %91, %89 ]
  %38 = phi i64 [ 0, %33 ], [ %90, %89 ]
  %39 = sub i64 %31, %37
  %40 = xor i64 %37, -1
  %41 = icmp eq i64 %37, 0
  br i1 %41, label %48, label %42

; <label>:42:                                     ; preds = %36
  %43 = add i64 %37, -1
  %44 = icmp ult i64 %43, %34
  br i1 %44, label %45, label %48

; <label>:45:                                     ; preds = %42
  %46 = getelementptr inbounds double, double* %6, i64 %43
  %47 = load double, double* %46, align 8, !tbaa !7
  br label %48

; <label>:48:                                     ; preds = %36, %42, %45
  %49 = phi double [ %47, %45 ], [ 0.000000e+00, %42 ], [ 1.000000e+00, %36 ]
  %50 = icmp ult i64 %37, %31
  br i1 %50, label %51, label %89

; <label>:51:                                     ; preds = %48
  %52 = and i64 %39, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %68, label %54

; <label>:54:                                     ; preds = %51
  %55 = icmp eq i64 %37, 0
  br i1 %55, label %62, label %56

; <label>:56:                                     ; preds = %54
  %57 = add i64 %37, -1
  %58 = icmp ult i64 %57, %34
  br i1 %58, label %59, label %62

; <label>:59:                                     ; preds = %56
  %60 = getelementptr inbounds double, double* %6, i64 %57
  %61 = load double, double* %60, align 8, !tbaa !7
  br label %62

; <label>:62:                                     ; preds = %59, %56, %54
  %63 = phi double [ %61, %59 ], [ 0.000000e+00, %56 ], [ 1.000000e+00, %54 ]
  %64 = fmul double %49, %63
  %65 = add i64 %38, 1
  %66 = getelementptr inbounds double, double* %30, i64 %38
  store double %64, double* %66, align 8, !tbaa !7
  %67 = add nuw i64 %37, 1
  br label %68

; <label>:68:                                     ; preds = %62, %51
  %69 = phi i64 [ %67, %62 ], [ %37, %51 ]
  %70 = phi i64 [ %65, %62 ], [ %38, %51 ]
  %71 = phi i64 [ %65, %62 ], [ undef, %51 ]
  %72 = icmp eq i64 %40, %35
  br i1 %72, label %89, label %73

; <label>:73:                                     ; preds = %68, %1242
  %74 = phi i64 [ %1247, %1242 ], [ %69, %68 ]
  %75 = phi i64 [ %1245, %1242 ], [ %70, %68 ]
  %76 = icmp eq i64 %74, 0
  br i1 %76, label %83, label %77

; <label>:77:                                     ; preds = %73
  %78 = add i64 %74, -1
  %79 = icmp ult i64 %78, %34
  br i1 %79, label %80, label %83

; <label>:80:                                     ; preds = %77
  %81 = getelementptr inbounds double, double* %6, i64 %78
  %82 = load double, double* %81, align 8, !tbaa !7
  br label %83

; <label>:83:                                     ; preds = %73, %77, %80
  %84 = phi double [ %82, %80 ], [ 0.000000e+00, %77 ], [ 1.000000e+00, %73 ]
  %85 = fmul double %49, %84
  %86 = add i64 %75, 1
  %87 = getelementptr inbounds double, double* %30, i64 %75
  store double %85, double* %87, align 8, !tbaa !7
  %88 = icmp ult i64 %74, %34
  br i1 %88, label %1239, label %1242

; <label>:89:                                     ; preds = %68, %1242, %48
  %90 = phi i64 [ %38, %48 ], [ %71, %68 ], [ %1245, %1242 ]
  %91 = add nuw i64 %37, 1
  %92 = icmp ult i64 %91, %31
  br i1 %92, label %36, label %93

; <label>:93:                                     ; preds = %89, %20
  %94 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %9, i32 %9) #7
  %95 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %94) #7
  %96 = tail call double* @REAL(%struct.SEXPREC* %94) #7
  %97 = bitcast double* %96 to i8*
  %98 = icmp eq i32 %9, 1
  br i1 %98, label %99, label %108

; <label>:99:                                     ; preds = %93
  %100 = icmp eq i32 %3, 0
  br i1 %100, label %106, label %101

; <label>:101:                                    ; preds = %99
  %102 = load double, double* %5, align 8, !tbaa !7
  %103 = fmul double %102, %102
  %104 = fsub double 1.000000e+00, %103
  %105 = fdiv double 1.000000e+00, %104
  br label %106

; <label>:106:                                    ; preds = %99, %101
  %107 = phi double [ %105, %101 ], [ 1.000000e+00, %99 ]
  store double %107, double* %96, align 8, !tbaa !7
  tail call void @Rf_unprotect(i32 1) #7
  br label %1220

; <label>:108:                                    ; preds = %93
  %109 = icmp sgt i32 %3, 0
  br i1 %109, label %111, label %110

; <label>:110:                                    ; preds = %108
  br i1 %32, label %1094, label %1034

; <label>:111:                                    ; preds = %108
  %112 = icmp eq i64 %16, 0
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %111
  %114 = shl i64 %16, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 %114, i1 false)
  br label %115

; <label>:115:                                    ; preds = %113, %111
  %116 = add i32 %11, 1
  %117 = icmp ugt i32 %116, 2
  br i1 %117, label %118, label %208

; <label>:118:                                    ; preds = %115
  %119 = icmp ugt i64 %13, 1
  %120 = select i1 %119, i64 %13, i64 1
  %121 = icmp ult i64 %120, 4
  br i1 %121, label %199, label %122

; <label>:122:                                    ; preds = %118
  %123 = icmp ugt i64 %13, 1
  %124 = select i1 %123, i64 %13, i64 1
  %125 = getelementptr double, double* %96, i64 %124
  %126 = bitcast double* %125 to i8*
  %127 = shl nsw i64 %124, 3
  %128 = getelementptr i8, i8* %27, i64 %127
  %129 = getelementptr i8, i8* %21, i64 %127
  %130 = icmp ugt i8* %128, %97
  %131 = icmp ult i8* %27, %126
  %132 = and i1 %130, %131
  %133 = icmp ugt i8* %129, %97
  %134 = icmp ult i8* %21, %126
  %135 = and i1 %133, %134
  %136 = or i1 %132, %135
  %137 = icmp ult i8* %27, %129
  %138 = icmp ult i8* %21, %128
  %139 = and i1 %137, %138
  %140 = or i1 %136, %139
  br i1 %140, label %199, label %141

; <label>:141:                                    ; preds = %122
  %142 = and i64 %120, -4
  %143 = add nsw i64 %142, -4
  %144 = lshr exact i64 %143, 2
  %145 = add nuw nsw i64 %144, 1
  %146 = and i64 %145, 1
  %147 = icmp eq i64 %143, 0
  br i1 %147, label %181, label %148

; <label>:148:                                    ; preds = %141
  %149 = sub nsw i64 %145, %146
  br label %150

; <label>:150:                                    ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %178, %150 ]
  %152 = phi i64 [ %149, %148 ], [ %179, %150 ]
  %153 = getelementptr inbounds double, double* %96, i64 %151
  %154 = bitcast double* %153 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %154, align 8, !tbaa !7, !alias.scope !284, !noalias !287
  %155 = getelementptr inbounds double, double* %153, i64 2
  %156 = bitcast double* %155 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %156, align 8, !tbaa !7, !alias.scope !284, !noalias !287
  %157 = getelementptr inbounds double, double* %28, i64 %151
  %158 = bitcast double* %157 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %158, align 8, !tbaa !7, !alias.scope !290, !noalias !291
  %159 = getelementptr inbounds double, double* %157, i64 2
  %160 = bitcast double* %159 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %160, align 8, !tbaa !7, !alias.scope !290, !noalias !291
  %161 = getelementptr inbounds double, double* %22, i64 %151
  %162 = bitcast double* %161 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %162, align 8, !tbaa !7, !alias.scope !291
  %163 = getelementptr inbounds double, double* %161, i64 2
  %164 = bitcast double* %163 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %164, align 8, !tbaa !7, !alias.scope !291
  %165 = or i64 %151, 4
  %166 = getelementptr inbounds double, double* %96, i64 %165
  %167 = bitcast double* %166 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %167, align 8, !tbaa !7, !alias.scope !284, !noalias !287
  %168 = getelementptr inbounds double, double* %166, i64 2
  %169 = bitcast double* %168 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %169, align 8, !tbaa !7, !alias.scope !284, !noalias !287
  %170 = getelementptr inbounds double, double* %28, i64 %165
  %171 = bitcast double* %170 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %171, align 8, !tbaa !7, !alias.scope !290, !noalias !291
  %172 = getelementptr inbounds double, double* %170, i64 2
  %173 = bitcast double* %172 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %173, align 8, !tbaa !7, !alias.scope !290, !noalias !291
  %174 = getelementptr inbounds double, double* %22, i64 %165
  %175 = bitcast double* %174 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %175, align 8, !tbaa !7, !alias.scope !291
  %176 = getelementptr inbounds double, double* %174, i64 2
  %177 = bitcast double* %176 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %177, align 8, !tbaa !7, !alias.scope !291
  %178 = add i64 %151, 8
  %179 = add i64 %152, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %150, !llvm.loop !292

; <label>:181:                                    ; preds = %150, %141
  %182 = phi i64 [ 0, %141 ], [ %178, %150 ]
  %183 = icmp eq i64 %146, 0
  br i1 %183, label %197, label %184

; <label>:184:                                    ; preds = %181
  %185 = getelementptr inbounds double, double* %96, i64 %182
  %186 = bitcast double* %185 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %186, align 8, !tbaa !7, !alias.scope !284, !noalias !287
  %187 = getelementptr inbounds double, double* %185, i64 2
  %188 = bitcast double* %187 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %188, align 8, !tbaa !7, !alias.scope !284, !noalias !287
  %189 = getelementptr inbounds double, double* %28, i64 %182
  %190 = bitcast double* %189 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %190, align 8, !tbaa !7, !alias.scope !290, !noalias !291
  %191 = getelementptr inbounds double, double* %189, i64 2
  %192 = bitcast double* %191 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %192, align 8, !tbaa !7, !alias.scope !290, !noalias !291
  %193 = getelementptr inbounds double, double* %22, i64 %182
  %194 = bitcast double* %193 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %194, align 8, !tbaa !7, !alias.scope !291
  %195 = getelementptr inbounds double, double* %193, i64 2
  %196 = bitcast double* %195 to <2 x double>*
  store <2 x double> zeroinitializer, <2 x double>* %196, align 8, !tbaa !7, !alias.scope !291
  br label %197

; <label>:197:                                    ; preds = %181, %184
  %198 = icmp eq i64 %120, %142
  br i1 %198, label %208, label %199

; <label>:199:                                    ; preds = %197, %122, %118
  %200 = phi i64 [ 0, %122 ], [ 0, %118 ], [ %142, %197 ]
  br label %201

; <label>:201:                                    ; preds = %199, %201
  %202 = phi i64 [ %206, %201 ], [ %200, %199 ]
  %203 = getelementptr inbounds double, double* %96, i64 %202
  store double 0.000000e+00, double* %203, align 8, !tbaa !7
  %204 = getelementptr inbounds double, double* %28, i64 %202
  store double 0.000000e+00, double* %204, align 8, !tbaa !7
  %205 = getelementptr inbounds double, double* %22, i64 %202
  store double 0.000000e+00, double* %205, align 8, !tbaa !7
  %206 = add nuw i64 %202, 1
  %207 = icmp ult i64 %206, %13
  br i1 %207, label %201, label %208, !llvm.loop !293

; <label>:208:                                    ; preds = %201, %197, %115
  %209 = sub nsw i64 %13, %31
  %210 = add nsw i64 %209, -1
  br i1 %32, label %627, label %211

; <label>:211:                                    ; preds = %208
  %212 = sext i32 %3 to i64
  %213 = add nsw i32 %9, -1
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds double, double* %22, i64 %209
  %216 = icmp ult i32 %116, 3
  %217 = getelementptr i8, i8* %23, i64 8
  %218 = shl nsw i64 %13, 3
  %219 = getelementptr i8, i8* %23, i64 %218
  %220 = getelementptr i8, i8* %25, i64 -8
  %221 = getelementptr i8, i8* %23, i64 %218
  %222 = getelementptr i8, i8* %21, i64 %218
  %223 = add nsw i64 %13, -4
  %224 = lshr i64 %223, 2
  %225 = add nuw nsw i64 %224, 1
  %226 = icmp ult i32 %12, 4
  %227 = icmp ult i8* %23, %222
  %228 = icmp ult i8* %21, %221
  %229 = and i1 %227, %228
  %230 = and i64 %13, -4
  %231 = and i64 %225, 3
  %232 = icmp ult i64 %223, 12
  %233 = sub nsw i64 %225, %231
  %234 = icmp eq i64 %231, 0
  %235 = icmp eq i64 %230, %13
  %236 = sub nsw i64 0, %13
  br label %237

; <label>:237:                                    ; preds = %211, %622
  %238 = phi i64 [ %209, %211 ], [ %249, %622 ]
  %239 = phi i64 [ 0, %211 ], [ %252, %622 ]
  %240 = phi i64 [ 0, %211 ], [ %625, %622 ]
  %241 = phi i64 [ -1, %211 ], [ %624, %622 ]
  %242 = phi i64 [ %210, %211 ], [ %623, %622 ]
  %243 = icmp ult i64 %239, %212
  br i1 %243, label %244, label %247

; <label>:244:                                    ; preds = %237
  %245 = getelementptr inbounds double, double* %5, i64 %239
  %246 = load double, double* %245, align 8, !tbaa !7
  br label %247

; <label>:247:                                    ; preds = %237, %244
  %248 = phi double [ %246, %244 ], [ 0.000000e+00, %237 ]
  %249 = add i64 %238, 1
  %250 = getelementptr inbounds double, double* %22, i64 %238
  store double 0.000000e+00, double* %250, align 8, !tbaa !7
  %251 = icmp ult i64 %239, %31
  %252 = add nuw i64 %239, 1
  br i1 %251, label %253, label %622

; <label>:253:                                    ; preds = %247
  %254 = add i64 %252, %209
  %255 = icmp eq i64 %239, %214
  %256 = getelementptr inbounds double, double* %22, i64 %249
  br label %257

; <label>:257:                                    ; preds = %253, %618
  %258 = phi i64 [ %254, %253 ], [ %619, %618 ]
  %259 = phi i64 [ %239, %253 ], [ %620, %618 ]
  %260 = phi i64 [ %240, %253 ], [ %263, %618 ]
  %261 = phi i64 [ %241, %253 ], [ %282, %618 ]
  %262 = phi i64 [ %242, %253 ], [ %287, %618 ]
  %263 = add i64 %260, 1
  %264 = getelementptr inbounds double, double* %30, i64 %260
  %265 = load double, double* %264, align 8, !tbaa !7
  %266 = icmp ult i64 %259, %212
  br i1 %266, label %267, label %270

; <label>:267:                                    ; preds = %257
  %268 = getelementptr inbounds double, double* %5, i64 %259
  %269 = load double, double* %268, align 8, !tbaa !7
  br label %270

; <label>:270:                                    ; preds = %257, %267
  %271 = phi double [ %269, %267 ], [ 0.000000e+00, %257 ]
  br i1 %255, label %281, label %272

; <label>:272:                                    ; preds = %270
  %273 = fsub double -0.000000e+00, %271
  store double %273, double* %256, align 8, !tbaa !7
  %274 = icmp eq i64 %259, %214
  br i1 %274, label %281, label %275

; <label>:275:                                    ; preds = %272
  %276 = getelementptr inbounds double, double* %22, i64 %258
  %277 = load double, double* %276, align 8, !tbaa !7
  %278 = fsub double %277, %248
  store double %278, double* %276, align 8, !tbaa !7
  %279 = add i64 %261, 1
  %280 = getelementptr inbounds double, double* %22, i64 %279
  store double -1.000000e+00, double* %280, align 8, !tbaa !7
  br label %281

; <label>:281:                                    ; preds = %272, %270, %275
  %282 = phi i64 [ %279, %275 ], [ %261, %272 ], [ %261, %270 ]
  %283 = fmul double %248, %271
  %284 = fsub double -0.000000e+00, %283
  store double %284, double* %215, align 8, !tbaa !7
  %285 = add i64 %262, 1
  %286 = icmp ult i64 %285, %13
  %287 = select i1 %286, i64 %285, i64 0
  %288 = getelementptr inbounds double, double* %22, i64 %287
  %289 = load double, double* %288, align 8, !tbaa !7
  %290 = fadd double %289, 1.000000e+00
  store double %290, double* %288, align 8, !tbaa !7
  br i1 %216, label %612, label %291

; <label>:291:                                    ; preds = %281
  %292 = or i1 %226, %229
  br i1 %292, label %362, label %293

; <label>:293:                                    ; preds = %291
  br i1 %232, label %343, label %294

; <label>:294:                                    ; preds = %293, %294
  %295 = phi i64 [ %340, %294 ], [ 0, %293 ]
  %296 = phi i64 [ %341, %294 ], [ %233, %293 ]
  %297 = getelementptr inbounds double, double* %22, i64 %295
  %298 = bitcast double* %297 to <2 x i64>*
  %299 = load <2 x i64>, <2 x i64>* %298, align 8, !tbaa !7, !alias.scope !294
  %300 = getelementptr inbounds double, double* %297, i64 2
  %301 = bitcast double* %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !tbaa !7, !alias.scope !294
  %303 = getelementptr inbounds double, double* %24, i64 %295
  %304 = bitcast double* %303 to <2 x i64>*
  store <2 x i64> %299, <2 x i64>* %304, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %305 = getelementptr inbounds double, double* %303, i64 2
  %306 = bitcast double* %305 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %307 = or i64 %295, 4
  %308 = getelementptr inbounds double, double* %22, i64 %307
  %309 = bitcast double* %308 to <2 x i64>*
  %310 = load <2 x i64>, <2 x i64>* %309, align 8, !tbaa !7, !alias.scope !294
  %311 = getelementptr inbounds double, double* %308, i64 2
  %312 = bitcast double* %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 8, !tbaa !7, !alias.scope !294
  %314 = getelementptr inbounds double, double* %24, i64 %307
  %315 = bitcast double* %314 to <2 x i64>*
  store <2 x i64> %310, <2 x i64>* %315, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %316 = getelementptr inbounds double, double* %314, i64 2
  %317 = bitcast double* %316 to <2 x i64>*
  store <2 x i64> %313, <2 x i64>* %317, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %318 = or i64 %295, 8
  %319 = getelementptr inbounds double, double* %22, i64 %318
  %320 = bitcast double* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !tbaa !7, !alias.scope !294
  %322 = getelementptr inbounds double, double* %319, i64 2
  %323 = bitcast double* %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !tbaa !7, !alias.scope !294
  %325 = getelementptr inbounds double, double* %24, i64 %318
  %326 = bitcast double* %325 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %326, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %327 = getelementptr inbounds double, double* %325, i64 2
  %328 = bitcast double* %327 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %328, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %329 = or i64 %295, 12
  %330 = getelementptr inbounds double, double* %22, i64 %329
  %331 = bitcast double* %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 8, !tbaa !7, !alias.scope !294
  %333 = getelementptr inbounds double, double* %330, i64 2
  %334 = bitcast double* %333 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 8, !tbaa !7, !alias.scope !294
  %336 = getelementptr inbounds double, double* %24, i64 %329
  %337 = bitcast double* %336 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %337, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %338 = getelementptr inbounds double, double* %336, i64 2
  %339 = bitcast double* %338 to <2 x i64>*
  store <2 x i64> %335, <2 x i64>* %339, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %340 = add i64 %295, 16
  %341 = add i64 %296, -4
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %294, !llvm.loop !299

; <label>:343:                                    ; preds = %294, %293
  %344 = phi i64 [ 0, %293 ], [ %340, %294 ]
  br i1 %234, label %361, label %345

; <label>:345:                                    ; preds = %343, %345
  %346 = phi i64 [ %358, %345 ], [ %344, %343 ]
  %347 = phi i64 [ %359, %345 ], [ %231, %343 ]
  %348 = getelementptr inbounds double, double* %22, i64 %346
  %349 = bitcast double* %348 to <2 x i64>*
  %350 = load <2 x i64>, <2 x i64>* %349, align 8, !tbaa !7, !alias.scope !294
  %351 = getelementptr inbounds double, double* %348, i64 2
  %352 = bitcast double* %351 to <2 x i64>*
  %353 = load <2 x i64>, <2 x i64>* %352, align 8, !tbaa !7, !alias.scope !294
  %354 = getelementptr inbounds double, double* %24, i64 %346
  %355 = bitcast double* %354 to <2 x i64>*
  store <2 x i64> %350, <2 x i64>* %355, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %356 = getelementptr inbounds double, double* %354, i64 2
  %357 = bitcast double* %356 to <2 x i64>*
  store <2 x i64> %353, <2 x i64>* %357, align 8, !tbaa !7, !alias.scope !297, !noalias !294
  %358 = add i64 %346, 4
  %359 = add i64 %347, -1
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %345, !llvm.loop !300

; <label>:361:                                    ; preds = %345, %343
  br i1 %235, label %434, label %362

; <label>:362:                                    ; preds = %291, %361
  %363 = phi i64 [ 0, %291 ], [ %230, %361 ]
  %364 = sub nsw i64 %13, %363
  %365 = xor i64 %363, -1
  %366 = add nsw i64 %365, %13
  %367 = and i64 %364, 7
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %380, label %369

; <label>:369:                                    ; preds = %362, %369
  %370 = phi i64 [ %377, %369 ], [ %363, %362 ]
  %371 = phi i64 [ %378, %369 ], [ %367, %362 ]
  %372 = getelementptr inbounds double, double* %22, i64 %370
  %373 = bitcast double* %372 to i64*
  %374 = load i64, i64* %373, align 8, !tbaa !7
  %375 = getelementptr inbounds double, double* %24, i64 %370
  %376 = bitcast double* %375 to i64*
  store i64 %374, i64* %376, align 8, !tbaa !7
  %377 = add nuw i64 %370, 1
  %378 = add i64 %371, -1
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %369, !llvm.loop !301

; <label>:380:                                    ; preds = %369, %362
  %381 = phi i64 [ %363, %362 ], [ %377, %369 ]
  %382 = icmp ult i64 %366, 7
  br i1 %382, label %434, label %383

; <label>:383:                                    ; preds = %380, %383
  %384 = phi i64 [ %432, %383 ], [ %381, %380 ]
  %385 = getelementptr inbounds double, double* %22, i64 %384
  %386 = bitcast double* %385 to i64*
  %387 = load i64, i64* %386, align 8, !tbaa !7
  %388 = getelementptr inbounds double, double* %24, i64 %384
  %389 = bitcast double* %388 to i64*
  store i64 %387, i64* %389, align 8, !tbaa !7
  %390 = add nuw i64 %384, 1
  %391 = getelementptr inbounds double, double* %22, i64 %390
  %392 = bitcast double* %391 to i64*
  %393 = load i64, i64* %392, align 8, !tbaa !7
  %394 = getelementptr inbounds double, double* %24, i64 %390
  %395 = bitcast double* %394 to i64*
  store i64 %393, i64* %395, align 8, !tbaa !7
  %396 = add i64 %384, 2
  %397 = getelementptr inbounds double, double* %22, i64 %396
  %398 = bitcast double* %397 to i64*
  %399 = load i64, i64* %398, align 8, !tbaa !7
  %400 = getelementptr inbounds double, double* %24, i64 %396
  %401 = bitcast double* %400 to i64*
  store i64 %399, i64* %401, align 8, !tbaa !7
  %402 = add i64 %384, 3
  %403 = getelementptr inbounds double, double* %22, i64 %402
  %404 = bitcast double* %403 to i64*
  %405 = load i64, i64* %404, align 8, !tbaa !7
  %406 = getelementptr inbounds double, double* %24, i64 %402
  %407 = bitcast double* %406 to i64*
  store i64 %405, i64* %407, align 8, !tbaa !7
  %408 = add i64 %384, 4
  %409 = getelementptr inbounds double, double* %22, i64 %408
  %410 = bitcast double* %409 to i64*
  %411 = load i64, i64* %410, align 8, !tbaa !7
  %412 = getelementptr inbounds double, double* %24, i64 %408
  %413 = bitcast double* %412 to i64*
  store i64 %411, i64* %413, align 8, !tbaa !7
  %414 = add i64 %384, 5
  %415 = getelementptr inbounds double, double* %22, i64 %414
  %416 = bitcast double* %415 to i64*
  %417 = load i64, i64* %416, align 8, !tbaa !7
  %418 = getelementptr inbounds double, double* %24, i64 %414
  %419 = bitcast double* %418 to i64*
  store i64 %417, i64* %419, align 8, !tbaa !7
  %420 = add i64 %384, 6
  %421 = getelementptr inbounds double, double* %22, i64 %420
  %422 = bitcast double* %421 to i64*
  %423 = load i64, i64* %422, align 8, !tbaa !7
  %424 = getelementptr inbounds double, double* %24, i64 %420
  %425 = bitcast double* %424 to i64*
  store i64 %423, i64* %425, align 8, !tbaa !7
  %426 = add i64 %384, 7
  %427 = getelementptr inbounds double, double* %22, i64 %426
  %428 = bitcast double* %427 to i64*
  %429 = load i64, i64* %428, align 8, !tbaa !7
  %430 = getelementptr inbounds double, double* %24, i64 %426
  %431 = bitcast double* %430 to i64*
  store i64 %429, i64* %431, align 8, !tbaa !7
  %432 = add i64 %384, 8
  %433 = icmp eq i64 %432, %13
  br i1 %433, label %434, label %383, !llvm.loop !302

; <label>:434:                                    ; preds = %380, %383, %361
  br label %435

; <label>:435:                                    ; preds = %434, %607
  %436 = phi i64 [ %610, %607 ], [ 0, %434 ]
  %437 = phi i64 [ %608, %607 ], [ 0, %434 ]
  %438 = phi double [ %609, %607 ], [ %265, %434 ]
  %439 = getelementptr inbounds double, double* %24, i64 %437
  %440 = load double, double* %439, align 8, !tbaa !7
  %441 = fcmp une double %440, 0.000000e+00
  br i1 %441, label %442, label %602

; <label>:442:                                    ; preds = %435
  %443 = getelementptr inbounds double, double* %96, i64 %437
  %444 = load double, double* %443, align 8, !tbaa !7
  %445 = fmul double %440, %440
  %446 = fadd double %445, %444
  store double %446, double* %443, align 8, !tbaa !7
  %447 = fdiv double %444, %446
  %448 = fdiv double %440, %446
  %449 = add nuw i64 %437, 1
  %450 = icmp ult i64 %449, %13
  br i1 %450, label %451, label %592

; <label>:451:                                    ; preds = %442
  %452 = xor i64 %437, -1
  %453 = add i64 %452, %13
  %454 = icmp ult i64 %453, 2
  br i1 %454, label %542, label %455

; <label>:455:                                    ; preds = %451
  %456 = shl i64 %437, 3
  %457 = getelementptr i8, i8* %217, i64 %456
  %458 = shl i64 %436, 3
  %459 = getelementptr i8, i8* %25, i64 %458
  %460 = add i64 %436, %13
  %461 = shl i64 %460, 3
  %462 = sub i64 %461, %456
  %463 = getelementptr i8, i8* %220, i64 %462
  %464 = icmp ult i8* %457, %463
  %465 = icmp ult i8* %459, %219
  %466 = and i1 %464, %465
  br i1 %466, label %542, label %467

; <label>:467:                                    ; preds = %455
  %468 = and i64 %453, -2
  %469 = add i64 %449, %468
  %470 = add i64 %436, %468
  %471 = insertelement <2 x double> undef, double %440, i32 0
  %472 = shufflevector <2 x double> %471, <2 x double> undef, <2 x i32> zeroinitializer
  %473 = insertelement <2 x double> undef, double %447, i32 0
  %474 = shufflevector <2 x double> %473, <2 x double> undef, <2 x i32> zeroinitializer
  %475 = insertelement <2 x double> undef, double %448, i32 0
  %476 = shufflevector <2 x double> %475, <2 x double> undef, <2 x i32> zeroinitializer
  %477 = add i64 %468, -2
  %478 = lshr exact i64 %477, 1
  %479 = add nuw i64 %478, 1
  %480 = and i64 %479, 1
  %481 = icmp eq i64 %477, 0
  br i1 %481, label %521, label %482

; <label>:482:                                    ; preds = %467
  %483 = sub i64 %479, %480
  br label %484

; <label>:484:                                    ; preds = %484, %482
  %485 = phi i64 [ 0, %482 ], [ %518, %484 ]
  %486 = phi i64 [ %483, %482 ], [ %519, %484 ]
  %487 = add i64 %449, %485
  %488 = add i64 %436, %485
  %489 = getelementptr inbounds double, double* %24, i64 %487
  %490 = bitcast double* %489 to <2 x double>*
  %491 = load <2 x double>, <2 x double>* %490, align 8, !tbaa !7, !alias.scope !303, !noalias !306
  %492 = getelementptr inbounds double, double* %26, i64 %488
  %493 = bitcast double* %492 to <2 x double>*
  %494 = load <2 x double>, <2 x double>* %493, align 8, !tbaa !7, !alias.scope !306
  %495 = fmul <2 x double> %472, %494
  %496 = fsub <2 x double> %491, %495
  %497 = bitcast double* %489 to <2 x double>*
  store <2 x double> %496, <2 x double>* %497, align 8, !tbaa !7, !alias.scope !303, !noalias !306
  %498 = fmul <2 x double> %474, %494
  %499 = fmul <2 x double> %476, %491
  %500 = fadd <2 x double> %499, %498
  %501 = bitcast double* %492 to <2 x double>*
  store <2 x double> %500, <2 x double>* %501, align 8, !tbaa !7, !alias.scope !306
  %502 = or i64 %485, 2
  %503 = add i64 %449, %502
  %504 = add i64 %436, %502
  %505 = getelementptr inbounds double, double* %24, i64 %503
  %506 = bitcast double* %505 to <2 x double>*
  %507 = load <2 x double>, <2 x double>* %506, align 8, !tbaa !7, !alias.scope !303, !noalias !306
  %508 = getelementptr inbounds double, double* %26, i64 %504
  %509 = bitcast double* %508 to <2 x double>*
  %510 = load <2 x double>, <2 x double>* %509, align 8, !tbaa !7, !alias.scope !306
  %511 = fmul <2 x double> %472, %510
  %512 = fsub <2 x double> %507, %511
  %513 = bitcast double* %505 to <2 x double>*
  store <2 x double> %512, <2 x double>* %513, align 8, !tbaa !7, !alias.scope !303, !noalias !306
  %514 = fmul <2 x double> %474, %510
  %515 = fmul <2 x double> %476, %507
  %516 = fadd <2 x double> %515, %514
  %517 = bitcast double* %508 to <2 x double>*
  store <2 x double> %516, <2 x double>* %517, align 8, !tbaa !7, !alias.scope !306
  %518 = add i64 %485, 4
  %519 = add i64 %486, -2
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %521, label %484, !llvm.loop !308

; <label>:521:                                    ; preds = %484, %467
  %522 = phi i64 [ 0, %467 ], [ %518, %484 ]
  %523 = icmp eq i64 %480, 0
  br i1 %523, label %540, label %524

; <label>:524:                                    ; preds = %521
  %525 = add i64 %449, %522
  %526 = add i64 %436, %522
  %527 = getelementptr inbounds double, double* %24, i64 %525
  %528 = bitcast double* %527 to <2 x double>*
  %529 = load <2 x double>, <2 x double>* %528, align 8, !tbaa !7, !alias.scope !303, !noalias !306
  %530 = getelementptr inbounds double, double* %26, i64 %526
  %531 = bitcast double* %530 to <2 x double>*
  %532 = load <2 x double>, <2 x double>* %531, align 8, !tbaa !7, !alias.scope !306
  %533 = fmul <2 x double> %472, %532
  %534 = fsub <2 x double> %529, %533
  %535 = bitcast double* %527 to <2 x double>*
  store <2 x double> %534, <2 x double>* %535, align 8, !tbaa !7, !alias.scope !303, !noalias !306
  %536 = fmul <2 x double> %474, %532
  %537 = fmul <2 x double> %476, %529
  %538 = fadd <2 x double> %537, %536
  %539 = bitcast double* %530 to <2 x double>*
  store <2 x double> %538, <2 x double>* %539, align 8, !tbaa !7, !alias.scope !306
  br label %540

; <label>:540:                                    ; preds = %521, %524
  %541 = icmp eq i64 %453, %468
  br i1 %541, label %592, label %542

; <label>:542:                                    ; preds = %540, %455, %451
  %543 = phi i64 [ %449, %455 ], [ %449, %451 ], [ %469, %540 ]
  %544 = phi i64 [ %436, %455 ], [ %436, %451 ], [ %470, %540 ]
  %545 = sub i64 %13, %543
  %546 = xor i64 %543, -1
  %547 = and i64 %545, 1
  %548 = icmp eq i64 %547, 0
  br i1 %548, label %561, label %549

; <label>:549:                                    ; preds = %542
  %550 = getelementptr inbounds double, double* %24, i64 %543
  %551 = load double, double* %550, align 8, !tbaa !7
  %552 = getelementptr inbounds double, double* %26, i64 %544
  %553 = load double, double* %552, align 8, !tbaa !7
  %554 = fmul double %440, %553
  %555 = fsub double %551, %554
  store double %555, double* %550, align 8, !tbaa !7
  %556 = fmul double %447, %553
  %557 = fmul double %448, %551
  %558 = fadd double %557, %556
  %559 = add i64 %544, 1
  store double %558, double* %552, align 8, !tbaa !7
  %560 = add i64 %543, 1
  br label %561

; <label>:561:                                    ; preds = %549, %542
  %562 = phi i64 [ %559, %549 ], [ undef, %542 ]
  %563 = phi i64 [ %560, %549 ], [ %543, %542 ]
  %564 = phi i64 [ %559, %549 ], [ %544, %542 ]
  %565 = icmp eq i64 %546, %236
  br i1 %565, label %592, label %566

; <label>:566:                                    ; preds = %561, %566
  %567 = phi i64 [ %590, %566 ], [ %563, %561 ]
  %568 = phi i64 [ %589, %566 ], [ %564, %561 ]
  %569 = getelementptr inbounds double, double* %24, i64 %567
  %570 = load double, double* %569, align 8, !tbaa !7
  %571 = getelementptr inbounds double, double* %26, i64 %568
  %572 = load double, double* %571, align 8, !tbaa !7
  %573 = fmul double %440, %572
  %574 = fsub double %570, %573
  store double %574, double* %569, align 8, !tbaa !7
  %575 = fmul double %447, %572
  %576 = fmul double %448, %570
  %577 = fadd double %576, %575
  %578 = add i64 %568, 1
  store double %577, double* %571, align 8, !tbaa !7
  %579 = add i64 %567, 1
  %580 = getelementptr inbounds double, double* %24, i64 %579
  %581 = load double, double* %580, align 8, !tbaa !7
  %582 = getelementptr inbounds double, double* %26, i64 %578
  %583 = load double, double* %582, align 8, !tbaa !7
  %584 = fmul double %440, %583
  %585 = fsub double %581, %584
  store double %585, double* %580, align 8, !tbaa !7
  %586 = fmul double %447, %583
  %587 = fmul double %448, %581
  %588 = fadd double %587, %586
  %589 = add i64 %568, 2
  store double %588, double* %582, align 8, !tbaa !7
  %590 = add i64 %567, 2
  %591 = icmp eq i64 %590, %13
  br i1 %591, label %592, label %566, !llvm.loop !309

; <label>:592:                                    ; preds = %561, %566, %540, %442
  %593 = phi i64 [ %436, %442 ], [ %470, %540 ], [ %562, %561 ], [ %589, %566 ]
  %594 = getelementptr inbounds double, double* %28, i64 %437
  %595 = load double, double* %594, align 8, !tbaa !7
  %596 = fmul double %440, %595
  %597 = fsub double %438, %596
  %598 = fmul double %447, %595
  %599 = fmul double %438, %448
  %600 = fadd double %599, %598
  store double %600, double* %594, align 8, !tbaa !7
  %601 = fcmp oeq double %444, 0.000000e+00
  br i1 %601, label %612, label %607

; <label>:602:                                    ; preds = %435
  %603 = xor i64 %437, -1
  %604 = add i64 %436, %13
  %605 = add i64 %604, %603
  %606 = add nuw i64 %437, 1
  br label %607

; <label>:607:                                    ; preds = %602, %592
  %608 = phi i64 [ %606, %602 ], [ %449, %592 ]
  %609 = phi double [ %438, %602 ], [ %597, %592 ]
  %610 = phi i64 [ %605, %602 ], [ %593, %592 ]
  %611 = icmp ult i64 %608, %13
  br i1 %611, label %435, label %612

; <label>:612:                                    ; preds = %592, %607, %281
  store double 0.000000e+00, double* %288, align 8, !tbaa !7
  %613 = icmp eq i64 %259, %214
  br i1 %613, label %618, label %614

; <label>:614:                                    ; preds = %612
  %615 = add i64 %258, 1
  %616 = getelementptr inbounds double, double* %22, i64 %258
  store double 0.000000e+00, double* %616, align 8, !tbaa !7
  %617 = getelementptr inbounds double, double* %22, i64 %282
  store double 0.000000e+00, double* %617, align 8, !tbaa !7
  br label %618

; <label>:618:                                    ; preds = %612, %614
  %619 = phi i64 [ %615, %614 ], [ %258, %612 ]
  %620 = add nuw i64 %259, 1
  %621 = icmp ult i64 %620, %31
  br i1 %621, label %257, label %622

; <label>:622:                                    ; preds = %618, %247
  %623 = phi i64 [ %242, %247 ], [ %287, %618 ]
  %624 = phi i64 [ %241, %247 ], [ %282, %618 ]
  %625 = phi i64 [ %240, %247 ], [ %263, %618 ]
  %626 = icmp ult i64 %252, %31
  br i1 %626, label %237, label %627

; <label>:627:                                    ; preds = %622, %208
  br i1 %117, label %628, label %630

; <label>:628:                                    ; preds = %627
  %629 = add nsw i64 %16, -1
  br label %738

; <label>:630:                                    ; preds = %790, %627
  br i1 %32, label %798, label %631

; <label>:631:                                    ; preds = %630
  %632 = icmp ugt i64 %31, 1
  %633 = select i1 %632, i64 %31, i64 1
  %634 = icmp ult i64 %633, 4
  br i1 %634, label %635, label %638

; <label>:635:                                    ; preds = %736, %638, %631
  %636 = phi i64 [ 0, %638 ], [ 0, %631 ], [ %654, %736 ]
  %637 = phi i64 [ %209, %638 ], [ %209, %631 ], [ %655, %736 ]
  br label %905

; <label>:638:                                    ; preds = %631
  %639 = icmp ugt i64 %31, 1
  %640 = select i1 %639, i64 %31, i64 1
  %641 = shl nsw i64 %640, 3
  %642 = getelementptr i8, i8* %21, i64 %641
  %643 = sub nsw i64 %13, %31
  %644 = getelementptr double, double* %96, i64 %643
  %645 = bitcast double* %644 to i8*
  %646 = add nsw i64 %640, %13
  %647 = sub nsw i64 %646, %31
  %648 = getelementptr double, double* %96, i64 %647
  %649 = bitcast double* %648 to i8*
  %650 = icmp ult i8* %21, %649
  %651 = icmp ugt i8* %642, %645
  %652 = and i1 %650, %651
  br i1 %652, label %635, label %653

; <label>:653:                                    ; preds = %638
  %654 = and i64 %633, -4
  %655 = add nsw i64 %209, %654
  %656 = add nsw i64 %654, -4
  %657 = lshr exact i64 %656, 2
  %658 = add nuw nsw i64 %657, 1
  %659 = and i64 %658, 3
  %660 = icmp ult i64 %656, 12
  br i1 %660, label %716, label %661

; <label>:661:                                    ; preds = %653
  %662 = sub nsw i64 %658, %659
  br label %663

; <label>:663:                                    ; preds = %663, %661
  %664 = phi i64 [ 0, %661 ], [ %713, %663 ]
  %665 = phi i64 [ %662, %661 ], [ %714, %663 ]
  %666 = add i64 %209, %664
  %667 = getelementptr inbounds double, double* %96, i64 %666
  %668 = bitcast double* %667 to <2 x i64>*
  %669 = load <2 x i64>, <2 x i64>* %668, align 8, !tbaa !7, !alias.scope !310
  %670 = getelementptr inbounds double, double* %667, i64 2
  %671 = bitcast double* %670 to <2 x i64>*
  %672 = load <2 x i64>, <2 x i64>* %671, align 8, !tbaa !7, !alias.scope !310
  %673 = getelementptr inbounds double, double* %22, i64 %664
  %674 = bitcast double* %673 to <2 x i64>*
  store <2 x i64> %669, <2 x i64>* %674, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %675 = getelementptr inbounds double, double* %673, i64 2
  %676 = bitcast double* %675 to <2 x i64>*
  store <2 x i64> %672, <2 x i64>* %676, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %677 = or i64 %664, 4
  %678 = add i64 %209, %677
  %679 = getelementptr inbounds double, double* %96, i64 %678
  %680 = bitcast double* %679 to <2 x i64>*
  %681 = load <2 x i64>, <2 x i64>* %680, align 8, !tbaa !7, !alias.scope !310
  %682 = getelementptr inbounds double, double* %679, i64 2
  %683 = bitcast double* %682 to <2 x i64>*
  %684 = load <2 x i64>, <2 x i64>* %683, align 8, !tbaa !7, !alias.scope !310
  %685 = getelementptr inbounds double, double* %22, i64 %677
  %686 = bitcast double* %685 to <2 x i64>*
  store <2 x i64> %681, <2 x i64>* %686, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %687 = getelementptr inbounds double, double* %685, i64 2
  %688 = bitcast double* %687 to <2 x i64>*
  store <2 x i64> %684, <2 x i64>* %688, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %689 = or i64 %664, 8
  %690 = add i64 %209, %689
  %691 = getelementptr inbounds double, double* %96, i64 %690
  %692 = bitcast double* %691 to <2 x i64>*
  %693 = load <2 x i64>, <2 x i64>* %692, align 8, !tbaa !7, !alias.scope !310
  %694 = getelementptr inbounds double, double* %691, i64 2
  %695 = bitcast double* %694 to <2 x i64>*
  %696 = load <2 x i64>, <2 x i64>* %695, align 8, !tbaa !7, !alias.scope !310
  %697 = getelementptr inbounds double, double* %22, i64 %689
  %698 = bitcast double* %697 to <2 x i64>*
  store <2 x i64> %693, <2 x i64>* %698, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %699 = getelementptr inbounds double, double* %697, i64 2
  %700 = bitcast double* %699 to <2 x i64>*
  store <2 x i64> %696, <2 x i64>* %700, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %701 = or i64 %664, 12
  %702 = add i64 %209, %701
  %703 = getelementptr inbounds double, double* %96, i64 %702
  %704 = bitcast double* %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 8, !tbaa !7, !alias.scope !310
  %706 = getelementptr inbounds double, double* %703, i64 2
  %707 = bitcast double* %706 to <2 x i64>*
  %708 = load <2 x i64>, <2 x i64>* %707, align 8, !tbaa !7, !alias.scope !310
  %709 = getelementptr inbounds double, double* %22, i64 %701
  %710 = bitcast double* %709 to <2 x i64>*
  store <2 x i64> %705, <2 x i64>* %710, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %711 = getelementptr inbounds double, double* %709, i64 2
  %712 = bitcast double* %711 to <2 x i64>*
  store <2 x i64> %708, <2 x i64>* %712, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %713 = add i64 %664, 16
  %714 = add i64 %665, -4
  %715 = icmp eq i64 %714, 0
  br i1 %715, label %716, label %663, !llvm.loop !315

; <label>:716:                                    ; preds = %663, %653
  %717 = phi i64 [ 0, %653 ], [ %713, %663 ]
  %718 = icmp eq i64 %659, 0
  br i1 %718, label %736, label %719

; <label>:719:                                    ; preds = %716, %719
  %720 = phi i64 [ %733, %719 ], [ %717, %716 ]
  %721 = phi i64 [ %734, %719 ], [ %659, %716 ]
  %722 = add i64 %209, %720
  %723 = getelementptr inbounds double, double* %96, i64 %722
  %724 = bitcast double* %723 to <2 x i64>*
  %725 = load <2 x i64>, <2 x i64>* %724, align 8, !tbaa !7, !alias.scope !310
  %726 = getelementptr inbounds double, double* %723, i64 2
  %727 = bitcast double* %726 to <2 x i64>*
  %728 = load <2 x i64>, <2 x i64>* %727, align 8, !tbaa !7, !alias.scope !310
  %729 = getelementptr inbounds double, double* %22, i64 %720
  %730 = bitcast double* %729 to <2 x i64>*
  store <2 x i64> %725, <2 x i64>* %730, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %731 = getelementptr inbounds double, double* %729, i64 2
  %732 = bitcast double* %731 to <2 x i64>*
  store <2 x i64> %728, <2 x i64>* %732, align 8, !tbaa !7, !alias.scope !313, !noalias !310
  %733 = add i64 %720, 4
  %734 = add i64 %721, -1
  %735 = icmp eq i64 %734, 0
  br i1 %735, label %736, label %719, !llvm.loop !316

; <label>:736:                                    ; preds = %719, %716
  %737 = icmp eq i64 %633, %654
  br i1 %737, label %798, label %635

; <label>:738:                                    ; preds = %628, %790
  %739 = phi i64 [ 0, %628 ], [ %797, %790 ]
  %740 = phi i64 [ 0, %628 ], [ %795, %790 ]
  %741 = phi i64 [ %629, %628 ], [ %791, %790 ]
  %742 = phi i64 [ %14, %628 ], [ %793, %790 ]
  %743 = getelementptr inbounds double, double* %28, i64 %742
  %744 = load double, double* %743, align 8, !tbaa !7
  %745 = icmp eq i64 %740, 0
  br i1 %745, label %790, label %746

; <label>:746:                                    ; preds = %738
  %747 = and i64 %740, 1
  %748 = icmp eq i64 %740, 1
  br i1 %748, label %774, label %749

; <label>:749:                                    ; preds = %746
  %750 = sub i64 %740, %747
  br label %751

; <label>:751:                                    ; preds = %751, %749
  %752 = phi double [ %744, %749 ], [ %771, %751 ]
  %753 = phi i64 [ %741, %749 ], [ %764, %751 ]
  %754 = phi i64 [ %14, %749 ], [ %767, %751 ]
  %755 = phi i64 [ %750, %749 ], [ %772, %751 ]
  %756 = add i64 %753, -1
  %757 = getelementptr inbounds double, double* %26, i64 %753
  %758 = load double, double* %757, align 8, !tbaa !7
  %759 = add i64 %754, -1
  %760 = getelementptr inbounds double, double* %96, i64 %754
  %761 = load double, double* %760, align 8, !tbaa !7
  %762 = fmul double %758, %761
  %763 = fsub double %752, %762
  %764 = add i64 %753, -2
  %765 = getelementptr inbounds double, double* %26, i64 %756
  %766 = load double, double* %765, align 8, !tbaa !7
  %767 = add i64 %754, -2
  %768 = getelementptr inbounds double, double* %96, i64 %759
  %769 = load double, double* %768, align 8, !tbaa !7
  %770 = fmul double %766, %769
  %771 = fsub double %763, %770
  %772 = add i64 %755, -2
  %773 = icmp eq i64 %772, 0
  br i1 %773, label %774, label %751

; <label>:774:                                    ; preds = %751, %746
  %775 = phi double [ undef, %746 ], [ %771, %751 ]
  %776 = phi double [ %744, %746 ], [ %771, %751 ]
  %777 = phi i64 [ %741, %746 ], [ %764, %751 ]
  %778 = phi i64 [ %14, %746 ], [ %767, %751 ]
  %779 = icmp eq i64 %747, 0
  br i1 %779, label %787, label %780

; <label>:780:                                    ; preds = %774
  %781 = getelementptr inbounds double, double* %26, i64 %777
  %782 = load double, double* %781, align 8, !tbaa !7
  %783 = getelementptr inbounds double, double* %96, i64 %778
  %784 = load double, double* %783, align 8, !tbaa !7
  %785 = fmul double %782, %784
  %786 = fsub double %776, %785
  br label %787

; <label>:787:                                    ; preds = %774, %780
  %788 = phi double [ %775, %774 ], [ %786, %780 ]
  %789 = add i64 %741, %739
  br label %790

; <label>:790:                                    ; preds = %787, %738
  %791 = phi i64 [ %741, %738 ], [ %789, %787 ]
  %792 = phi double [ %744, %738 ], [ %788, %787 ]
  %793 = add i64 %742, -1
  %794 = getelementptr inbounds double, double* %96, i64 %742
  store double %792, double* %794, align 8, !tbaa !7
  %795 = add nuw i64 %740, 1
  %796 = icmp ult i64 %795, %13
  %797 = add i64 %739, -1
  br i1 %796, label %738, label %630

; <label>:798:                                    ; preds = %905, %736, %630
  %799 = icmp eq i64 %209, 0
  br i1 %799, label %916, label %800

; <label>:800:                                    ; preds = %798
  %801 = sub nsw i64 %13, %31
  %802 = icmp ult i64 %801, 4
  br i1 %802, label %803, label %807

; <label>:803:                                    ; preds = %903, %825, %807, %800
  %804 = phi i64 [ 0, %825 ], [ 0, %807 ], [ 0, %800 ], [ %834, %903 ]
  %805 = phi i64 [ %14, %825 ], [ %14, %807 ], [ %14, %800 ], [ %835, %903 ]
  %806 = phi i64 [ %210, %825 ], [ %210, %807 ], [ %210, %800 ], [ %836, %903 ]
  br label %1012

; <label>:807:                                    ; preds = %800
  %808 = xor i64 %31, -1
  %809 = add nsw i64 %808, %13
  %810 = getelementptr double, double* %96, i64 %14
  %811 = ptrtoint double* %810 to i64
  %812 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %809, i64 8)
  %813 = extractvalue { i64, i1 } %812, 0
  %814 = extractvalue { i64, i1 } %812, 1
  %815 = icmp ugt i64 %813, %811
  %816 = or i1 %815, %814
  %817 = getelementptr double, double* %96, i64 %809
  %818 = ptrtoint double* %817 to i64
  %819 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %809, i64 8)
  %820 = extractvalue { i64, i1 } %819, 0
  %821 = extractvalue { i64, i1 } %819, 1
  %822 = icmp ugt i64 %820, %818
  %823 = or i1 %822, %821
  %824 = or i1 %816, %823
  br i1 %824, label %803, label %825

; <label>:825:                                    ; preds = %807
  %826 = getelementptr double, double* %96, i64 %31
  %827 = getelementptr double, double* %96, i64 %13
  %828 = sub nsw i64 %13, %31
  %829 = getelementptr double, double* %96, i64 %828
  %830 = icmp ult double* %826, %829
  %831 = icmp ult double* %96, %827
  %832 = and i1 %830, %831
  br i1 %832, label %803, label %833

; <label>:833:                                    ; preds = %825
  %834 = and i64 %801, -4
  %835 = sub nsw i64 %14, %834
  %836 = sub nsw i64 %210, %834
  %837 = add nsw i64 %834, -4
  %838 = lshr exact i64 %837, 2
  %839 = add nuw nsw i64 %838, 1
  %840 = and i64 %839, 1
  %841 = icmp eq i64 %837, 0
  br i1 %841, label %883, label %842

; <label>:842:                                    ; preds = %833
  %843 = sub nsw i64 %839, %840
  br label %844

; <label>:844:                                    ; preds = %844, %842
  %845 = phi i64 [ 0, %842 ], [ %880, %844 ]
  %846 = phi i64 [ %843, %842 ], [ %881, %844 ]
  %847 = sub i64 %14, %845
  %848 = sub i64 %210, %845
  %849 = getelementptr inbounds double, double* %96, i64 %848
  %850 = getelementptr inbounds double, double* %849, i64 -1
  %851 = bitcast double* %850 to <2 x i64>*
  %852 = load <2 x i64>, <2 x i64>* %851, align 8, !tbaa !7, !alias.scope !317
  %853 = getelementptr inbounds double, double* %849, i64 -2
  %854 = getelementptr inbounds double, double* %853, i64 -1
  %855 = bitcast double* %854 to <2 x i64>*
  %856 = load <2 x i64>, <2 x i64>* %855, align 8, !tbaa !7, !alias.scope !317
  %857 = getelementptr inbounds double, double* %96, i64 %847
  %858 = getelementptr inbounds double, double* %857, i64 -1
  %859 = bitcast double* %858 to <2 x i64>*
  store <2 x i64> %852, <2 x i64>* %859, align 8, !tbaa !7, !alias.scope !320, !noalias !317
  %860 = getelementptr inbounds double, double* %857, i64 -2
  %861 = getelementptr inbounds double, double* %860, i64 -1
  %862 = bitcast double* %861 to <2 x i64>*
  store <2 x i64> %856, <2 x i64>* %862, align 8, !tbaa !7, !alias.scope !320, !noalias !317
  %863 = or i64 %845, 4
  %864 = sub i64 %14, %863
  %865 = sub i64 %210, %863
  %866 = getelementptr inbounds double, double* %96, i64 %865
  %867 = getelementptr inbounds double, double* %866, i64 -1
  %868 = bitcast double* %867 to <2 x i64>*
  %869 = load <2 x i64>, <2 x i64>* %868, align 8, !tbaa !7, !alias.scope !317
  %870 = getelementptr inbounds double, double* %866, i64 -2
  %871 = getelementptr inbounds double, double* %870, i64 -1
  %872 = bitcast double* %871 to <2 x i64>*
  %873 = load <2 x i64>, <2 x i64>* %872, align 8, !tbaa !7, !alias.scope !317
  %874 = getelementptr inbounds double, double* %96, i64 %864
  %875 = getelementptr inbounds double, double* %874, i64 -1
  %876 = bitcast double* %875 to <2 x i64>*
  store <2 x i64> %869, <2 x i64>* %876, align 8, !tbaa !7, !alias.scope !320, !noalias !317
  %877 = getelementptr inbounds double, double* %874, i64 -2
  %878 = getelementptr inbounds double, double* %877, i64 -1
  %879 = bitcast double* %878 to <2 x i64>*
  store <2 x i64> %873, <2 x i64>* %879, align 8, !tbaa !7, !alias.scope !320, !noalias !317
  %880 = add i64 %845, 8
  %881 = add i64 %846, -2
  %882 = icmp eq i64 %881, 0
  br i1 %882, label %883, label %844, !llvm.loop !322

; <label>:883:                                    ; preds = %844, %833
  %884 = phi i64 [ 0, %833 ], [ %880, %844 ]
  %885 = icmp eq i64 %840, 0
  br i1 %885, label %903, label %886

; <label>:886:                                    ; preds = %883
  %887 = sub i64 %14, %884
  %888 = sub i64 %210, %884
  %889 = getelementptr inbounds double, double* %96, i64 %888
  %890 = getelementptr inbounds double, double* %889, i64 -1
  %891 = bitcast double* %890 to <2 x i64>*
  %892 = load <2 x i64>, <2 x i64>* %891, align 8, !tbaa !7, !alias.scope !317
  %893 = getelementptr inbounds double, double* %889, i64 -2
  %894 = getelementptr inbounds double, double* %893, i64 -1
  %895 = bitcast double* %894 to <2 x i64>*
  %896 = load <2 x i64>, <2 x i64>* %895, align 8, !tbaa !7, !alias.scope !317
  %897 = getelementptr inbounds double, double* %96, i64 %887
  %898 = getelementptr inbounds double, double* %897, i64 -1
  %899 = bitcast double* %898 to <2 x i64>*
  store <2 x i64> %892, <2 x i64>* %899, align 8, !tbaa !7, !alias.scope !320, !noalias !317
  %900 = getelementptr inbounds double, double* %897, i64 -2
  %901 = getelementptr inbounds double, double* %900, i64 -1
  %902 = bitcast double* %901 to <2 x i64>*
  store <2 x i64> %896, <2 x i64>* %902, align 8, !tbaa !7, !alias.scope !320, !noalias !317
  br label %903

; <label>:903:                                    ; preds = %883, %886
  %904 = icmp eq i64 %801, %834
  br i1 %904, label %916, label %803

; <label>:905:                                    ; preds = %635, %905
  %906 = phi i64 [ %914, %905 ], [ %636, %635 ]
  %907 = phi i64 [ %908, %905 ], [ %637, %635 ]
  %908 = add i64 %907, 1
  %909 = getelementptr inbounds double, double* %96, i64 %907
  %910 = bitcast double* %909 to i64*
  %911 = load i64, i64* %910, align 8, !tbaa !7
  %912 = getelementptr inbounds double, double* %22, i64 %906
  %913 = bitcast double* %912 to i64*
  store i64 %911, i64* %913, align 8, !tbaa !7
  %914 = add nuw i64 %906, 1
  %915 = icmp ult i64 %914, %31
  br i1 %915, label %905, label %798, !llvm.loop !323

; <label>:916:                                    ; preds = %1012, %903, %798
  br i1 %32, label %1094, label %917

; <label>:917:                                    ; preds = %916
  %918 = icmp ugt i64 %31, 1
  %919 = select i1 %918, i64 %31, i64 1
  %920 = icmp ult i64 %919, 4
  br i1 %920, label %921, label %923

; <label>:921:                                    ; preds = %1010, %923, %917
  %922 = phi i64 [ 0, %923 ], [ 0, %917 ], [ %934, %1010 ]
  br label %1025

; <label>:923:                                    ; preds = %917
  %924 = icmp ugt i64 %31, 1
  %925 = select i1 %924, i64 %31, i64 1
  %926 = getelementptr double, double* %96, i64 %925
  %927 = bitcast double* %926 to i8*
  %928 = shl nsw i64 %925, 3
  %929 = getelementptr i8, i8* %21, i64 %928
  %930 = icmp ugt i8* %929, %97
  %931 = icmp ult i8* %21, %927
  %932 = and i1 %930, %931
  br i1 %932, label %921, label %933

; <label>:933:                                    ; preds = %923
  %934 = and i64 %919, -4
  %935 = add nsw i64 %934, -4
  %936 = lshr exact i64 %935, 2
  %937 = add nuw nsw i64 %936, 1
  %938 = and i64 %937, 3
  %939 = icmp ult i64 %935, 12
  br i1 %939, label %991, label %940

; <label>:940:                                    ; preds = %933
  %941 = sub nsw i64 %937, %938
  br label %942

; <label>:942:                                    ; preds = %942, %940
  %943 = phi i64 [ 0, %940 ], [ %988, %942 ]
  %944 = phi i64 [ %941, %940 ], [ %989, %942 ]
  %945 = getelementptr inbounds double, double* %22, i64 %943
  %946 = bitcast double* %945 to <2 x i64>*
  %947 = load <2 x i64>, <2 x i64>* %946, align 8, !tbaa !7, !alias.scope !324
  %948 = getelementptr inbounds double, double* %945, i64 2
  %949 = bitcast double* %948 to <2 x i64>*
  %950 = load <2 x i64>, <2 x i64>* %949, align 8, !tbaa !7, !alias.scope !324
  %951 = getelementptr inbounds double, double* %96, i64 %943
  %952 = bitcast double* %951 to <2 x i64>*
  store <2 x i64> %947, <2 x i64>* %952, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %953 = getelementptr inbounds double, double* %951, i64 2
  %954 = bitcast double* %953 to <2 x i64>*
  store <2 x i64> %950, <2 x i64>* %954, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %955 = or i64 %943, 4
  %956 = getelementptr inbounds double, double* %22, i64 %955
  %957 = bitcast double* %956 to <2 x i64>*
  %958 = load <2 x i64>, <2 x i64>* %957, align 8, !tbaa !7, !alias.scope !324
  %959 = getelementptr inbounds double, double* %956, i64 2
  %960 = bitcast double* %959 to <2 x i64>*
  %961 = load <2 x i64>, <2 x i64>* %960, align 8, !tbaa !7, !alias.scope !324
  %962 = getelementptr inbounds double, double* %96, i64 %955
  %963 = bitcast double* %962 to <2 x i64>*
  store <2 x i64> %958, <2 x i64>* %963, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %964 = getelementptr inbounds double, double* %962, i64 2
  %965 = bitcast double* %964 to <2 x i64>*
  store <2 x i64> %961, <2 x i64>* %965, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %966 = or i64 %943, 8
  %967 = getelementptr inbounds double, double* %22, i64 %966
  %968 = bitcast double* %967 to <2 x i64>*
  %969 = load <2 x i64>, <2 x i64>* %968, align 8, !tbaa !7, !alias.scope !324
  %970 = getelementptr inbounds double, double* %967, i64 2
  %971 = bitcast double* %970 to <2 x i64>*
  %972 = load <2 x i64>, <2 x i64>* %971, align 8, !tbaa !7, !alias.scope !324
  %973 = getelementptr inbounds double, double* %96, i64 %966
  %974 = bitcast double* %973 to <2 x i64>*
  store <2 x i64> %969, <2 x i64>* %974, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %975 = getelementptr inbounds double, double* %973, i64 2
  %976 = bitcast double* %975 to <2 x i64>*
  store <2 x i64> %972, <2 x i64>* %976, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %977 = or i64 %943, 12
  %978 = getelementptr inbounds double, double* %22, i64 %977
  %979 = bitcast double* %978 to <2 x i64>*
  %980 = load <2 x i64>, <2 x i64>* %979, align 8, !tbaa !7, !alias.scope !324
  %981 = getelementptr inbounds double, double* %978, i64 2
  %982 = bitcast double* %981 to <2 x i64>*
  %983 = load <2 x i64>, <2 x i64>* %982, align 8, !tbaa !7, !alias.scope !324
  %984 = getelementptr inbounds double, double* %96, i64 %977
  %985 = bitcast double* %984 to <2 x i64>*
  store <2 x i64> %980, <2 x i64>* %985, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %986 = getelementptr inbounds double, double* %984, i64 2
  %987 = bitcast double* %986 to <2 x i64>*
  store <2 x i64> %983, <2 x i64>* %987, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %988 = add i64 %943, 16
  %989 = add i64 %944, -4
  %990 = icmp eq i64 %989, 0
  br i1 %990, label %991, label %942, !llvm.loop !329

; <label>:991:                                    ; preds = %942, %933
  %992 = phi i64 [ 0, %933 ], [ %988, %942 ]
  %993 = icmp eq i64 %938, 0
  br i1 %993, label %1010, label %994

; <label>:994:                                    ; preds = %991, %994
  %995 = phi i64 [ %1007, %994 ], [ %992, %991 ]
  %996 = phi i64 [ %1008, %994 ], [ %938, %991 ]
  %997 = getelementptr inbounds double, double* %22, i64 %995
  %998 = bitcast double* %997 to <2 x i64>*
  %999 = load <2 x i64>, <2 x i64>* %998, align 8, !tbaa !7, !alias.scope !324
  %1000 = getelementptr inbounds double, double* %997, i64 2
  %1001 = bitcast double* %1000 to <2 x i64>*
  %1002 = load <2 x i64>, <2 x i64>* %1001, align 8, !tbaa !7, !alias.scope !324
  %1003 = getelementptr inbounds double, double* %96, i64 %995
  %1004 = bitcast double* %1003 to <2 x i64>*
  store <2 x i64> %999, <2 x i64>* %1004, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %1005 = getelementptr inbounds double, double* %1003, i64 2
  %1006 = bitcast double* %1005 to <2 x i64>*
  store <2 x i64> %1002, <2 x i64>* %1006, align 8, !tbaa !7, !alias.scope !327, !noalias !324
  %1007 = add i64 %995, 4
  %1008 = add i64 %996, -1
  %1009 = icmp eq i64 %1008, 0
  br i1 %1009, label %1010, label %994, !llvm.loop !330

; <label>:1010:                                   ; preds = %994, %991
  %1011 = icmp eq i64 %919, %934
  br i1 %1011, label %1096, label %921

; <label>:1012:                                   ; preds = %803, %1012
  %1013 = phi i64 [ %1023, %1012 ], [ %804, %803 ]
  %1014 = phi i64 [ %1020, %1012 ], [ %805, %803 ]
  %1015 = phi i64 [ %1016, %1012 ], [ %806, %803 ]
  %1016 = add i64 %1015, -1
  %1017 = getelementptr inbounds double, double* %96, i64 %1015
  %1018 = bitcast double* %1017 to i64*
  %1019 = load i64, i64* %1018, align 8, !tbaa !7
  %1020 = add i64 %1014, -1
  %1021 = getelementptr inbounds double, double* %96, i64 %1014
  %1022 = bitcast double* %1021 to i64*
  store i64 %1019, i64* %1022, align 8, !tbaa !7
  %1023 = add nuw i64 %1013, 1
  %1024 = icmp ult i64 %1023, %209
  br i1 %1024, label %1012, label %916, !llvm.loop !331

; <label>:1025:                                   ; preds = %921, %1025
  %1026 = phi i64 [ %1032, %1025 ], [ %922, %921 ]
  %1027 = getelementptr inbounds double, double* %22, i64 %1026
  %1028 = bitcast double* %1027 to i64*
  %1029 = load i64, i64* %1028, align 8, !tbaa !7
  %1030 = getelementptr inbounds double, double* %96, i64 %1026
  %1031 = bitcast double* %1030 to i64*
  store i64 %1029, i64* %1031, align 8, !tbaa !7
  %1032 = add nuw i64 %1026, 1
  %1033 = icmp ult i64 %1032, %31
  br i1 %1033, label %1025, label %1096, !llvm.loop !332

; <label>:1034:                                   ; preds = %110, %1089
  %1035 = phi i64 [ %1090, %1089 ], [ %13, %110 ]
  %1036 = phi i64 [ %1092, %1089 ], [ 0, %110 ]
  %1037 = phi i64 [ %1091, %1089 ], [ %13, %110 ]
  %1038 = add i64 %1036, 1
  %1039 = and i64 %1038, 1
  %1040 = icmp eq i64 %1036, 0
  br i1 %1040, label %1071, label %1041

; <label>:1041:                                   ; preds = %1034
  %1042 = sub i64 %1038, %1039
  br label %1043

; <label>:1043:                                   ; preds = %1058, %1041
  %1044 = phi i64 [ %1035, %1041 ], [ %1064, %1058 ]
  %1045 = phi i64 [ 0, %1041 ], [ %1068, %1058 ]
  %1046 = phi i64 [ %1037, %1041 ], [ %1060, %1058 ]
  %1047 = phi i64 [ %1042, %1041 ], [ %1069, %1058 ]
  %1048 = add i64 %1046, -1
  %1049 = getelementptr inbounds double, double* %30, i64 %1048
  %1050 = load double, double* %1049, align 8, !tbaa !7
  %1051 = getelementptr inbounds double, double* %96, i64 %1048
  store double %1050, double* %1051, align 8, !tbaa !7
  %1052 = icmp eq i64 %1045, 0
  br i1 %1052, label %1058, label %1053

; <label>:1053:                                   ; preds = %1043
  %1054 = add i64 %1044, -1
  %1055 = getelementptr inbounds double, double* %96, i64 %1054
  %1056 = load double, double* %1055, align 8, !tbaa !7
  %1057 = fadd double %1050, %1056
  store double %1057, double* %1051, align 8, !tbaa !7
  br label %1058

; <label>:1058:                                   ; preds = %1043, %1053
  %1059 = phi i64 [ %1054, %1053 ], [ %1044, %1043 ]
  %1060 = add i64 %1046, -2
  %1061 = getelementptr inbounds double, double* %30, i64 %1060
  %1062 = load double, double* %1061, align 8, !tbaa !7
  %1063 = getelementptr inbounds double, double* %96, i64 %1060
  store double %1062, double* %1063, align 8, !tbaa !7
  %1064 = add i64 %1059, -1
  %1065 = getelementptr inbounds double, double* %96, i64 %1064
  %1066 = load double, double* %1065, align 8, !tbaa !7
  %1067 = fadd double %1062, %1066
  store double %1067, double* %1063, align 8, !tbaa !7
  %1068 = add i64 %1045, 2
  %1069 = add i64 %1047, -2
  %1070 = icmp eq i64 %1069, 0
  br i1 %1070, label %1071, label %1043

; <label>:1071:                                   ; preds = %1058, %1034
  %1072 = phi i64 [ undef, %1034 ], [ %1064, %1058 ]
  %1073 = phi i64 [ undef, %1034 ], [ %1060, %1058 ]
  %1074 = phi i64 [ %1035, %1034 ], [ %1064, %1058 ]
  %1075 = phi i64 [ 0, %1034 ], [ %1068, %1058 ]
  %1076 = phi i64 [ %1037, %1034 ], [ %1060, %1058 ]
  %1077 = icmp eq i64 %1039, 0
  br i1 %1077, label %1089, label %1078

; <label>:1078:                                   ; preds = %1071
  %1079 = add i64 %1076, -1
  %1080 = getelementptr inbounds double, double* %30, i64 %1079
  %1081 = load double, double* %1080, align 8, !tbaa !7
  %1082 = getelementptr inbounds double, double* %96, i64 %1079
  store double %1081, double* %1082, align 8, !tbaa !7
  %1083 = icmp eq i64 %1075, 0
  br i1 %1083, label %1089, label %1084

; <label>:1084:                                   ; preds = %1078
  %1085 = add i64 %1074, -1
  %1086 = getelementptr inbounds double, double* %96, i64 %1085
  %1087 = load double, double* %1086, align 8, !tbaa !7
  %1088 = fadd double %1081, %1087
  store double %1088, double* %1082, align 8, !tbaa !7
  br label %1089

; <label>:1089:                                   ; preds = %1084, %1078, %1071
  %1090 = phi i64 [ %1072, %1071 ], [ %1085, %1084 ], [ %1074, %1078 ]
  %1091 = phi i64 [ %1073, %1071 ], [ %1079, %1078 ], [ %1079, %1084 ]
  %1092 = add nuw i64 %1036, 1
  %1093 = icmp ult i64 %1092, %31
  br i1 %1093, label %1034, label %1096

; <label>:1094:                                   ; preds = %916, %110
  %1095 = icmp eq i32 %9, 1
  br label %1100

; <label>:1096:                                   ; preds = %1089, %1025, %1010
  %1097 = add nsw i32 %9, -1
  %1098 = sext i32 %1097 to i64
  %1099 = icmp eq i32 %1097, 0
  br i1 %1099, label %1219, label %1100

; <label>:1100:                                   ; preds = %1094, %1096
  %1101 = phi i1 [ %1095, %1094 ], [ false, %1096 ]
  %1102 = phi i64 [ -1, %1094 ], [ %1098, %1096 ]
  %1103 = and i64 %1102, 1
  %1104 = icmp eq i64 %1103, 0
  br i1 %1104, label %1121, label %1105

; <label>:1105:                                   ; preds = %1100
  %1106 = mul nsw i64 %1102, %31
  br label %1107

; <label>:1107:                                   ; preds = %1107, %1105
  %1108 = phi i64 [ %1102, %1105 ], [ %1117, %1107 ]
  %1109 = phi i64 [ %13, %1105 ], [ %1110, %1107 ]
  %1110 = add i64 %1109, -1
  %1111 = getelementptr inbounds double, double* %96, i64 %1110
  %1112 = bitcast double* %1111 to i64*
  %1113 = load i64, i64* %1112, align 8, !tbaa !7
  %1114 = add i64 %1108, %1106
  %1115 = getelementptr inbounds double, double* %96, i64 %1114
  %1116 = bitcast double* %1115 to i64*
  store i64 %1113, i64* %1116, align 8, !tbaa !7
  %1117 = add i64 %1108, -1
  %1118 = icmp ult i64 %1117, %1102
  br i1 %1118, label %1119, label %1107

; <label>:1119:                                   ; preds = %1107
  %1120 = add nsw i64 %1102, -1
  br label %1121

; <label>:1121:                                   ; preds = %1100, %1119
  %1122 = phi i64 [ %1102, %1100 ], [ %1120, %1119 ]
  %1123 = phi i64 [ %13, %1100 ], [ %1110, %1119 ]
  %1124 = icmp eq i64 %1102, 1
  br i1 %1124, label %1131, label %1125

; <label>:1125:                                   ; preds = %1121, %1235
  %1126 = phi i64 [ %1237, %1235 ], [ %1122, %1121 ]
  %1127 = phi i64 [ %1236, %1235 ], [ %1123, %1121 ]
  %1128 = icmp ugt i64 %1126, %1102
  br i1 %1128, label %1146, label %1129

; <label>:1129:                                   ; preds = %1125
  %1130 = mul i64 %1126, %31
  br label %1134

; <label>:1131:                                   ; preds = %1235, %1121
  br i1 %1101, label %1219, label %1132

; <label>:1132:                                   ; preds = %1131
  %1133 = add nsw i64 %31, -2
  br label %1152

; <label>:1134:                                   ; preds = %1129, %1134
  %1135 = phi i64 [ %1102, %1129 ], [ %1144, %1134 ]
  %1136 = phi i64 [ %1127, %1129 ], [ %1137, %1134 ]
  %1137 = add i64 %1136, -1
  %1138 = getelementptr inbounds double, double* %96, i64 %1137
  %1139 = bitcast double* %1138 to i64*
  %1140 = load i64, i64* %1139, align 8, !tbaa !7
  %1141 = add i64 %1135, %1130
  %1142 = getelementptr inbounds double, double* %96, i64 %1141
  %1143 = bitcast double* %1142 to i64*
  store i64 %1140, i64* %1143, align 8, !tbaa !7
  %1144 = add i64 %1135, -1
  %1145 = icmp ult i64 %1144, %1126
  br i1 %1145, label %1146, label %1134

; <label>:1146:                                   ; preds = %1134, %1125
  %1147 = phi i64 [ %1127, %1125 ], [ %1137, %1134 ]
  %1148 = add i64 %1126, -1
  %1149 = icmp ugt i64 %1148, %1102
  br i1 %1149, label %1235, label %1221

; <label>:1150:                                   ; preds = %1177, %1180, %1152
  %1151 = icmp ult i64 %1155, %1102
  br i1 %1151, label %1152, label %1219

; <label>:1152:                                   ; preds = %1132, %1150
  %1153 = phi i64 [ %1155, %1150 ], [ 0, %1132 ]
  %1154 = sub i64 %1133, %1153
  %1155 = add nuw i64 %1153, 1
  %1156 = icmp ult i64 %1155, %31
  br i1 %1156, label %1157, label %1150

; <label>:1157:                                   ; preds = %1152
  %1158 = xor i64 %1153, 3
  %1159 = add i64 %1158, %31
  %1160 = mul i64 %1153, %31
  %1161 = and i64 %1159, 3
  %1162 = icmp eq i64 %1161, 0
  br i1 %1162, label %1177, label %1163

; <label>:1163:                                   ; preds = %1157, %1163
  %1164 = phi i64 [ %1174, %1163 ], [ %1155, %1157 ]
  %1165 = phi i64 [ %1175, %1163 ], [ %1161, %1157 ]
  %1166 = add i64 %1164, %1160
  %1167 = getelementptr inbounds double, double* %96, i64 %1166
  %1168 = bitcast double* %1167 to i64*
  %1169 = load i64, i64* %1168, align 8, !tbaa !7
  %1170 = mul i64 %1164, %31
  %1171 = add i64 %1170, %1153
  %1172 = getelementptr inbounds double, double* %96, i64 %1171
  %1173 = bitcast double* %1172 to i64*
  store i64 %1169, i64* %1173, align 8, !tbaa !7
  %1174 = add i64 %1164, 1
  %1175 = add i64 %1165, -1
  %1176 = icmp eq i64 %1175, 0
  br i1 %1176, label %1177, label %1163, !llvm.loop !333

; <label>:1177:                                   ; preds = %1163, %1157
  %1178 = phi i64 [ %1155, %1157 ], [ %1174, %1163 ]
  %1179 = icmp ult i64 %1154, 3
  br i1 %1179, label %1150, label %1180

; <label>:1180:                                   ; preds = %1177, %1180
  %1181 = phi i64 [ %1217, %1180 ], [ %1178, %1177 ]
  %1182 = add i64 %1181, %1160
  %1183 = getelementptr inbounds double, double* %96, i64 %1182
  %1184 = bitcast double* %1183 to i64*
  %1185 = load i64, i64* %1184, align 8, !tbaa !7
  %1186 = mul i64 %1181, %31
  %1187 = add i64 %1186, %1153
  %1188 = getelementptr inbounds double, double* %96, i64 %1187
  %1189 = bitcast double* %1188 to i64*
  store i64 %1185, i64* %1189, align 8, !tbaa !7
  %1190 = add i64 %1181, 1
  %1191 = add i64 %1190, %1160
  %1192 = getelementptr inbounds double, double* %96, i64 %1191
  %1193 = bitcast double* %1192 to i64*
  %1194 = load i64, i64* %1193, align 8, !tbaa !7
  %1195 = mul i64 %1190, %31
  %1196 = add i64 %1195, %1153
  %1197 = getelementptr inbounds double, double* %96, i64 %1196
  %1198 = bitcast double* %1197 to i64*
  store i64 %1194, i64* %1198, align 8, !tbaa !7
  %1199 = add i64 %1181, 2
  %1200 = add i64 %1199, %1160
  %1201 = getelementptr inbounds double, double* %96, i64 %1200
  %1202 = bitcast double* %1201 to i64*
  %1203 = load i64, i64* %1202, align 8, !tbaa !7
  %1204 = mul i64 %1199, %31
  %1205 = add i64 %1204, %1153
  %1206 = getelementptr inbounds double, double* %96, i64 %1205
  %1207 = bitcast double* %1206 to i64*
  store i64 %1203, i64* %1207, align 8, !tbaa !7
  %1208 = add i64 %1181, 3
  %1209 = add i64 %1208, %1160
  %1210 = getelementptr inbounds double, double* %96, i64 %1209
  %1211 = bitcast double* %1210 to i64*
  %1212 = load i64, i64* %1211, align 8, !tbaa !7
  %1213 = mul i64 %1208, %31
  %1214 = add i64 %1213, %1153
  %1215 = getelementptr inbounds double, double* %96, i64 %1214
  %1216 = bitcast double* %1215 to i64*
  store i64 %1212, i64* %1216, align 8, !tbaa !7
  %1217 = add i64 %1181, 4
  %1218 = icmp ult i64 %1217, %31
  br i1 %1218, label %1180, label %1150

; <label>:1219:                                   ; preds = %1150, %1096, %1131
  tail call void @Rf_unprotect(i32 1) #7
  br label %1220

; <label>:1220:                                   ; preds = %1219, %106
  ret %struct.SEXPREC* %94

; <label>:1221:                                   ; preds = %1146
  %1222 = mul i64 %1148, %31
  br label %1223

; <label>:1223:                                   ; preds = %1223, %1221
  %1224 = phi i64 [ %1102, %1221 ], [ %1233, %1223 ]
  %1225 = phi i64 [ %1147, %1221 ], [ %1226, %1223 ]
  %1226 = add i64 %1225, -1
  %1227 = getelementptr inbounds double, double* %96, i64 %1226
  %1228 = bitcast double* %1227 to i64*
  %1229 = load i64, i64* %1228, align 8, !tbaa !7
  %1230 = add i64 %1224, %1222
  %1231 = getelementptr inbounds double, double* %96, i64 %1230
  %1232 = bitcast double* %1231 to i64*
  store i64 %1229, i64* %1232, align 8, !tbaa !7
  %1233 = add i64 %1224, -1
  %1234 = icmp ult i64 %1233, %1148
  br i1 %1234, label %1235, label %1223

; <label>:1235:                                   ; preds = %1223, %1146
  %1236 = phi i64 [ %1147, %1146 ], [ %1226, %1223 ]
  %1237 = add i64 %1126, -2
  %1238 = icmp eq i64 %1237, 0
  br i1 %1238, label %1131, label %1125

; <label>:1239:                                   ; preds = %83
  %1240 = getelementptr inbounds double, double* %6, i64 %74
  %1241 = load double, double* %1240, align 8, !tbaa !7
  br label %1242

; <label>:1242:                                   ; preds = %1239, %83
  %1243 = phi double [ %1241, %1239 ], [ 0.000000e+00, %83 ]
  %1244 = fmul double %49, %1243
  %1245 = add i64 %75, 2
  %1246 = getelementptr inbounds double, double* %30, i64 %86
  store double %1244, double* %1246, align 8, !tbaa !7
  %1247 = add i64 %74, 2
  %1248 = icmp ult i64 %1247, %31
  br i1 %1248, label %73, label %89
}

; Function Attrs: nounwind readnone
declare double @tanh(double) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare double @atanh(double) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = !{!17}
!17 = distinct !{!17, !13}
!18 = !{!12, !15}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !20}
!22 = distinct !{!22, !10}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !20}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !10}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !20}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !20}
!39 = distinct !{!39, !20}
!40 = distinct !{!40, !10}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !10}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = !{!50}
!50 = distinct !{!50, !46}
!51 = !{!45, !48}
!52 = distinct !{!52, !20}
!53 = distinct !{!53, !20}
!54 = distinct !{!54, !10}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !20}
!61 = distinct !{!61, !10}
!62 = distinct !{!62, !20}
!63 = distinct !{!63, !10}
!64 = distinct !{!64, !10}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !20}
!71 = distinct !{!71, !10}
!72 = distinct !{!72, !20}
!73 = !{!74, !74, i64 0}
!74 = !{!"int", !5, i64 0}
!75 = distinct !{!75, !10}
!76 = !{!77}
!77 = distinct !{!77, !78}
!78 = distinct !{!78, !"LVerDomain"}
!79 = !{!80}
!80 = distinct !{!80, !78}
!81 = distinct !{!81, !20}
!82 = distinct !{!82, !10}
!83 = distinct !{!83, !20}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !20}
!90 = distinct !{!90, !10}
!91 = distinct !{!91, !10}
!92 = distinct !{!92, !20}
!93 = distinct !{!93, !10}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !20}
!100 = distinct !{!100, !10}
!101 = distinct !{!101, !10}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !20}
!108 = distinct !{!108, !10}
!109 = distinct !{!109, !10}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !20}
!116 = distinct !{!116, !10}
!117 = distinct !{!117, !20}
!118 = distinct !{!118, !20}
!119 = !{!120}
!120 = distinct !{!120, !121}
!121 = distinct !{!121, !"LVerDomain"}
!122 = !{!123}
!123 = distinct !{!123, !121}
!124 = !{!125}
!125 = distinct !{!125, !121}
!126 = !{!120, !123}
!127 = distinct !{!127, !20}
!128 = distinct !{!128, !20}
!129 = !{!130}
!130 = distinct !{!130, !131}
!131 = distinct !{!131, !"LVerDomain"}
!132 = !{!133}
!133 = distinct !{!133, !131}
!134 = !{!135}
!135 = distinct !{!135, !131}
!136 = !{!130, !133}
!137 = distinct !{!137, !20}
!138 = distinct !{!138, !20}
!139 = distinct !{!139, !10}
!140 = !{!141}
!141 = distinct !{!141, !142}
!142 = distinct !{!142, !"LVerDomain"}
!143 = !{!144}
!144 = distinct !{!144, !142}
!145 = distinct !{!145, !20}
!146 = distinct !{!146, !10}
!147 = distinct !{!147, !20}
!148 = distinct !{!148, !20}
!149 = !{!150}
!150 = distinct !{!150, !151}
!151 = distinct !{!151, !"LVerDomain"}
!152 = !{!153}
!153 = distinct !{!153, !151}
!154 = distinct !{!154, !20}
!155 = distinct !{!155, !10}
!156 = distinct !{!156, !10}
!157 = distinct !{!157, !20}
!158 = distinct !{!158, !10}
!159 = !{!160}
!160 = distinct !{!160, !161}
!161 = distinct !{!161, !"LVerDomain"}
!162 = !{!163}
!163 = distinct !{!163, !161}
!164 = !{!165}
!165 = distinct !{!165, !161}
!166 = distinct !{!166, !20}
!167 = distinct !{!167, !20}
!168 = distinct !{!168, !10}
!169 = distinct !{!169, !20}
!170 = distinct !{!170, !20}
!171 = distinct !{!171, !10}
!172 = !{!173}
!173 = distinct !{!173, !174}
!174 = distinct !{!174, !"LVerDomain"}
!175 = !{!176}
!176 = distinct !{!176, !174}
!177 = distinct !{!177, !20}
!178 = distinct !{!178, !20}
!179 = distinct !{!179, !10}
!180 = distinct !{!180, !10}
!181 = !{!182}
!182 = distinct !{!182, !183}
!183 = distinct !{!183, !"LVerDomain"}
!184 = !{!185}
!185 = distinct !{!185, !183}
!186 = distinct !{!186, !20}
!187 = distinct !{!187, !10}
!188 = !{!189}
!189 = distinct !{!189, !190}
!190 = distinct !{!190, !"LVerDomain"}
!191 = !{!192}
!192 = distinct !{!192, !190}
!193 = distinct !{!193, !20}
!194 = distinct !{!194, !20}
!195 = !{!196}
!196 = distinct !{!196, !197}
!197 = distinct !{!197, !"LVerDomain"}
!198 = !{!199}
!199 = distinct !{!199, !197}
!200 = distinct !{!200, !20}
!201 = distinct !{!201, !10}
!202 = distinct !{!202, !20}
!203 = distinct !{!203, !20}
!204 = distinct !{!204, !10}
!205 = !{!206}
!206 = distinct !{!206, !207}
!207 = distinct !{!207, !"LVerDomain"}
!208 = !{!209}
!209 = distinct !{!209, !207}
!210 = distinct !{!210, !20}
!211 = distinct !{!211, !10}
!212 = distinct !{!212, !10}
!213 = !{!214}
!214 = distinct !{!214, !215}
!215 = distinct !{!215, !"LVerDomain"}
!216 = !{!217}
!217 = distinct !{!217, !215}
!218 = distinct !{!218, !20}
!219 = distinct !{!219, !10}
!220 = distinct !{!220, !20}
!221 = !{!222}
!222 = distinct !{!222, !223}
!223 = distinct !{!223, !"LVerDomain"}
!224 = !{!225}
!225 = distinct !{!225, !223}
!226 = !{!227}
!227 = distinct !{!227, !223}
!228 = !{!222, !225}
!229 = distinct !{!229, !20}
!230 = distinct !{!230, !20}
!231 = distinct !{!231, !10}
!232 = !{!233}
!233 = distinct !{!233, !234}
!234 = distinct !{!234, !"LVerDomain"}
!235 = !{!236}
!236 = distinct !{!236, !234}
!237 = distinct !{!237, !20}
!238 = distinct !{!238, !10}
!239 = distinct !{!239, !20}
!240 = distinct !{!240, !20}
!241 = distinct !{!241, !10}
!242 = !{!243}
!243 = distinct !{!243, !244}
!244 = distinct !{!244, !"LVerDomain"}
!245 = !{!246}
!246 = distinct !{!246, !244}
!247 = distinct !{!247, !20}
!248 = distinct !{!248, !10}
!249 = distinct !{!249, !20}
!250 = !{!251}
!251 = distinct !{!251, !252}
!252 = distinct !{!252, !"LVerDomain"}
!253 = !{!254}
!254 = distinct !{!254, !252}
!255 = distinct !{!255, !20}
!256 = distinct !{!256, !20}
!257 = !{!258}
!258 = distinct !{!258, !259}
!259 = distinct !{!259, !"LVerDomain"}
!260 = !{!261}
!261 = distinct !{!261, !259}
!262 = !{!263}
!263 = distinct !{!263, !259}
!264 = !{!258, !261}
!265 = distinct !{!265, !20}
!266 = distinct !{!266, !20}
!267 = !{!268}
!268 = distinct !{!268, !269}
!269 = distinct !{!269, !"LVerDomain"}
!270 = !{!271}
!271 = distinct !{!271, !269}
!272 = distinct !{!272, !20}
!273 = distinct !{!273, !10}
!274 = distinct !{!274, !20}
!275 = !{!276}
!276 = distinct !{!276, !277}
!277 = distinct !{!277, !"LVerDomain"}
!278 = !{!279}
!279 = distinct !{!279, !277}
!280 = distinct !{!280, !20}
!281 = distinct !{!281, !10}
!282 = distinct !{!282, !20}
!283 = distinct !{!283, !10}
!284 = !{!285}
!285 = distinct !{!285, !286}
!286 = distinct !{!286, !"LVerDomain"}
!287 = !{!288, !289}
!288 = distinct !{!288, !286}
!289 = distinct !{!289, !286}
!290 = !{!288}
!291 = !{!289}
!292 = distinct !{!292, !20}
!293 = distinct !{!293, !20}
!294 = !{!295}
!295 = distinct !{!295, !296}
!296 = distinct !{!296, !"LVerDomain"}
!297 = !{!298}
!298 = distinct !{!298, !296}
!299 = distinct !{!299, !20}
!300 = distinct !{!300, !10}
!301 = distinct !{!301, !10}
!302 = distinct !{!302, !20}
!303 = !{!304}
!304 = distinct !{!304, !305}
!305 = distinct !{!305, !"LVerDomain"}
!306 = !{!307}
!307 = distinct !{!307, !305}
!308 = distinct !{!308, !20}
!309 = distinct !{!309, !20}
!310 = !{!311}
!311 = distinct !{!311, !312}
!312 = distinct !{!312, !"LVerDomain"}
!313 = !{!314}
!314 = distinct !{!314, !312}
!315 = distinct !{!315, !20}
!316 = distinct !{!316, !10}
!317 = !{!318}
!318 = distinct !{!318, !319}
!319 = distinct !{!319, !"LVerDomain"}
!320 = !{!321}
!321 = distinct !{!321, !319}
!322 = distinct !{!322, !20}
!323 = distinct !{!323, !20}
!324 = !{!325}
!325 = distinct !{!325, !326}
!326 = distinct !{!326, !"LVerDomain"}
!327 = !{!328}
!328 = distinct !{!328, !326}
!329 = distinct !{!329, !20}
!330 = distinct !{!330, !10}
!331 = distinct !{!331, !20}
!332 = distinct !{!332, !20}
!333 = distinct !{!333, !10}
