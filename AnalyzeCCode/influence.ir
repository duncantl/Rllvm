; ModuleID = 'influence.c'
source_filename = "influence.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct.SEXPREC = type opaque

@.str = private unnamed_addr constant [3 x i8] c"qr\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"qraux\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"rank\00", align 1
@R_NamesSymbol = external local_unnamed_addr global %struct.SEXPREC*, align 8
@.str.3 = private unnamed_addr constant [4 x i8] c"hat\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"coefficients\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"sigma\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"wt.res\00", align 1

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @influence(%struct.SEXPREC* %mqr, %struct.SEXPREC* %do_coef, %struct.SEXPREC* %e, %struct.SEXPREC* %stol) local_unnamed_addr #0 {
entry:
  %n = alloca i32, align 4
  %k = alloca i32, align 4
  %docoef = alloca i32, align 4
  %tol = alloca double, align 8
  %call = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %mqr, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #3
  %call1 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %mqr, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #3
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #3
  %call2 = tail call i32 @Rf_nrows(%struct.SEXPREC* %call) #3
  store i32 %call2, i32* %n, align 4, !tbaa !3
  %1 = bitcast i32* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #3
  %call3 = tail call %struct.SEXPREC* @getListElement(%struct.SEXPREC* %mqr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)) #3
  %call4 = tail call i32 @Rf_asInteger(%struct.SEXPREC* %call3) #3
  store i32 %call4, i32* %k, align 4, !tbaa !3
  %2 = bitcast i32* %docoef to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #3
  %call5 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %do_coef) #3
  store i32 %call5, i32* %docoef, align 4, !tbaa !3
  %3 = bitcast double* %tol to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #3
  %call6 = tail call double @Rf_asReal(%struct.SEXPREC* %stol) #3
  store double %call6, double* %tol, align 8, !tbaa !7
  %conv = sext i32 %call2 to i64
  %call7 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %conv) #3
  %call8 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %call7) #3
  %call9 = tail call double* @REAL(%struct.SEXPREC* %call8) #3
  %tobool = icmp eq i32 %call5, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call10 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 14, i32 %call2, i32 %call4) #3
  br label %if.end

if.else:                                          ; preds = %entry
  %call12 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 0) #3
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call12.sink = phi %struct.SEXPREC* [ %call12, %if.else ], [ %call10, %if.then ]
  %call13 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %call12.sink) #3
  %call15 = tail call %struct.SEXPREC* @Rf_allocVector(i32 14, i64 %conv) #3
  %call16 = tail call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %call15) #3
  %call17 = tail call double* @REAL(%struct.SEXPREC* %call) #3
  %call18 = tail call double* @REAL(%struct.SEXPREC* %call1) #3
  %call19 = tail call double* @REAL(%struct.SEXPREC* %e) #3
  %call20 = tail call double* @REAL(%struct.SEXPREC* %call13) #3
  %call21 = tail call double* @REAL(%struct.SEXPREC* %call16) #3
  call void @lminfl_(double* %call17, i32* nonnull %n, i32* nonnull %n, i32* nonnull %k, i32* nonnull %docoef, double* %call18, double* %call19, double* %call9, double* %call20, double* %call21, double* nonnull %tol) #3
  %4 = load i32, i32* %n, align 4, !tbaa !3
  %cmp98 = icmp sgt i32 %4, 0
  br i1 %cmp98, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %5 = sext i32 %4 to i64
  %xtraiter = and i64 %5, 1
  %6 = icmp eq i32 %4, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.lr.ph.new

for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
  %unroll_iter = sub nsw i64 %5, %xtraiter
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %arrayidx.epil = getelementptr inbounds double, double* %call9, i64 %indvars.iv.unr
  %7 = load double, double* %arrayidx.epil, align 8, !tbaa !7
  %8 = load double, double* %tol, align 8, !tbaa !7
  %sub.epil = fsub double 1.000000e+00, %8
  %cmp23.epil = fcmp ogt double %7, %sub.epil
  br i1 %cmp23.epil, label %if.then25.epil, label %for.cond.cleanup

if.then25.epil:                                   ; preds = %for.body.epil
  store double 1.000000e+00, double* %arrayidx.epil, align 8, !tbaa !7
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %if.then25.epil, %if.end
  %9 = load i32, i32* %docoef, align 4, !tbaa !3
  %tobool29 = icmp eq i32 %9, 0
  %conv30 = select i1 %tobool29, i64 3, i64 4
  %call31 = call %struct.SEXPREC* @Rf_allocVector(i32 19, i64 %conv30) #3
  %call32 = call %struct.SEXPREC* @Rf_protect(%struct.SEXPREC* %call31) #3
  %10 = load i32, i32* %docoef, align 4, !tbaa !3
  %tobool33 = icmp eq i32 %10, 0
  %conv35 = select i1 %tobool33, i64 3, i64 4
  %call36 = call %struct.SEXPREC* @Rf_allocVector(i32 16, i64 %conv35) #3
  %11 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NamesSymbol, align 8, !tbaa !9
  %call37 = call %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC* %call32, %struct.SEXPREC* %11, %struct.SEXPREC* %call36) #3
  %call39 = call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %call32, i64 0, %struct.SEXPREC* %call8) #3
  %call42 = call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)) #3
  call void @SET_STRING_ELT(%struct.SEXPREC* %call36, i64 0, %struct.SEXPREC* %call42) #3
  %12 = load i32, i32* %docoef, align 4, !tbaa !3
  %tobool43 = icmp eq i32 %12, 0
  br i1 %tobool43, label %if.end50, label %if.then44

for.body:                                         ; preds = %for.inc.1, %for.body.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %arrayidx = getelementptr inbounds double, double* %call9, i64 %indvars.iv
  %13 = load double, double* %arrayidx, align 8, !tbaa !7
  %14 = load double, double* %tol, align 8, !tbaa !7
  %sub = fsub double 1.000000e+00, %14
  %cmp23 = fcmp ogt double %13, %sub
  br i1 %cmp23, label %if.then25, label %for.inc

if.then25:                                        ; preds = %for.body
  store double 1.000000e+00, double* %arrayidx, align 8, !tbaa !7
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then25
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds double, double* %call9, i64 %indvars.iv.next
  %15 = load double, double* %arrayidx.1, align 8, !tbaa !7
  %16 = load double, double* %tol, align 8, !tbaa !7
  %sub.1 = fsub double 1.000000e+00, %16
  %cmp23.1 = fcmp ogt double %15, %sub.1
  br i1 %cmp23.1, label %if.then25.1, label %for.inc.1

if.then44:                                        ; preds = %for.cond.cleanup
  %call46 = call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %call32, i64 1, %struct.SEXPREC* %call13) #3
  %call49 = call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)) #3
  call void @SET_STRING_ELT(%struct.SEXPREC* %call36, i64 1, %struct.SEXPREC* %call49) #3
  br label %if.end50

if.end50:                                         ; preds = %for.cond.cleanup, %if.then44
  %m.0 = phi i32 [ 2, %if.then44 ], [ 1, %for.cond.cleanup ]
  %17 = zext i32 %m.0 to i64
  %call52 = call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %call32, i64 %17, %struct.SEXPREC* %call16) #3
  %inc53 = add nuw nsw i32 %m.0, 1
  %call55 = call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0)) #3
  call void @SET_STRING_ELT(%struct.SEXPREC* %call36, i64 %17, %struct.SEXPREC* %call55) #3
  %18 = zext i32 %inc53 to i64
  %call57 = call %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC* %call32, i64 %18, %struct.SEXPREC* %e) #3
  %call59 = call %struct.SEXPREC* @Rf_mkChar(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0)) #3
  call void @SET_STRING_ELT(%struct.SEXPREC* %call36, i64 %18, %struct.SEXPREC* %call59) #3
  call void @Rf_unprotect(i32 4) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #3
  ret %struct.SEXPREC* %call32

if.then25.1:                                      ; preds = %for.inc
  store double 1.000000e+00, double* %arrayidx.1, align 8, !tbaa !7
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then25.1, %for.inc
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare %struct.SEXPREC* @getListElement(%struct.SEXPREC*, i8*) local_unnamed_addr #2

declare i32 @Rf_nrows(%struct.SEXPREC*) local_unnamed_addr #2

declare i32 @Rf_asInteger(%struct.SEXPREC*) local_unnamed_addr #2

declare i32 @Rf_asLogical(%struct.SEXPREC*) local_unnamed_addr #2

declare double @Rf_asReal(%struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_protect(%struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_allocVector(i32, i64) local_unnamed_addr #2

declare double* @REAL(%struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_allocMatrix(i32, i32, i32) local_unnamed_addr #2

declare void @lminfl_(double*, i32*, i32*, i32*, i32*, double*, double*, double*, double*, double*, double*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

declare %struct.SEXPREC* @Rf_setAttrib(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @SET_VECTOR_ELT(%struct.SEXPREC*, i64, %struct.SEXPREC*) local_unnamed_addr #2

declare void @SET_STRING_ELT(%struct.SEXPREC*, i64, %struct.SEXPREC*) local_unnamed_addr #2

declare %struct.SEXPREC* @Rf_mkChar(i8*) local_unnamed_addr #2

declare void @Rf_unprotect(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 5.0.1 (tags/RELEASE_501/final)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"any pointer", !5, i64 0}
