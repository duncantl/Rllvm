; ModuleID = 'foo.c'
source_filename = "foo.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

%struct.SEXPREC = type { %struct.sxpinfo_struct, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %union.anon }
%struct.sxpinfo_struct = type { i32 }
%union.anon = type { %struct.symsxp_struct }
%struct.symsxp_struct = type { %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC* }

@R_OutputCon = common local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [32 x i8] c"../../../include/Rinlinedfuns.h\00", align 1
@R_NilValue = external local_unnamed_addr global %struct.SEXPREC*, align 8

; Function Attrs: nounwind ssp uwtable
define %struct.SEXPREC* @foo(%struct.SEXPREC* %prob) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.SEXPREC* @Rf_coerceVector(%struct.SEXPREC* %prob, i32 14) #3
  %0 = getelementptr inbounds %struct.SEXPREC, %struct.SEXPREC* %call, i64 0, i32 0, i32 0
  %bf.load.i = load i32, i32* %0, align 8
  %trunc.i = trunc i32 %bf.load.i to i5
  switch i5 %trunc.i, label %sw.default.i [
    i5 0, label %Rf_length.exit
    i5 10, label %sw.bb1.i
    i5 13, label %sw.bb1.i
    i5 14, label %sw.bb1.i
    i5 15, label %sw.bb1.i
    i5 -16, label %sw.bb1.i
    i5 9, label %sw.bb1.i
    i5 -13, label %sw.bb1.i
    i5 -12, label %sw.bb1.i
    i5 -8, label %sw.bb1.i
    i5 2, label %sw.bb4.i
    i5 6, label %sw.bb4.i
    i5 -15, label %sw.bb4.i
    i5 4, label %sw.bb7.i
  ]

sw.bb1.i:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %vecsxp.i = getelementptr inbounds %struct.SEXPREC, %struct.SEXPREC* %call, i64 0, i32 4
  %length.i = bitcast %union.anon* %vecsxp.i to i32*
  %1 = load i32, i32* %length.i, align 8, !tbaa !3
  %cmp.i = icmp eq i32 %1, -1
  br i1 %cmp.i, label %cond.true.i, label %Rf_length.exit

cond.true.i:                                      ; preds = %sw.bb1.i
  %call.i = tail call i32 @R_BadLongVector(%struct.SEXPREC* nonnull %call, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 138) #4
  unreachable

sw.bb4.i:                                         ; preds = %entry, %entry, %entry
  %2 = load %struct.SEXPREC*, %struct.SEXPREC** @R_NilValue, align 8
  %cmp617.i = icmp eq %struct.SEXPREC* %2, %call
  br i1 %cmp617.i, label %Rf_length.exit, label %while.body.i.preheader

while.body.i.preheader:                           ; preds = %sw.bb4.i
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i.preheader, %while.body.i
  %i.019.i = phi i32 [ %inc.i, %while.body.i ], [ 0, %while.body.i.preheader ]
  %s.addr.018.i = phi %struct.SEXPREC* [ %4, %while.body.i ], [ %call, %while.body.i.preheader ]
  %inc.i = add nuw nsw i32 %i.019.i, 1
  %3 = getelementptr inbounds %struct.SEXPREC, %struct.SEXPREC* %s.addr.018.i, i64 0, i32 4, i32 0, i32 1
  %4 = load %struct.SEXPREC*, %struct.SEXPREC** %3, align 8, !tbaa !11
  %cmp5.i = icmp ne %struct.SEXPREC* %4, null
  %cmp6.i = icmp ne %struct.SEXPREC* %4, %2
  %5 = and i1 %cmp5.i, %cmp6.i
  br i1 %5, label %while.body.i, label %Rf_length.exit

sw.bb7.i:                                         ; preds = %entry
  %call8.i = tail call i32 @Rf_envlength(%struct.SEXPREC* nonnull %call) #3
  br label %Rf_length.exit

sw.default.i:                                     ; preds = %entry
  br label %Rf_length.exit

Rf_length.exit:                                   ; preds = %while.body.i, %entry, %sw.bb1.i, %sw.bb4.i, %sw.bb7.i, %sw.default.i
  %retval.0.i = phi i32 [ 1, %sw.default.i ], [ %call8.i, %sw.bb7.i ], [ 0, %entry ], [ %1, %sw.bb1.i ], [ 0, %sw.bb4.i ], [ %inc.i, %while.body.i ]
  %call2 = tail call %struct.SEXPREC* @Rf_allocMatrix(i32 13, i32 %retval.0.i, i32 %retval.0.i) #3
  ret %struct.SEXPREC* %call2
}

declare %struct.SEXPREC* @Rf_coerceVector(%struct.SEXPREC*, i32) local_unnamed_addr #1

declare %struct.SEXPREC* @Rf_allocMatrix(i32, i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare i32 @R_BadLongVector(%struct.SEXPREC*, i8*, i32) local_unnamed_addr #2

declare i32 @Rf_envlength(%struct.SEXPREC*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 5.0.1 (tags/RELEASE_501/final)"}
!3 = !{!4, !6, i64 32}
!4 = !{!"VECTOR_SEXPREC", !5, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !10, i64 32}
!5 = !{!"sxpinfo_struct", !6, i64 0, !6, i64 0, !6, i64 0, !6, i64 1, !6, i64 3, !6, i64 3, !6, i64 3, !6, i64 3, !6, i64 3, !6, i64 3}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"any pointer", !7, i64 0}
!10 = !{!"vecsxp_struct", !6, i64 0, !6, i64 4}
!11 = !{!7, !7, i64 0}
