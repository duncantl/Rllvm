<section>
<title></title>

<para>

<r:code>
m = parseIR("array.ll")
</r:code>
<r:code>
m$do_colsum
<r:output><![CDATA[
struct SEXPREC * do_colsum ( struct SEXPREC * call, struct SEXPREC * op, struct SEXPREC * args, struct SEXPREC * rho )
]]></r:output>
</r:code>
<r:code>
library(NativeCodeAnalysis)
ret = getReturnValues(m$do_colsum)
ret[[1]]
<r:output><![CDATA[
[1] "  %ans.0 = phi %struct.SEXPREC* [ %call.i548, %if.then362 ], [ %call.i548, %if.end359 ], [ %call.i, %if.then55 ], [ %call.i, %if.end146 ]"
]]></r:output>
</r:code>

Since there is only one element in the list, we'll assign that element directly to <r:var>ret</r:var>
<r:code>
ret = ret[[1]]
</r:code>


The elements of this return expression are
<r:code>
ret[]
<r:output><![CDATA[
[[1]]
[1] "  %call.i548 = tail call %struct.SEXPREC* @Rf_allocVector3(i32 14, i64 %call6, %struct.R_allocator* null) #11"

[[2]]
[1] "  %call.i548 = tail call %struct.SEXPREC* @Rf_allocVector3(i32 14, i64 %call6, %struct.R_allocator* null) #11"

[[3]]
[1] "  %call.i = tail call %struct.SEXPREC* @Rf_allocVector3(i32 14, i64 %call13, %struct.R_allocator* null) #11"

[[4]]
[1] "  %call.i = tail call %struct.SEXPREC* @Rf_allocVector3(i32 14, i64 %call13, %struct.R_allocator* null) #11"
]]></r:output>
</r:code>

<r:code>
sapply(ret[], class)
<r:output><![CDATA[
[1] "CallInst" "CallInst" "CallInst" "CallInst"
]]></r:output>
</r:code>

<r:code>
sapply(ret[], function(x) getName(getCalledFunction(x)))
<r:output><![CDATA[
[1] "Rf_allocVector3" "Rf_allocVector3" "Rf_allocVector3"
[4] "Rf_allocVector3"
]]></r:output>
</r:code>

</para>

<para>
So now we get the types and lengths
<r:code>
types = sapply(ret[], function(x) if(is(x[[1]], "ConstantInt") ) getValue(x[[1]]) else x[[1]])
</r:code>
These are all 14 and so the return type is definitely a <r:func>numeric</r:func> vector.
</para>

<para>
We can apply the same optimistic processing to the length of the vector which is the second argument in each call to <c:func>Rf_allocVector3</c:func>:
<r:code>
lens = sapply(ret[], function(x) if(is(x[[2]], "ConstantInt") ) getValue(x[[2]]) else x[[2]])
<r:output><![CDATA[
[[1]]
[1] "  %call6 = tail call i64 @Rf_asVecSize(%struct.SEXPREC* %3) #11"

[[2]]
[1] "  %call6 = tail call i64 @Rf_asVecSize(%struct.SEXPREC* %3) #11"

[[3]]
[1] "  %call13 = tail call i64 @Rf_asVecSize(%struct.SEXPREC* %6) #11"

[[4]]
[1] "  %call13 = tail call i64 @Rf_asVecSize(%struct.SEXPREC* %6) #11"
]]></r:output>
</r:code>
Of course, these are not constant integers as they are data-dependent.
Each is a call to <c:func>Rf_asVecSize</c:func>.
We can see that the first two pass %3 to this routine,
and the other two calls pass %6.
In fact, we can determine that the first two return values
in the return PHI node, are identical as are the 3rd and 4th:
<r:code>
identical(ret[[1]], ret[[2]])
identical(ret[[3]], ret[[3]])  
</r:code>
So we only need to look at the 1st and 3rd of these.
</para>
<para>
We can find the values passed to <c:func>Rf_asVecSize</c:func>
<r:code>
lapply(lens[c(1,3)], function(x) x[[1]])
<r:output><![CDATA[
DO AGAIN WITH WRITING_BARRIER OFF
]]></r:output>
</r:code>
Since these are load instructions<fix>Are they? Seem to be calls to CAR()</fix>, we can get the value being loaded
<r:code>
sapply(lens[c(1,3)], function(x) x[[1]][[1]])
<r:output><![CDATA[
[[1]]
[1] "  %call2 = tail call %struct.SEXPREC.5* @CDR(%struct.SEXPREC.5* %args) #11"

[[2]]
[1] "  %call5 = tail call %struct.SEXPREC.5* @CDR(%struct.SEXPREC.5* %call2) #11"

[[1]]
[1] "  %carval5 = getelementptr inbounds %struct.SEXPREC, %struct.SEXPREC* %2, i64 0, i32 4, i32 0, i32 0"

[[2]]
[1] "  %carval12 = getelementptr inbounds %struct.SEXPREC, %struct.SEXPREC* %5, i64 0, i32 4, i32 0, i32 0"
]]></r:output><fix> Not sure where the second two of these came from. Doing it again, I get just the first 2.</fix>
</r:code>
When we activate the writing barrier in <r/>, these become calls to CDR
<r:output><![CDATA[
[[1]]
[1] "  %call2 = tail call %struct.SEXPREC.5* @CDR(%struct.SEXPREC.5* %args) #11"

[[2]]
[1] "  %call5 = tail call %struct.SEXPREC.5* @CDR(%struct.SEXPREC.5* %call2) #11"

[[1]]
]]></r:output>
To put these in context, let's look at the IR code near the start of do_colsum:
<ir:code>
%call1 = tail call %struct.SEXPREC* @CAR(%struct.SEXPREC* %args) #11
%call2 = tail call %struct.SEXPREC* @CDR(%struct.SEXPREC* %args) #11
%call3 = tail call %struct.SEXPREC* @CAR(%struct.SEXPREC* %call2) #11
%call4 = tail call i64 @Rf_asVecSize(%struct.SEXPREC* %call3) #11
%call5 = tail call %struct.SEXPREC* @CDR(%struct.SEXPREC* %call2) #11
%call6 = tail call %struct.SEXPREC* @CAR(%struct.SEXPREC* %call5) #11
%call7 = tail call i64 @Rf_asVecSize(%struct.SEXPREC* %call6) #11
%call8 = tail call %struct.SEXPREC* @CDR(%struct.SEXPREC* %call5) #11
%call9 = tail call %struct.SEXPREC* @CAR(%struct.SEXPREC* %call8) #11
%call10 = tail call i32 @Rf_asLogical(%struct.SEXPREC* %call9) #11  
</ir:code>
This is more familiar as it reflects the <c/> code:
<c:code>
x = CAR(args);
args = CDR(args);
R_xlen_t n = asVecSize(CAR(args));
args = CDR(args);
R_xlen_t p = asVecSize(CAR(args));
args = CDR(args);
NaRm = asLogical(CAR(args));
</c:code>
call1 is x and the first element of args.
call2 is the CDR(args).
call3 is the second element extracted from the original args.
So we see a common idiom of a sequence of CDR() assigned to a value and then next extracting the CAR().
</para>
<para>
Connecting this to the <r/> code calling
<r:code>
 .Internal(colSums(x, n, prod(dn), na.rm))
</r:code>
we see the following mapping of  R arguments to <ir/> variables,
including temporary variables we introduce as the CAR() is passed directly to a call:
<programlisting><![CDATA[
x -> call1
tmp -> call3 -> Rf_asVecSize(tmp)
tmp -> call6 -> prod(dn)
na.rm -> call9 -> asLogical()NaRM
]]></programlisting>
</para>


<para>
So we basically have the first and third return value have length values corresponding to
<r:code>
ret[[1]][[2]]
[1] "  %call4 = tail call i64 @Rf_asVecSize(%struct.SEXPREC.5* %call3) #11"
ret[[3]][[2]]
[1] "  %call7 = tail call i64 @Rf_asVecSize(%struct.SEXPREC.5* %call6) #11"
</r:code>
Both are calls to Rf_asVecSize.
The argument in the first is %call3 which is <r:var>n</r:var> in the <R/> code
as this is the CDR(CAR(args)).
The argument in the third (second of these) is %call6.
This is essentially CAR(CDR(CDR(args)), so the third argument which is prod(dn).
</para>
<para>

  The <r/> code is not as clear as it would be for a simple two-dimensional data structure as it handles
  muti-way arrays.
  For a 2-dimensional array,
  <r:var>n</r:var> is the number of rows, and <r:expr>prod(dn)</r:expr> is <r:expr>ncol(x)</r:expr>.
  So the return is a numeric vector of length <r:func>ncol(x)</r:func>
</para>


<para>
  The reason for the two return lengths is because do_colsum is used
  for both <r:func>rowSums</r:func> and <r:func>colSums</r:func> so one returns n values and the other
  returns p values where n and p are the <r:func>nrow</r:func> and <r:func>ncol</r:func>.
  As with <r:func>grepl</r:func>, the PRIMVAL value controls whether this computes
  column or row sums.
<c:code>
int OP = PRIMVAL(op);
if (OP == 0 || OP == 1) { /* columns */
    PROTECT(ans = allocVector(REALSXP, p));
     ....
}
else { /* rows */
	PROTECT(ans = allocVector(REALSXP, n));
     ...
}
</c:code>

So we can navigate the predecessor blocks of our return values to find
where this a priori known value is used in the if condition.
<r:code>
bb = blocks(ret)  
i = getPredecessors(bb[[1]])
<r:output><![CDATA[
[[1]]
[BasicBlock] %if.end359
  %cmp360 = icmp sgt i64 %call6, 10000
  br i1 %cmp360, label %if.then362, label %if.end364
]]></r:output>
</r:code>

<r:code>
getTerminator(i[[1]])
getTerminator(i[[1]])[[1]]
</r:code>

</para>
</section>
